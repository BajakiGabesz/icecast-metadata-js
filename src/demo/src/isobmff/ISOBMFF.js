import Box from "./Box";

export default class ISOBMFF {
  /* prettier-ignore */
  static ftyp = [0x69,0x73,0x6F,0x6D,0x00,0x00,0x02,0x00,0x69,0x73,0x6F,0x6D,0x69,0x73,0x6F,0x32,0x69,0x73,0x6F,0x36,0x6D,0x70,0x34,0x31];
  /* prettier-ignore */
  static traf = [0x00,0x00,0x00,0x14,0x74,0x66,0x64,0x74,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
  /* prettier-ignore */
  static mvhd = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe8,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02];
  /* prettier-ignore */
  static mvex = [0x00,0x00,0x00,0x20,0x74,0x72,0x65,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];

  /* prettier-ignore */
  static meta = [0x00,0x00,0x00,0x00];
  /* prettier-ignore */
  static hdlr = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x64,0x69,0x72,0x61,0x70,0x70,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
  static ilst = [
    0x00,
    0x00,
    0x00,
    0x25,
    0xa9,
    0x74,
    0x6f,
    0x6f,
    0x00,
    0x00,
    0x00,
    0x1d,
    0x64,
    0x61,
    0x74,
    0x61,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x4c,
    0x61,
    0x76,
    0x66,
    0x35,
    0x38,
    0x2e,
    0x32,
    0x39,
    0x2e,
    0x31,
    0x30,
    0x30,
  ];
  /*
        ftyp file-type
          major_brand / compatible_brand -> must be something user agent supports
        moov
          must contain boxes / fields required by major_brand / compatible_brand
          entry_count in stts, stsc, and stco are set to 0
          mvex (movie extends) -> required
        styp (segment type)
          optional
        moof
          must conform to requirements for major_brand / compatible_brand
          traf (track fragment box) -> required
            tftd (track fragment decode time box) -> required
            base-data-offset-present - (must be set to false)
          trun (track fragment run) -> required
            data-offset-present (must be set to true)
        mdat
        */

  static getUint32(number) {
    const lengthBytes = new Uint8Array(4);
    new DataView(lengthBytes.buffer).setUint32(0, number, false);
    return lengthBytes;
  }

  static get trak() {
    const trak = new Box("trak");

    const tkhd = new Box("tkhd");
    /* prettier-ignore */
    tkhd.appendBytes([0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]);

    const mdia = new Box("mdia");
    const mdhd = new Box("mdhd");
    /* prettier-ignore */
    mdhd.appendBytes([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xac,0x44,0x00,0x00,0x00,0x00,0x55,0xc4,0x00,0x00]);

    const hdlr = new Box("hdlr");
    /* prettier-ignore */
    hdlr.appendBytes([0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x6f,0x75,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x6f,0x75,0x6e,0x64,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00]);

    const minf = new Box("minf");
    /* prettier-ignore */
    minf.appendBytes([0x00,0x00,0x00,0x10,0x73,0x6d,0x68,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x64,0x69,0x6e,0x66,0x00,0x00,0x00,0x1c,0x64,0x72,0x65,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0c,0x75,0x72,0x6c,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xac,0x73,0x74,0x62,0x6c,0x00,0x00,0x00,0x60,0x73,0x74,0x73,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x50,0x6d,0x70,0x34,0x61,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x00,0x00,0x00,0x00,0xac,0x44,0x00,0x00,0x00,0x00,0x00,0x2c,0x65,0x73,0x64,0x73,0x00,0x00,0x00,0x00,0x03,0x80,0x80,0x80,0x1b,0x00,0x01,0x00,0x04,0x80,0x80,0x80,0x0d,0x6b,0x15,0x00,0x00,0x00,0x00,0x04,0xe2,0x00,0x00,0x00,0x00,0x00,0x06,0x80,0x80,0x80,0x01,0x02,0x00,0x00,0x00,0x10,0x73,0x74,0x74,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x73,0x74,0x73,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x73,0x74,0x73,0x7a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x73,0x74,0x63,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]);

    trak.addBox(tkhd);
    trak.addBox(mdia);

    mdia.addBox(mdhd);
    mdia.addBox(hdlr);
    mdia.addBox(minf);

    return trak;
  }

  static get header() {
    const ftyp = new Box("ftyp");
    ftyp.appendBytes(ISOBMFF.ftyp);

    const moov = new Box("moov");

    const mvhd = new Box("mvhd");
    mvhd.appendBytes(ISOBMFF.mvhd);

    const mvex = new Box("mvex");
    mvex.appendBytes(ISOBMFF.mvex);

    const udta = new Box("udta");
    const meta = new Box("meta");
    meta.appendBytes(ISOBMFF.meta);
    const hdlr = new Box("hdlr");
    hdlr.appendBytes(ISOBMFF.hdlr);
    const ilst = new Box("ilst");
    ilst.appendBytes(ISOBMFF.ilst);

    moov.addBox(mvhd);
    moov.addBox(ISOBMFF.trak);
    moov.addBox(mvex);

    moov.addBox(udta);
    udta.addBox(meta);
    meta.addBox(hdlr);
    meta.addBox(ilst);

    return Uint8Array.from([...ftyp.contents, ...moov.contents]);
  }

  static wrap(samples, data) {
    const moof = new Box("moof");

    const traf = new Box("traf");
    moof.addBox(traf);
    traf.appendBytes(ISOBMFF.traf);

    const tfhd = new Box("tfhd");
    traf.addBox(tfhd);
    /* prettier-ignore */
    tfhd.appendBytes([0x00,0x00,0x00,0x39,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xBF,0x00,0x00,0x04,0x80,
      ...this.getUint32(samples[0]), // default sample size
      0x02,0x00,0x00,0x00]);

    const trun = new Box("trun");
    traf.addBox(trun);

    trun.appendBytes([0x00, 0x00, 0x02, 0x01]); // flags
    trun.appendBytes(ISOBMFF.getUint32(samples.length)); // number of samples
    trun.appendBytes(samples.flatMap((sample) => [...Box.getUint32(sample)])); // samples lengths
    trun.insertBytes(Box.getUint32(moof.length + 12), 8); // data offset (moof length + mdat length + mdat)

    const mdat = new Box("mdat");
    mdat.appendBytes(data);

    return Uint8Array.from([...moof.contents, ...mdat.contents]);
  }
}

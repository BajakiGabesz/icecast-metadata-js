import Box from "./Box";

export default class ISOBMFF {
  /* prettier-ignore */
  static ftyp = [0x69,0x73,0x6F,0x6D,0x00,0x00,0x02,0x00,0x69,0x73,0x6F,0x6D,0x69,0x73,0x6F,0x32,0x69,0x73,0x6F,0x36,0x6D,0x70,0x34,0x31];
  /* prettier-ignore */
  static traf = [0x00,0x00,0x00,0x24,0x74,0x66,0x68,0x64,0x00,0x00,0x00,0x39,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xBF,0x00,0x00,0x04,0x80,0x00,0x00,0x02,0x72,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x74,0x66,0x64,0x74,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00];
  static mfhd = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];
  static moov = [
    0x00,
    0x00,
    0x00,
    0x6c,
    0x6d,
    0x76,
    0x68,
    0x64,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0xe8,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x02,
    0x00,
    0x00,
    0x01,
    0xa1,
    0x74,
    0x72,
    0x61,
    0x6b,
    0x00,
    0x00,
    0x00,
    0x5c,
    0x74,
    0x6b,
    0x68,
    0x64,
    0x00,
    0x00,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x40,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x3d,
    0x6d,
    0x64,
    0x69,
    0x61,
    0x00,
    0x00,
    0x00,
    0x20,
    0x6d,
    0x64,
    0x68,
    0x64,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xac,
    0x44,
    0x00,
    0x00,
    0x00,
    0x00,
    0x55,
    0xc4,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2d,
    0x68,
    0x64,
    0x6c,
    0x72,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x73,
    0x6f,
    0x75,
    0x6e,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x53,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x48,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x72,
    0x00,
    0x00,
    0x00,
    0x00,
    0xe8,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x00,
    0x00,
    0x00,
    0x10,
    0x73,
    0x6d,
    0x68,
    0x64,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x24,
    0x64,
    0x69,
    0x6e,
    0x66,
    0x00,
    0x00,
    0x00,
    0x1c,
    0x64,
    0x72,
    0x65,
    0x66,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x0c,
    0x75,
    0x72,
    0x6c,
    0x20,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0xac,
    0x73,
    0x74,
    0x62,
    0x6c,
    0x00,
    0x00,
    0x00,
    0x60,
    0x73,
    0x74,
    0x73,
    0x64,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x50,
    0x6d,
    0x70,
    0x34,
    0x61,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x02,
    0x00,
    0x10,
    0x00,
    0x00,
    0x00,
    0x00,
    0xac,
    0x44,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2c,
    0x65,
    0x73,
    0x64,
    0x73,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0x80,
    0x80,
    0x80,
    0x1b,
    0x00,
    0x01,
    0x00,
    0x04,
    0x80,
    0x80,
    0x80,
    0x0d,
    0x6b,
    0x15,
    0x00,
    0x00,
    0x00,
    0x00,
    0x02,
    0xee,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x06,
    0x80,
    0x80,
    0x80,
    0x01,
    0x02,
    0x00,
    0x00,
    0x00,
    0x10,
    0x73,
    0x74,
    0x74,
    0x73,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x73,
    0x74,
    0x73,
    0x63,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x14,
    0x73,
    0x74,
    0x73,
    0x7a,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x10,
    0x73,
    0x74,
    0x63,
    0x6f,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x28,
    0x6d,
    0x76,
    0x65,
    0x78,
    0x00,
    0x00,
    0x00,
    0x20,
    0x74,
    0x72,
    0x65,
    0x78,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x62,
    0x75,
    0x64,
    0x74,
    0x61,
    0x00,
    0x00,
    0x00,
    0x5a,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x21,
    0x68,
    0x64,
    0x6c,
    0x72,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x6d,
    0x64,
    0x69,
    0x72,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2d,
    0x69,
    0x6c,
    0x73,
    0x74,
    0x00,
    0x00,
    0x00,
    0x25,
    0xa9,
    0x74,
    0x6f,
    0x6f,
    0x00,
    0x00,
    0x00,
    0x1d,
    0x64,
    0x61,
    0x74,
    0x61,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x4c,
    0x61,
    0x76,
    0x66,
    0x35,
    0x38,
    0x2e,
    0x32,
    0x39,
    0x2e,
    0x31,
    0x30,
    0x30,
  ];

  /*
        ftyp file-type
          major_brand / compatible_brand -> must be something user agent supports
        moov
          must contain boxes / fields required by major_brand / compatible_brand
          entry_count in stts, stsc, and stco are set to 0
          mvex (movie extends) -> required
        styp (segment type)
          optional
        moof
          must conform to requirements for major_brand / compatible_brand
          traf (track fragment box) -> required
            tftd (track fragment decode time box) -> required
            base-data-offset-present - (must be set to false)
          trun (track fragment run) -> required
            data-offset-present (must be set to true)
        mdat
        */

  static getUint32(number) {
    const lengthBytes = new Uint8Array(4);
    new DataView(lengthBytes.buffer).setUint32(0, number, false);
    return lengthBytes;
  }

  static get header() {
    const ftyp = new Box("ftyp");
    ftyp.appendBytes(ISOBMFF.ftyp);

    const moov = new Box("moov");
    moov.appendBytes(ISOBMFF.moov);

    return Uint8Array.from([...ftyp.contents, ...moov.contents]);
  }

  static wrap(samples, data) {
    const moof = new Box("moof");
    const mfhd = new Box("mfhd");
    mfhd.appendBytes(ISOBMFF.mfhd);
    moof.addBox(mfhd);

    const traf = new Box("traf");
    traf.appendBytes(ISOBMFF.traf);

    const sampleArray = samples.flatMap((sample) => [...Box.getUint32(sample)]);
    const trun = new Box("trun");

    moof.addBox(traf);
    traf.addBox(trun);

    trun.appendBytes([0x00, 0x00, 0x02, 0x01]); // flags
    trun.appendBytes(ISOBMFF.getUint32(samples.length)); // number of samples
    trun.appendBytes(sampleArray);
    trun.insertBytes(Box.getUint32(moof.length + 12), 8); // data offset (moof length + mdat length + mdat)

    const mdat = new Box("mdat");
    mdat.appendBytes(data);

    return Uint8Array.from([...moof.contents, ...mdat.contents]);
  }

  static getMdat(data) {
    const mdatLength = ISOBMFF.getUint32(8 + data.length);
    const mdat = Uint8Array.from([0x6d, 0x64, 0x61, 0x74]);

    return Uint8Array.from([...mdatLength, ...mdat, ...data]);
  }
}

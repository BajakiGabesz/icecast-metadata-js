{"version":3,"sources":["webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/IcecastMetadataQueue.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/IcecastMetadataReader.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/DualMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/IcyMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/MetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/OggMetadataParser.js","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/MetadataParser/Stats.js","webpack://IcecastMetadataStats/webpack/bootstrap","webpack://IcecastMetadataStats/webpack/runtime/compat get default export","webpack://IcecastMetadataStats/webpack/runtime/define property getters","webpack://IcecastMetadataStats/webpack/runtime/hasOwnProperty shorthand","webpack://IcecastMetadataStats/./node_modules/icecast-metadata-js/src/IcecastReadableStream.js","webpack://IcecastMetadataStats/./src/IcecastMetadataStats.js"],"names":["noOp","module","exports","constructor","icyBr","onMetadataUpdate","onMetadataEnqueue","this","_icyBr","_onMetadataUpdate","_onMetadataEnqueue","_isInitialMetadata","_metadataQueue","map","_timeoutId","rest","addMetadata","metadata","stats","timestampOffset","timestamp","_enqueueMetadata","getTimeByBytes","currentStreamPosition","bytesRead","purgeMetadataQueue","forEach","i","clearTimeout","metadataPayload","push","_dequeueMetadata","setTimeout","shift","MetadataParser","IcyMetadataParser","OggMetadataParser","DualMetadataParser","metadataTypes","hasIcy","includes","hasOgg","_metadataParser","string","parseIcyMetadata","icyMetaInt","chunk","iterator","readAll","asyncIterator","asyncReadAll","params","onStream","_oggMetadataParser","_icyMetadataParser","value","stream","oggValue","icyDetectionTimeout","super","_icyMetaInt","_icyDetectionTimeout","_generator","_icyParser","next","_hasIcyMetadata","_remainingData","_getStream","_getMetadataLength","_getMetadata","Infinity","metadataString","metadataRegex","metadataElement","match","RegExp","_logError","METADATA_SEARCH","startTime","Date","now","metaInt","_buffer","_concatBuffers","_readData","detectMetadata","length","_onMetadataFailed","_stats","currentStreamBytesRemaining","_sendStream","_getNextValue","addMetadataLengthBytes","currentMetadataBytesRemaining","addMetadataBytes","_sendMetadata","_decoder","decode","Decoder","TextDecoder","Stats","_currentPosition","Uint8Array","_onStream","_onMetadata","onMetadata","onMetadataFailed","_onError","onError","_enableLogging","enableLogging","_onStreamPromise","Promise","resolve","_onMetadataPromise","_passThroughParser","buf1","buf2","result","set","messages","console","warn","reduce","acc","message","addStreamBytes","streamPayload","minLength","subarray","addBytes","data","addCurrentBytesRemaining","_oggParser","_hasOggPage","codecMatcher","_identifyCodec","offset","DataView","from","buffer","getUint32","matchString","bytes","String","fromCharCode","syncBytes","_totalBytesRead","_currentBytesRemaining","baseOggPage","oggPageSegments","octet","_matchBytes","regex","_readVorbisComment","vendorStringLength","_getUint32","vendorString","commentListLength","comments","commentLength","comment","delimiter","indexOf","key","toUpperCase","val","VENDOR_STRING","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","IcecastReadableStream","response","icecast","_readableStream","ReadableStream","controller","parseInt","headers","async","enqueue","body","close","_icecast","e","name","readableStream","reader","getReader","Symbol","read","STOPPED","FETCHING","p","WeakMap","icyController","icyFetchStatus","oggController","oggFetchStatus","icestatsEndpoint","icestatsController","icestatsFetchStatus","statsEndpoint","statsController","statsFetchStatus","nextsongsEndpoint","nextsongsController","nextsongsFetchStatus","sevenhtmlEndpoint","sevenhtmlController","sevenhtmlFetchStatus","streamEndpoint","sources","interval","onStats","onStatsFetch","state","intervalId","fetchStats","getStreamMetadata","IcecastMetadataStats","endpoint","options","serverPath","split","slice","join","AbortController","xml","serialize","element","children","Number","isNaN","innerHTML","json","child","nodeName","Array","isArray","DOMParser","parseFromString","deserialize","start","fetch","then","setInterval","stop","clearInterval","abort","oldState","promises","getIcestats","getSevenhtml","getStats","getNextsongs","getIcyMetadata","getOggMetadata","all","stat","status","mapper","res","icestats","text","s","groups","StreamTitle","currentListeners","peakListeners","maxListeners","bitrate","serverListeners","sevenhtml","xml2Json","SHOUTCASTSERVER","STREAMSTATS","NEXTSONGS","nextsongs","metadataType","startReading","method","signal","ok","Error","catch","finally"],"mappings":";;;;;;;;;;;;;;;;;;;8CAiBA,MAAMA,EAAO,OA4GbC,EAAOC,QA1GP,MAwBEC,aAAY,MAAEC,EAAK,iBAAEC,EAAmBL,EAAI,kBAAEM,EAAoBN,IAChEO,KAAKC,EAASJ,EACdG,KAAKE,EAAoBJ,EACzBE,KAAKG,EAAqBJ,EAC1BC,KAAKI,GAAqB,EAC1BJ,KAAKK,EAAiB,GAOxB,oBACE,OAAOL,KAAKK,EAAeC,KAAI,EAAG,EAAAC,KAAeC,KAAWA,IAS9DC,aAAY,SAAEC,EAAQ,MAAEC,GAASC,EAAiBC,EAAY,GAM5Db,KAAKc,EACHJ,EACAE,EACAC,EAAYb,KAAKe,eAAeJ,EAAMK,wBAS1CD,eAAeE,GACb,OAAOjB,KAAKC,EAASgB,GAA2B,IAAdjB,KAAKC,GAAgB,EAMzDiB,qBACElB,KAAKK,EAAec,SAASC,GAAMC,aAAaD,EAAEb,KAClDP,KAAKK,EAAiB,GAGxB,EAAiBK,EAAUE,EAAiBC,GAC1C,MAAMS,EAAkB,CACtBZ,WACAE,kBACAC,aAGFb,KAAKK,EAAekB,KAAKD,GACzBtB,KAAKG,EAAmBO,EAAUE,EAAiBC,GAE/Cb,KAAKI,GACPJ,KAAKwB,IACLxB,KAAKI,GAAqB,GAE1BkB,EAAgBf,EAAakB,YAAW,KACtCzB,KAAKwB,MAC4B,KAA/BZ,EAAkBC,IAI1B,IACE,MAAM,SACJH,EAAQ,gBACRE,EAAe,UACfC,GACEb,KAAKK,EAAeqB,QACxB1B,KAAKE,EAAkBQ,EAAUE,EAAiBC,M,cCxGtD,MAAMc,EAAiB,EAAQ,KACzBC,EAAoB,EAAQ,KAC5BC,EAAoB,EAAQ,KAC5BC,EAAqB,EAAQ,KA4FnCpC,EAAOC,QA1FP,MA0BEC,aAAY,cAAEmC,EAAgB,CAAC,UAAWvB,GAAS,IACjD,MAAMwB,EAASD,EAAcE,SAAS,OAChCC,EAASH,EAAcE,SAAS,OAEhBjC,KAAKmC,EAAvBH,GAAUE,EAA+B,IAAIJ,EAAmBtB,GAC3D0B,EAA+B,IAAIL,EAAkBrB,GACrDwB,EAA+B,IAAIJ,EAAkBpB,GAClC,IAAImB,EAAenB,GAQjD,wBAAwB4B,GACtB,OAAOR,EAAkBS,iBAAiBD,GAO5C,iBACE,OAAOpC,KAAKmC,EAAgBG,WAS9B,UAAUC,SACDvC,KAAKmC,EAAgBK,SAASD,GAOvCE,QAAQF,GACNvC,KAAKmC,EAAgBM,QAAQF,GAS/B,oBAAqBA,GACnB,aAAcvC,KAAKmC,EAAgBO,cAAcH,GAOnD,mBAAmBA,GACjB,OAAOvC,KAAKmC,EAAgBQ,aAAaJ,M,cC3F7C,MAAMX,EAAoB,EAAQ,KAC5BC,EAAoB,EAAQ,KA4DlCnC,EAAOC,QApDP,MACEC,YAAYgD,GACV,MAAM,SAAEC,KAAarC,GAASoC,EAC9B5C,KAAK8C,EAAqB,IAAIjB,EAAkBe,GAChD5C,KAAK+C,EAAqB,IAAInB,EAAkBpB,GAGlD,iBACE,OAAOR,KAAK+C,EAAmBT,WAGjC,UAAUC,GACR,IAAK,MAAMS,KAAShD,KAAK+C,EAAmBP,SAASD,GAC/CS,EAAMC,aACDjD,KAAK8C,EAAmBN,SAASQ,EAAMC,cAExCD,EAKZP,QAAQF,GACN,IAAK,MAAMS,KAAShD,KAAK+C,EAAmBP,SAASD,GAC/CS,EAAMC,QACRjD,KAAK8C,EAAmBL,QAAQO,EAAMC,QAK5C,oBAAqBV,GACnB,UAAW,MAAMS,KAAShD,KAAK+C,EAAmBL,cAAcH,GAC9D,GAAIS,EAAMC,OACR,UAAW,MAAMC,KAAYlD,KAAK8C,EAAmBJ,cACnDM,EAAMC,cAEAC,aAGFF,EAKZ,mBAAmBT,GACjB,UAAW,MAAMS,KAAShD,KAAK+C,EAAmBP,SAASD,GACrDS,EAAMC,cACFjD,KAAK8C,EAAmBH,aAAaK,EAAMC,W,cCvDzD,MAAMtB,EAAiB,EAAQ,KAQ/B,MAAMC,UAA0BD,EAC9B/B,aAAY,WAAE0C,EAAU,oBAAEa,EAAsB,OAAS3C,IACvD4C,MAAM5C,GAENR,KAAKqD,EAAcf,EACnBtC,KAAKsD,EAAuBH,EAE5BnD,KAAKuD,EAAavD,KAAKwD,IACvBxD,KAAKuD,EAAWE,OAGlB,KACE,SAAWzD,KAAK0D,IACd,OACE1D,KAAK2D,EAAiB3D,KAAKqD,QACpBrD,KAAK4D,UACL5D,KAAK6D,IACR7D,KAAK2D,UAAuB3D,KAAK8D,KAIzC9D,KAAK2D,EAAiBI,UACf/D,KAAK4D,IAGd,wBAAwBI,GAOtB,MAAMC,EAAgB,+CAChBvD,EAAW,GAGjB,IAAK,MAAMwD,KAAmBF,EAAeG,MAC3C,IAAIC,OAAOH,EAAe,OACvB,GAAI,CACP,MAAME,EAAQD,EAAgBC,MAAMF,GAChCE,IAAOzD,EAASyD,EAAc,OAAO,KAAKA,EAAc,OAAO,KAIrE,OAAOzD,EAGT,iBACE,OAAOV,KAAKqD,EAGd,KACE,GAAIrD,KAAKqD,EAAc,EAAG,OAAO,EACjC,IAAKrD,KAAKsD,EAAsB,OAAO,EAEvCtD,KAAKqE,EACH,uEACA,6GAIF,MAAMC,EAAkB,CAAC,KAAK,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IACjEC,EAAYC,KAAKC,MACvB,IAAIC,EAAU,EAEd,KAAOH,EAAYvE,KAAKsD,EAAuBkB,KAAKC,OAAO,CACzDzE,KAAK2E,EAAUhD,EAAeiD,EAC5B5E,KAAK2E,QACE3E,KAAK6E,KAIdC,EAAgB,KACdJ,EACA1E,KAAK2E,EAAQI,OAAST,EAAgBS,QACtC,CACA,IAAK,IAAI3D,EAAI,EAAGA,EAAIkD,EAAgBS,OAAQ3D,IAC1C,GAAIpB,KAAK2E,EAAQvD,EAAIsD,KAAaJ,EAAgBlD,GAAI,CACpDsD,IACA,SAASI,EASb,OAHA9E,KAAKqE,EAAU,8CAA8CK,MAC7D1E,KAAKqD,EAAcqB,GAEZ,GAYX,OAPA1E,KAAKqE,EACH,sGACA,YAAYrE,KAAK2E,EAAQI,qBAAqBP,KAAKC,MAAQF,GAAa,eACxE,4FAEFvE,KAAKgF,EAAkB,QAEhB,EAGT,KAGE,IAFAhF,KAAKiF,EAAOC,4BAA8BlF,KAAK2D,EAExC3D,KAAK2D,SACH3D,KAAKmF,QAAmB/B,MAAMgC,KAIzC,KACEpF,KAAK2D,EAAiB,EAEtB,GACE3D,KAAK2D,EAAoD,UAA3B3D,KAAKoF,KAAiB,SACrB,IAAxBpF,KAAK2D,GAEd3D,KAAKiF,EAAOI,uBAAuB,GAGrC,KACErF,KAAKiF,EAAOK,8BAAgCtF,KAAK2D,EAEjD,MAAMjD,QAAkBV,KAAKoF,EAAcpF,KAAK2D,GAChD3D,KAAKiF,EAAOM,iBAAiB7E,EAASqE,cAE/B/E,KAAKwF,EACV5D,EAAkBS,iBAAiBrC,KAAKyF,EAASC,OAAOhF,MAK9DhB,EAAOC,QAAUiC,G,cC7IjB,MAAM+D,EAAU,oBAA+BC,YACzCC,EAAQ,EAAQ,GAEhBpG,EAAO,OAQb,MAAMkC,EACJ/B,YAAYgD,GACV5C,KAAK2D,EAAiB,EACtB3D,KAAK8F,EAAmB,EACxB9F,KAAK2E,EAAU,IAAIoB,WAAW,GAC9B/F,KAAKiF,EAAS,IAAIY,EAClB7F,KAAKyF,EAAW,IAAIE,EAAQ,SAE5B3F,KAAKgG,EAAYpD,EAAOC,UAAYpD,EACpCO,KAAKiG,EAAcrD,EAAOsD,YAAczG,EACxCO,KAAKgF,EAAoBpC,EAAOuD,kBAAoB1G,EACpDO,KAAKoG,EAAWxD,EAAOyD,SAAW5G,EAClCO,KAAKsG,EAAiB1D,EAAO2D,gBAAiB,EAE9CvG,KAAKwG,EAAmBC,QAAQC,UAChC1G,KAAK2G,EAAqBF,QAAQC,UAClC1G,KAAKuD,EAAavD,KAAK4G,IACvB5G,KAAKuD,EAAWE,OAGlB,KAEE,IADAzD,KAAK2D,EAAiBI,YAEb/D,KAAKmF,QAAmBnF,KAAKoF,KAIxC,SAAsByB,EAAMC,GAC1B,MAAMC,EAAS,IAAIhB,WAAWc,EAAK9B,OAAS+B,EAAK/B,QAGjD,OAFAgC,EAAOC,IAAIH,GACXE,EAAOC,IAAIF,EAAMD,EAAK9B,QACfgC,EAGT,UAAUxE,GACR,IACE,IAAInB,EAAIpB,KAAKuD,EAAWE,KAAKlB,GAC7BnB,EAAE4B,MACF5B,EAAIpB,KAAKuD,EAAWE,aAEdrC,EAAE4B,MAIZP,QAAQF,GACN,IACE,IAAInB,EAAIpB,KAAKuD,EAAWE,KAAKlB,GAC7BnB,EAAE4B,MACF5B,EAAIpB,KAAKuD,EAAWE,SAIxB,oBAAqBlB,GACnB,IACE,IAAInB,EAAIpB,KAAKuD,EAAWE,KAAKlB,GAC7BnB,EAAE4B,MACF5B,EAAIpB,KAAKuD,EAAWE,aAEdzD,KAAKwG,QACLxG,KAAK2G,QACLvF,EAAE4B,MAIZ,mBAAmBT,GACjB,IACE,IAAInB,EAAIpB,KAAKuD,EAAWE,KAAKlB,GAC7BnB,EAAE4B,MACF5B,EAAIpB,KAAKuD,EAAWE,aAEdzD,KAAKwG,QACLxG,KAAK2G,EAIf,KAAaM,GACPjH,KAAKsG,GACPY,QAAQC,KACN,sBACAF,EAASG,QAAO,CAACC,EAAKC,IAAYD,EAAM,OAASC,GAAS,KAG9DtH,KAAKoG,KAAYa,GAGnB,GAAahE,GACXjD,KAAKiF,EAAOsC,eAAetE,EAAO8B,QAElC,MAAMyC,EAAgB,CAAEvE,SAAQtC,MAAOX,KAAKiF,EAAOtE,OAEnDX,KAAKwG,EAAmBxG,KAAKgG,EAAUwB,SACjCA,EAGR,GAAe9G,GACb,MAAMY,EAAkB,CACtBZ,WACAC,MAAOX,KAAKiF,EAAOtE,OAGrBX,KAAK2G,EAAqB3G,KAAKiG,EAAY3E,SACrCA,EAGR,GAAemG,EAAY,GAMzB,IALIzH,KAAK8F,IAAqB9F,KAAK2E,EAAQI,SACzC/E,KAAK2E,QAAiB3E,KAAK6E,IAC3B7E,KAAK8F,EAAmB,GAGnB9F,KAAK2E,EAAQI,OAAS/E,KAAK8F,EAAmB2B,GACnDzH,KAAK2E,EAAUhD,EAAeiD,EAC5B5E,KAAK2E,QACE3E,KAAK6E,KAIhB,MAAM7B,EAAQhD,KAAK2E,EAAQ+C,SACzB1H,KAAK8F,GACJ2B,GAAazH,KAAK2D,GAAkB3D,KAAK8F,GAW5C,OARA9F,KAAKiF,EAAO0C,SAAS3E,EAAM+B,QAC3B/E,KAAK2D,EACHX,EAAM+B,OAAS/E,KAAK2D,EAChB3D,KAAK2D,EAAiBX,EAAM+B,OAC5B,EAEN/E,KAAK8F,GAAoB9C,EAAM+B,OAExB/B,EAGT,KACE,IAAI4E,EAEJ,GACEA,eACQA,GAAwB,IAAhBA,EAAK7C,QAGvB,OADA/E,KAAKiF,EAAO4C,yBAAyBD,EAAK7C,QACnC6C,GAIXlI,EAAOC,QAAUgC,G,cC5JjB,MAAMA,EAAiB,EAAQ,KAqL/BjC,EAAOC,QA9KP,cAAgCgC,EAC9B/B,YAAYgD,GACVQ,MAAMR,GAEN5C,KAAKuD,EAAavD,KAAK8H,KACvB9H,KAAKuD,EAAWE,OAGlB,MACE,SAAWzD,KAAK+H,KAAe,CAC7B,MAAMC,QAAsBhI,KAAKiI,KACjC,GAAID,EACF,WAAchI,KAAK+H,YACV/H,KAAK8D,EAAakE,SAClBhI,KAAK4D,IAKlB5D,KAAK2D,EAAiBI,UACf/D,KAAK4D,IAGd,GAAWgE,EAAMM,EAAS,GACxB,OAAO,IAAIC,SACTpC,WAAWqC,KAAK,IAAIR,EAAKF,SAASQ,EAAQA,EAAS,KAAKG,QACxDC,UAAU,GAAG,GAGjB,GAAYC,EAAaC,GACvB,OAAOC,OAAOC,gBAAgBF,GAAOrE,MAAMoE,GAG7C,MAKE,IAAII,EAAY,GAChB,KAAOA,EAAU5D,QAAU,OAAO,CAEhC,MAAMyD,QAAepF,MAAMgC,EAAc,GACzC,GACe,KAAboD,EAAM,IACO,MAAbA,EAAM,IACO,MAAbA,EAAM,IACO,KAAbA,EAAM,MACO,IAAXA,EAAM,IACR,CACAxI,KAAK8F,GAAoB,EACzB9F,KAAK2D,GAAkB,EACvB3D,KAAKiF,EAAO2D,IAAmB,EAC/B5I,KAAKiF,EAAO4D,IAA0B,EACtC,MAEFF,EAAUpH,KAAKiH,EAAM,IAErBxI,KAAK8F,GAAoB,EACzB9F,KAAKiF,EAAO2D,IAAmB,EAC/B5I,KAAKiF,EAAO4D,IAA0B,EAKxC,GAFIF,EAAU5D,eAAe/E,KAAKmF,EAAYY,WAAWqC,KAAKO,KAE1DA,EAAU5D,OAAS,MAMrB,OALA/E,KAAKqE,EACH,sEACA,qFAEFrE,KAAKgF,EAAkB,QAChB,EAGT,MAAM8D,QAAqB9I,KAAKoF,EAAc,IAGxC2D,QAAyB/I,KAAKoF,EAAc0D,EAAY,KAM9D,OAJA9I,KAAK2D,EAAiBoF,EAAgB3B,QACpC,CAACC,EAAK2B,IAAU3B,EAAM2B,GACtB,IAEK,EAGT,MACE,MAAMpB,QAAc5H,KAAKoF,EAAc,GAIvC,aAFOpF,KAAK4D,IAER5D,KAAKiJ,GAAY,WAAYrB,EAAKF,SAAS,EAAG,IACzC,CAAEwB,MAAO,eAAgBnE,OAAQ,GAC/B/E,KAAKiJ,GAAY,WAAYrB,EAAKF,SAAS,EAAG,IAChD,CAAEwB,MAAO,WAAYnE,OAAQ,GAC3B/E,KAAKiJ,GAAY,aAAcrB,EAAKF,SAAS,EAAG,IAClD,CAAEwB,MAAO,aAAcnE,OAAQ,QADjC,EAKT,IAAc,MAAEmE,EAAK,OAAEnE,IACjB/E,KAAKiJ,GAAYC,QAAclJ,KAAKoF,EAAcL,YAC7C/E,KAAKwF,QAAqBxF,KAAKmJ,OAI1C,KACE,KAAOnJ,KAAK2D,SACH3D,KAAKoF,IAIhB,GAAeL,GACb,MAAM/B,QAAeI,MAAMgC,EAAcL,GAGzC,aADO/E,KAAKmF,EAAYnC,GACjBA,EAGT,KACE,MAAM4E,QAAcxE,MAAMyB,IAE1B,OADA7E,KAAKiF,EAAOC,4BAA8B0C,EAAK7C,OACxC6C,EAGT,MAaE,MAAMwB,EAAqBpJ,KAAKqJ,SAAkBrJ,KAAKoF,EAAc,IACrEpF,KAAKiF,EAAOM,iBAAiB,GAE7B,MAAM+D,EAAetJ,KAAKyF,EAASC,aAC1B1F,KAAKoF,EAAcgE,IAE5BpJ,KAAKiF,EAAOM,iBAAiB6D,GAE7B,MAAMG,EAAoBvJ,KAAKqJ,SAAkBrJ,KAAKoF,EAAc,IACpEpF,KAAKiF,EAAOM,iBAAiB,GAE7B,MAAMiE,EAAW,GACjB,IAAK,IAAIpI,EAAI,EAAGA,EAAImI,EAAmBnI,IAAK,CAC1C,MAAMqI,QAAuBzJ,KAAKoF,EAAc,GAChDpF,KAAKiF,EAAOM,iBAAiB,GAE7BiE,EAASjI,WAAYvB,KAAKoF,EAAcpF,KAAKqJ,GAAWI,KACxDzJ,KAAKiF,EAAOM,iBAAiBiE,EAASA,EAASzE,OAAS,GAAGA,QAK7D,OAFA/E,KAAKiF,EAAOK,8BAAgC,EAErCkE,EAASpC,QACd,CAAC1G,EAAUgJ,KACT,MAAMC,EAAYD,EAAQE,QAAQ,IAE5BC,EAAMpB,OAAOC,gBAAgBgB,EAAQhC,SAAS,EAAGiC,IAAYG,cAC7DC,EAAM/J,KAAKyF,EAASC,OAAOgE,EAAQhC,SAASiC,EAAY,IAG9D,OADAjJ,EAASmJ,GAAOnJ,EAASmJ,GAAO,GAAGnJ,EAASmJ,OAASE,IAAQA,EACtDrJ,IAET,CAAEsJ,cAAeV,O,MCxHvB5J,EAAOC,QAxDP,MACEC,cACEI,KAAK4I,GAAkB,EACvB5I,KAAKiK,GAAmB,EACxBjK,KAAKkK,GAA2B,EAChClK,KAAKmK,GAAqB,EAE1BnK,KAAK6I,GAAyB,EAC9B7I,KAAKoK,GAA+B,EACpCpK,KAAKqK,GAAiC,EAGxC,YACE,MAAO,CACLC,eAAgBtK,KAAK4I,GACrB2B,gBAAiBvK,KAAKiK,GACtBO,wBAAyBxK,KAAKkK,GAC9BO,kBAAmBzK,KAAKmK,GACxBO,sBAAuB1K,KAAK6I,GAC5B3D,4BAA6BlF,KAAKoK,GAClC9E,8BAA+BtF,KAAKqK,IAIxC,gCAAgC7B,GAC9BxI,KAAKoK,IAAgC5B,EAGvC,kCAAkCA,GAChCxI,KAAKqK,GAAiC7B,EAGxCb,SAASa,GACPxI,KAAK4I,IAAmBJ,EACxBxI,KAAK6I,IAA0BL,EAGjCjB,eAAeiB,GACbxI,KAAKiK,IAAoBzB,EACzBxI,KAAKoK,IAAgC5B,EAGvCnD,uBAAuBmD,GACrBxI,KAAKkK,IAA4B1B,EAGnCjD,iBAAiBiD,GACfxI,KAAKmK,IAAsB3B,EAC3BxI,KAAKqK,IAAkC7B,EAGzCX,yBAAyBW,GACvBxI,KAAK6I,IAA0BL,K,YCpE/BmC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAanL,QAGrB,IAAID,EAASiL,EAAyBE,GAAY,CAGjDlL,QAAS,IAOV,OAHAqL,EAAoBH,GAAUnL,EAAQA,EAAOC,QAASiL,GAG/ClL,EAAOC,QCpBfiL,EAAoBK,EAAKvL,IACxB,IAAIwL,EAASxL,GAAUA,EAAOyL,GAC7B,IAAOzL,EAAiB,QACxB,IAAM,EAEP,OADAkL,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRN,EAAoBQ,EAAI,CAACzL,EAAS2L,KACjC,IAAI,IAAIzB,KAAOyB,EACXV,EAAoBW,EAAED,EAAYzB,KAASe,EAAoBW,EAAE5L,EAASkK,IAC5E2B,OAAOC,eAAe9L,EAASkK,EAAK,CAAE6B,YAAY,EAAMC,IAAKL,EAAWzB,MCJ3Ee,EAAoBW,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,G,gFCmBlF,MAAMpM,EAAO,OAKE,MAAMwM,EAMnBrM,YAAYsM,GAAU,WAAE5J,EAAU,SAAEO,EAAWpD,KAASe,IACtD,IAAI2L,EAEJnM,KAAKoM,GAAkB,IAAIC,eAAe,CACxC,YAAYC,GACVH,EAAU,IAAI,IAAJ,CAA0B,IAC/B3L,EACH8B,WACEiK,SAASL,EAASM,QAAQb,IAAI,iBAAmBrJ,EACnDO,SAAU4J,MAAOzJ,IACfsJ,EAAWI,QAAQ1J,EAAMC,QAClBJ,EAASG,MAIpB,UAAW,MAAMT,KAAS0J,EAAsBvJ,cAC9CwJ,EAASS,YAEHR,EAAQxJ,aAAaJ,GAG7B+J,EAAWM,WAIf5M,KAAK6M,GAAWV,EAMlB,iBACE,OAAOnM,KAAK6M,GAASvK,WAMvB,qBACE,OAAOtC,KAAKoM,GAMd,qBACE,IACE,UAAW,MAAMhL,KAAK6K,EAAsBvJ,cAC1C1C,KAAKoM,MAGP,MAAOU,GACP,GAAe,eAAXA,EAAEC,KAAuB,MAAMD,GASvC,qBAAqBE,GACnB,MAAMC,EAASD,EAAeE,YAC9B,MAAO,CACL,CAACC,OAAOzK,eAAgB,KAAM,CAC5Be,KAAM,IAAMwJ,EAAOG,WCzE3B,MAAM,EAAO,OAEPC,EAAU,UAEVC,EAAW,WAEXC,EAAI,IAAIC,QAGRC,EAAgBN,SAChBO,EAAiBP,SAEjBQ,EAAgBR,SAChBS,EAAiBT,SAEjBU,EAAmBV,SACnBW,EAAqBX,SACrBY,EAAsBZ,SAEtBa,EAAgBb,SAChBc,EAAkBd,SAClBe,EAAmBf,SAEnBgB,EAAoBhB,SACpBiB,EAAsBjB,SACtBkB,EAAuBlB,SAEvBmB,EAAoBnB,SACpBoB,EAAsBpB,SACtBqB,EAAuBrB,SAEvBsB,EAAiBtB,SACjB7K,EAAa6K,SACbhK,EAAsBgK,SACtBuB,EAAUvB,SACVwB,EAAWxB,SACXyB,EAAUzB,SACV0B,EAAe1B,SAEf2B,EAAQ3B,SACR4B,EAAa5B,SAGb6B,EAAa7B,SACb8B,EAAoB9B,SAEX,MAAM+B,EAiBnBtP,YAAYuP,EAAUC,EAAU,IAC9B,MAAMC,EAAaF,EAASG,MAAM,KAAKC,MAAM,GAAI,GAAGC,KAAK,KAGzDjC,EAAEvG,IAAIhH,KAAM,CACV,CAACyO,GAAiBU,EAClB,CAACtB,GAAmBuB,EAAQvB,kBAAoB,GAAGwB,oBACnD,CAACrB,GAAiBoB,EAAQpB,eAAiB,GAAGqB,UAC9C,CAAClB,GAAqBiB,EAAQjB,mBAAqB,GAAGkB,cACtD,CAACf,GAAqBc,EAAQd,mBAAqB,GAAGe,WACtD,CAACX,GAAUU,EAAQV,SAAW,GAC9B,CAACC,GAAsC,KAA1BS,EAAQT,UAAY,IACjC,CAACC,GAAUQ,EAAQR,SAAW,EAC9B,CAACC,GAAeO,EAAQP,cAAgB,EACxC,CAACvM,GAAa8M,EAAQ9M,WACtB,CAACa,GAAsBiM,EAAQjM,oBAC/B,CAACsK,GAAgB,IAAIgC,gBACrB,CAAC9B,GAAgB,IAAI8B,gBACrB,CAAC3B,GAAqB,IAAI2B,gBAC1B,CAACxB,GAAkB,IAAIwB,gBACvB,CAACrB,GAAsB,IAAIqB,gBAC3B,CAAClB,GAAsB,IAAIkB,gBAC3B,CAACX,GAAQzB,IAIb,gBAAgBqC,GACd,MAGMC,EAAaC,IACjB,IAAKA,EAAQC,SAAS9K,OACpB,OAAO+K,OAAOC,MAAMD,OAAOF,EAAQI,YAC/BJ,EAAQI,UACRF,OAAOF,EAAQI,WAGrB,MAAMC,EAAO,GAEb,IAAK,MAAMC,KAASN,EAAQC,SACtBK,EAAMC,YAAYF,EAChBG,MAAMC,QAAQJ,EAAKC,EAAMC,WAC3BF,EAAKC,EAAMC,UAAU5O,KAAKoO,EAAUO,IAEpCD,EAAKC,EAAMC,UAAY,CAACF,EAAKC,EAAMC,UAAWR,EAAUO,IAG1DD,EAAKC,EAAMC,UAAYR,EAAUO,GAIrC,OAAOD,GAGT,OAAON,EA3Ba,CAACD,IACnB,IAAIY,WAAYC,gBAAgBb,EAAK,mBA0BtBc,CAAYd,IAM/B,YACE,OAAOnC,EAAE5B,IAAI3L,MAAM8O,GAMrB,uBACE,OAAOvB,EAAE5B,IAAI3L,MAAM6N,GAMrB,oBACE,OAAON,EAAE5B,IAAI3L,MAAMgO,GAMrB,wBACE,OAAOT,EAAE5B,IAAI3L,MAAMmO,GAMrB,wBACE,OAAOZ,EAAE5B,IAAI3L,MAAMsO,GAMrBmC,QACMlD,EAAE5B,IAAI3L,MAAM8O,KAAWzB,IACzBE,EAAE5B,IAAI3L,MAAM8O,GA7JF,UA+JV9O,KAAK0Q,QAAQC,KAAKpD,EAAE5B,IAAI3L,MAAM4O,IAE9BrB,EAAE5B,IAAI3L,MAAM+O,GAAc6B,aAAY,KACpC5Q,KAAK0Q,QAAQC,KAAKpD,EAAE5B,IAAI3L,MAAM4O,MAC7BrB,EAAE5B,IAAI3L,MAAM2O,KAOnBkC,OACMtD,EAAE5B,IAAI3L,MAAM8O,KAAWzB,IACzBE,EAAE5B,IAAI3L,MAAM8O,GAASzB,EAErByD,cAAcvD,EAAE5B,IAAI3L,MAAM+O,IAC1BxB,EAAE5B,IAAI3L,MAAMyN,GAAesD,QAC3BxD,EAAE5B,IAAI3L,MAAM2N,GAAeoD,QAC3BxD,EAAE5B,IAAI3L,MAAM8N,GAAoBiD,QAChCxD,EAAE5B,IAAI3L,MAAMiO,GAAiB8C,QAC7BxD,EAAE5B,IAAI3L,MAAMuO,GAAqBwC,SASrC,cACE,GAAIxD,EAAE5B,IAAI3L,MAAM8O,KAAWxB,EAAU,CACnC,MAAM0D,EAAWzD,EAAE5B,IAAI3L,MAAM8O,GAE7BvB,EAAE5B,IAAI3L,MAAM8O,GAASxB,EACrBC,EAAE5B,IAAI3L,MAAM6O,GAActB,EAAE5B,IAAI3L,MAAM0O,IAEtC,MAAMuC,EAAW,GACb1D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,aAChCgP,EAAS1P,KAAKvB,KAAKkR,eACjB3D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,cAChCgP,EAAS1P,KAAKvB,KAAKmR,gBACjB5D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,UAChCgP,EAAS1P,KAAKvB,KAAKoR,YACjB7D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,cAChCgP,EAAS1P,KAAKvB,KAAKqR,gBACjB9D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,QAChCgP,EAAS1P,KAAKvB,KAAKsR,kBACjB/D,EAAE5B,IAAI3L,MAAM0O,GAASzM,SAAS,QAChCgP,EAAS1P,KAAKvB,KAAKuR,kBAErB,MAAM5Q,QAAc8F,QAAQ+K,IAAIP,GAAUN,MAAMhQ,GAC9CA,EAAMyG,QAAO,CAACC,EAAKoK,KAAS,IAAMpK,KAAQoK,KAAS,MAMrD,OAHAlE,EAAE5B,IAAI3L,MAAM8O,GACVvB,EAAE5B,IAAI3L,MAAM8O,KAAWxB,EAAWC,EAAE5B,IAAI3L,MAAM8O,GAASkC,EAElDrQ,GASX,oBACE,OAAOX,KAAKgP,GAAY,CACtB0C,OAAQ3D,EACRoB,SAAUtB,EACVvB,WAAYwB,EACZ6D,OAASC,GAAQA,EAAI3B,SACpBU,MAAMhQ,IAAU,CAAGkR,SAAUlR,GAASA,EAAMkR,aAmBjD,qBACE,OAAO7R,KAAKgP,GAAY,CACtB0C,OAAQlD,EACRW,SAAUb,EACVhC,WAAYiC,EACZoD,OAAQlF,MAAOmF,UACNA,EAAIE,QAAQ3N,MAAM,mBAAmB7D,KAAKyR,IAC/C,MAAMpR,EAAQoR,EACX5N,MAAM,mCACN6N,OAAOrR,MAAM2O,MAAM,KAEtB,OAAwB,IAAjB3O,EAAMoE,OACT,CACEkN,YAAatR,EAAM,GACnBuR,iBAAkB3F,SAAS5L,EAAM,IACjCwR,cAAe5F,SAAS5L,EAAM,IAC9ByR,aAAc7F,SAAS5L,EAAM,IAC7B0R,QAAS9F,SAAS5L,EAAM,IACxB+Q,OAAQnF,SAAS5L,EAAM,IACvB2R,gBAAiB/F,SAAS5L,EAAM,KAElC,CACEsR,YAAatR,EAAM,GACnBuR,iBAAkB3F,SAAS5L,EAAM,IACjCwR,cAAe5F,SAAS5L,EAAM,IAC9ByR,aAAc7F,SAAS5L,EAAM,IAC7B0R,QAAS9F,SAAS5L,EAAM,UAGjCgQ,MAAM4B,IAAc,CACrBA,gBAUJ,iBACE,OAAOvS,KAAKgP,GAAY,CACtB0C,OAAQxD,EACRiB,SAAUnB,EACV1B,WAAY2B,EACZ0D,OAAQlF,MAAOmF,GACb1C,EAAqBsD,eAAeZ,EAAIE,QAAQW,gBAC7CC,cACJ/B,MAAMhQ,IAAU,CACjBA,YAUJ,qBACE,OAAOX,KAAKgP,GAAY,CACtB0C,OAAQrD,EACRc,SAAUhB,EACV7B,WAAY8B,EACZuD,OAAQlF,MAAOmF,GACb1C,EAAqBsD,eAAeZ,EAAIE,QAAQW,gBAC7CE,YACJhC,MAAMiC,IAAc,CACrBA,gBASJ,uBACE,OAAO5S,KAAKiP,GAAmB,CAC7ByC,OAAQhE,EACRyB,SAAUV,EACVnC,WAAYmB,EACZoF,aAAc,MACdrG,QAAS,CAAE,eAAgB,KAS/B,uBACE,OAAOxM,KAAKiP,GAAmB,CAC7ByC,OAAQ9D,EACRuB,SAAUV,EACVnC,WAAYqB,EACZkF,aAAc,QAIlB,MAAO5D,IAAmB,OACxByC,EAAM,SACNvC,EAAQ,WACR7C,EAAU,QACVE,EAAO,aACPqG,IAEA,OAAO7S,KAAKgP,GAAY,CACtB0C,SACAvC,WACA7C,aACAE,UACAmF,OAAQlF,MAAOmF,GACb,IAAInL,SAASC,IACX,IAAIuF,EAAsB2F,EAAK,CAC7B1L,WAAY,EAAGxF,eACb6M,EAAE5B,IAAI3L,MAAMsM,GAAYyE,QACxBrK,EAAQhG,IAEVyF,iBAAkB,KAChBoH,EAAE5B,IAAI3L,MAAMsM,GAAYyE,QACxBrK,KAEF3E,cAAe8Q,EACfvQ,WAAYiL,EAAE5B,IAAI3L,MAAMsC,GACxBa,oBAAqBoK,EAAE5B,IAAI3L,MAAMmD,KAChC2P,oBAENnC,MAAMjQ,IAAa,CAAG,CAACmS,GAAenS,MAG3C,MAAOsO,IAAY,OAAE0C,EAAM,SAAEvC,EAAQ,WAAE7C,EAAU,OAAEqF,EAAM,QAAEnF,EAAU,KACnE,IAAKe,EAAE5B,IAAI3L,MAAM0R,GAEf,OADAnE,EAAE5B,IAAI3L,MAAM0R,IAAU,EACfhB,MAAMnD,EAAE5B,IAAI3L,MAAMmP,GAAW,CAClC4D,OAAQ,MACRvG,UACAwG,OAAQzF,EAAE5B,IAAI3L,MAAMsM,GAAY0G,SAE/BrC,MAAMiB,IACL,IAAKA,EAAIqB,GAAI,MAAM,IAAIC,MAAM,cAActB,EAAIF,UAC/C,OAAOE,KAERjB,KAAKgB,GACLwB,OAAOrG,IACS,eAAXA,EAAEC,MACJ7F,QAAQC,KAAK,mBAAmBoG,EAAE5B,IAAI3L,MAAMmP,KAAarC,MAG5DsG,SAAQ,KACP7F,EAAE5B,IAAI3L,MAAM0R,IAAU,EACtBnE,EAAE5B,IAAI3L,MAAMsM,GAAc,IAAImD,sB","file":"icecast-metadata-stats-0.0.2.min.js","sourcesContent":["/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst noOp = () => {};\n\nclass IcecastMetadataQueue {\n  /**\n   * @description Schedules updates up to the millisecond for Icecast Metadata from the response body of an Icecast stream mountpoint\n   * @description The accuracy of metadata updates is a direct relationship of the icyMetaInt\n   * @param {Object} IcecastMetadataQueue constructor parameter\n   * @param {number} [IcecastMetadataQueue.icyBr] Bitrate of audio stream used to increase accuracy when to updating metadata\n   * @param {onMetadataUpdate} [IcecastMetadataQueue.onMetadataUpdate] Callback executed when metadata is scheduled to update\n   * @param {onMetadataEnqueue} [IcecastMetadataQueue.onMetadataEnqueue] Callback executed when metadata is enqueued\n   *\n   * @callback onMetadataUpdate\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} timestampOffset Total time buffered when the metadata was added\n   * @param {number} timestamp Current time of the audio player when the metadata was added\n   *\n   * @callback onMetadataEnqueue\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} timestampOffset Total time buffered when the metadata was added\n   * @param {number} timestamp Current time of the audio player when the metadata was added\n   *\n   */\n  constructor({ icyBr, onMetadataUpdate = noOp, onMetadataEnqueue = noOp }) {\n    this._icyBr = icyBr;\n    this._onMetadataUpdate = onMetadataUpdate;\n    this._onMetadataEnqueue = onMetadataEnqueue;\n    this._isInitialMetadata = true;\n    this._metadataQueue = [];\n  }\n\n  /**\n   * @description Returns the metadata queued for updates\n   * @type {{metadata: string, time: number}[]} Queued metadata\n   */\n  get metadataQueue() {\n    return this._metadataQueue.map(({ _timeoutId, ...rest }) => rest);\n  }\n\n  /**\n   *\n   * @param {object} metadata Metadata object returned from IcecastMetadataReader\n   * @param {number} timestampOffset Total buffered audio in seconds\n   * @param {number} [timestamp] Current time in the audio player\n   */\n  addMetadata({ metadata, stats }, timestampOffset, timestamp = 0) {\n    /**\n     * Metadata time is derived from the total number of stream bytes read\n     * since the latest buffer input. The buffer offset should be the total\n     * seconds of audio in the player buffer when the metadata was read.\n     */\n    this._enqueueMetadata(\n      metadata,\n      timestampOffset,\n      timestamp + this.getTimeByBytes(stats.currentStreamPosition)\n    );\n  }\n\n  /**\n   * @description Calculates audio stream length based on bitrate\n   * @param {number} bytesRead Number of bytes\n   * @type {number} Seconds\n   */\n  getTimeByBytes(bytesRead) {\n    return this._icyBr ? bytesRead / (this._icyBr * 125) : 0;\n  }\n\n  /**\n   * @description Clears all metadata updates and empties the queue\n   */\n  purgeMetadataQueue() {\n    this._metadataQueue.forEach((i) => clearTimeout(i._timeoutId));\n    this._metadataQueue = [];\n  }\n\n  _enqueueMetadata(metadata, timestampOffset, timestamp) {\n    const metadataPayload = {\n      metadata,\n      timestampOffset,\n      timestamp,\n    };\n\n    this._metadataQueue.push(metadataPayload);\n    this._onMetadataEnqueue(metadata, timestampOffset, timestamp);\n\n    if (this._isInitialMetadata) {\n      this._dequeueMetadata();\n      this._isInitialMetadata = false;\n    } else {\n      metadataPayload._timeoutId = setTimeout(() => {\n        this._dequeueMetadata();\n      }, (timestampOffset - timestamp) * 1000); // trigger timeout relative to play position\n    }\n  }\n\n  _dequeueMetadata() {\n    const {\n      metadata,\n      timestampOffset,\n      timestamp,\n    } = this._metadataQueue.shift();\n    this._onMetadataUpdate(metadata, timestampOffset, timestamp);\n  }\n}\n\nmodule.exports = IcecastMetadataQueue;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst MetadataParser = require(\"./MetadataParser/MetadataParser\");\nconst IcyMetadataParser = require(\"./MetadataParser/IcyMetadataParser\");\nconst OggMetadataParser = require(\"./MetadataParser/OggMetadataParser\");\nconst DualMetadataParser = require(\"./MetadataParser/DualMetadataParser\");\n\nclass IcecastMetadataReader {\n  /**\n   * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n   * @param {number} IcecastMetadataReader.icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n   * @param {number} IcecastMetadataReader.icyDetectionTimeout Duration in milliseconds to search for metadata if icyMetaInt isn't passed in\n   * @param {Array} IcecastMetadataReader.metadataTypes Types of metadata to capture: \"icy\" and/or \"ogg\"\n   *\n   * @callback onMetadata\n   * @param {object} value Object containing Metadata and Statistics\n   * @param {object} metadata Object containing the metadata received.\n   * @param {string} [metadata.StreamTitle] (ICY) Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] (ICY) Url (usually album art) of the metadata update.\n   * @param {string} [metadata.TITLE] (OGG) Url Title of the metadata update.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onStream\n   * @param {object} value Object containing Stream data and Statistics\n   * @param {Uint8Array} stream Object containing the stream buffer.\n   * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n   *\n   * @callback onMetadataFailed Called when metadata detection has failed and no metadata will be returned\n   * @param {string} metadataType Metadata type that failed (\"icy\" or \"ogg\")\n   *\n   * @callback onError Called when an error is encountered\n   * @param {string} message Error message\n   */\n  constructor({ metadataTypes = [\"icy\"], ...rest } = {}) {\n    const hasIcy = metadataTypes.includes(\"icy\");\n    const hasOgg = metadataTypes.includes(\"ogg\");\n\n    if (hasIcy && hasOgg) this._metadataParser = new DualMetadataParser(rest);\n    else if (hasOgg) this._metadataParser = new OggMetadataParser(rest);\n    else if (hasIcy) this._metadataParser = new IcyMetadataParser(rest);\n    else this._metadataParser = new MetadataParser(rest);\n  }\n\n  /**\n   * @description Parses an ICY metadata string into key value pairs.\n   * @param {string} metadataString ICY formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseIcyMetadata(string) {\n    return IcyMetadataParser.parseIcyMetadata(string);\n  }\n\n  /**\n   * @description Gets the ICY metadata interval for this instance.\n   * @returns {number} ICY metadata interval in bytes.\n   */\n  get icyMetaInt() {\n    return this._metadataParser.icyMetaInt;\n  }\n\n  /**\n   * @description Returns an iterator that yields stream or metadata.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {Iterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    yield* this._metadataParser.iterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    this._metadataParser.readAll(chunk);\n  }\n\n  /**\n   * @description Returns an async iterator that yields stream or metadata and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    return yield* this._metadataParser.asyncIterator(chunk);\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    return this._metadataParser.asyncReadAll(chunk);\n  }\n}\n\nmodule.exports = IcecastMetadataReader;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst IcyMetadataParser = require(\"./IcyMetadataParser\");\nconst OggMetadataParser = require(\"./OggMetadataParser\");\n\n/**\n * @description Parses ICY and OGG metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nclass DualMetadataParser {\n  constructor(params) {\n    const { onStream, ...rest } = params;\n    this._oggMetadataParser = new OggMetadataParser(params);\n    this._icyMetadataParser = new IcyMetadataParser(rest);\n  }\n\n  get icyMetaInt() {\n    return this._icyMetadataParser.icyMetaInt;\n  }\n\n  *iterator(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        yield* this._oggMetadataParser.iterator(value.stream);\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  readAll(chunk) {\n    for (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        this._oggMetadataParser.readAll(value.stream);\n      }\n    }\n  }\n\n  async *asyncIterator(chunk) {\n    for await (const value of this._icyMetadataParser.asyncIterator(chunk)) {\n      if (value.stream) {\n        for await (const oggValue of this._oggMetadataParser.asyncIterator(\n          value.stream\n        )) {\n          yield oggValue;\n        }\n      } else {\n        yield value;\n      }\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for await (const value of this._icyMetadataParser.iterator(chunk)) {\n      if (value.stream) {\n        await this._oggMetadataParser.asyncReadAll(value.stream);\n      }\n    }\n  }\n}\n\nmodule.exports = DualMetadataParser;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst MetadataParser = require(\"./MetadataParser\");\n\n/**\n * @description Parses ICY metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\n\nclass IcyMetadataParser extends MetadataParser {\n  constructor({ icyMetaInt, icyDetectionTimeout = 2000, ...rest }) {\n    super(rest);\n\n    this._icyMetaInt = icyMetaInt;\n    this._icyDetectionTimeout = icyDetectionTimeout;\n\n    this._generator = this._icyParser();\n    this._generator.next();\n  }\n\n  *_icyParser() {\n    if (yield* this._hasIcyMetadata()) {\n      do {\n        this._remainingData = this._icyMetaInt;\n        yield* this._getStream();\n        yield* this._getMetadataLength();\n        if (this._remainingData) yield* this._getMetadata();\n      } while (true);\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  static parseIcyMetadata(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadataRegex = /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/;\n    const metadata = {};\n\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (const metadataElement of metadataString.match(\n      new RegExp(metadataRegex, \"g\")\n    ) || []) {\n      const match = metadataElement.match(metadataRegex);\n      if (match) metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  get icyMetaInt() {\n    return this._icyMetaInt;\n  }\n\n  *_hasIcyMetadata() {\n    if (this._icyMetaInt > 0) return true;\n    if (!this._icyDetectionTimeout) return false;\n\n    this._logError(\n      \"Passed in Icy-MetaInt is invalid. Attempting to detect ICY Metadata.\",\n      \"See https://github.com/eshaz/icecast-metadata-js for information on how to properly request ICY Metadata.\"\n    );\n\n    // prettier-ignore\n    const METADATA_SEARCH = [null,83,116,114,101,97,109,84,105,116,108,101,61]; // StreamTitle=\n    const startTime = Date.now();\n    let metaInt = 0;\n\n    while (startTime + this._icyDetectionTimeout > Date.now()) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData()\n      );\n\n      // search for metadata\n      detectMetadata: while (\n        metaInt <\n        this._buffer.length - METADATA_SEARCH.length\n      ) {\n        for (let i = 1; i < METADATA_SEARCH.length; i++) {\n          if (this._buffer[i + metaInt] !== METADATA_SEARCH[i]) {\n            metaInt++;\n            continue detectMetadata;\n          }\n        }\n\n        // found metadata\n        // prettier-ignore\n        this._logError(`Found ICY Metadata! Setting Icy-MetaInt to ${metaInt}.`);\n        this._icyMetaInt = metaInt;\n\n        return true;\n      }\n    }\n\n    // prettier-ignore\n    this._logError(\n      \"ICY Metadata not detected, but continuing anyway. Audio errors will occur if there is ICY metadata.\",\n      `Searched ${this._buffer.length} bytes for ${(Date.now() - startTime) / 1000} seconds.`,\n      \"Try increasing the `icyDetectionTimeout` value if ICY metadata is present in the stream.\"\n    );\n    this._onMetadataFailed(\"icy\");\n\n    return false;\n  }\n\n  *_getStream() {\n    this._stats.currentStreamBytesRemaining = this._remainingData;\n\n    while (this._remainingData) {\n      yield* this._sendStream(yield* super._getNextValue());\n    }\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes(1);\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    const metadata = yield* this._getNextValue(this._remainingData);\n    this._stats.addMetadataBytes(metadata.length);\n\n    yield* this._sendMetadata(\n      IcyMetadataParser.parseIcyMetadata(this._decoder.decode(metadata))\n    );\n  }\n}\n\nmodule.exports = IcyMetadataParser;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst Decoder = require(\"util\").TextDecoder || TextDecoder;\nconst Stats = require(\"./Stats\");\n\nconst noOp = () => {};\n\n/**\n * @description Passthrough parser\n * @protected\n * @see IcecastMetadataReader\n */\n\nclass MetadataParser {\n  constructor(params) {\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = new Uint8Array(0);\n    this._stats = new Stats();\n    this._decoder = new Decoder(\"utf-8\");\n\n    this._onStream = params.onStream || noOp;\n    this._onMetadata = params.onMetadata || noOp;\n    this._onMetadataFailed = params.onMetadataFailed || noOp;\n    this._onError = params.onError || noOp;\n    this._enableLogging = params.enableLogging || false;\n\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n    this._generator = this._passThroughParser();\n    this._generator.next();\n  }\n\n  *_passThroughParser() {\n    this._remainingData = Infinity;\n    while (true) {\n      yield* this._sendStream(yield* this._getNextValue());\n    }\n  }\n\n  static _concatBuffers(buf1, buf2) {\n    const result = new Uint8Array(buf1.length + buf2.length);\n    result.set(buf1);\n    result.set(buf2, buf1.length);\n    return result;\n  }\n\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  _logError(...messages) {\n    if (this._enableLogging) {\n      console.warn(\n        \"icecast-metadata-js\",\n        messages.reduce((acc, message) => acc + \"\\n  \" + message, \"\")\n      );\n    }\n    this._onError(...messages);\n  }\n\n  *_sendStream(stream) {\n    this._stats.addStreamBytes(stream.length);\n\n    const streamPayload = { stream, stats: this._stats.stats };\n\n    this._onStreamPromise = this._onStream(streamPayload);\n    yield streamPayload;\n  }\n\n  *_sendMetadata(metadata) {\n    const metadataPayload = {\n      metadata,\n      stats: this._stats.stats,\n    };\n\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n    yield metadataPayload;\n  }\n\n  *_getNextValue(minLength = 0) {\n    if (this._currentPosition === this._buffer.length) {\n      this._buffer = yield* this._readData();\n      this._currentPosition = 0;\n    }\n\n    while (this._buffer.length - this._currentPosition < minLength) {\n      this._buffer = MetadataParser._concatBuffers(\n        this._buffer,\n        yield* this._readData()\n      );\n    }\n\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      (minLength || this._remainingData) + this._currentPosition\n    );\n\n    this._stats.addBytes(value.length);\n    this._remainingData =\n      value.length < this._remainingData\n        ? this._remainingData - value.length\n        : 0;\n\n    this._currentPosition += value.length;\n\n    return value;\n  }\n\n  *_readData() {\n    let data;\n\n    do {\n      data = yield; // if out of data, accept new data in the .next() call\n    } while (!data || data.length === 0);\n\n    this._stats.addCurrentBytesRemaining(data.length);\n    return data;\n  }\n}\n\nmodule.exports = MetadataParser;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nconst MetadataParser = require(\"./MetadataParser\");\n\n/**\n * @description Parses OGG metadata from an Icecast stream\n * @protected\n * @see IcecastMetadataReader\n */\nclass OggMetadataParser extends MetadataParser {\n  constructor(params) {\n    super(params);\n\n    this._generator = this._oggParser();\n    this._generator.next();\n  }\n\n  *_oggParser() {\n    if (yield* this._hasOggPage()) {\n      const codecMatcher = yield* this._identifyCodec();\n      if (codecMatcher) {\n        while (yield* this._hasOggPage()) {\n          yield* this._getMetadata(codecMatcher);\n          yield* this._getStream();\n        }\n      }\n    }\n\n    this._remainingData = Infinity;\n    yield* this._getStream();\n  }\n\n  _getUint32(data, offset = 0) {\n    return new DataView(\n      Uint8Array.from([...data.subarray(offset, offset + 4)]).buffer\n    ).getUint32(0, true);\n  }\n\n  _matchBytes(matchString, bytes) {\n    return String.fromCharCode(...bytes).match(matchString);\n  }\n\n  *_hasOggPage() {\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    // Byte (6 of 28)\n    // * `00000...`: All zeros\n    let syncBytes = [];\n    while (syncBytes.length <= 65307) {\n      // max ogg page size\n      const bytes = yield* super._getNextValue(5); // Sync with OGG page without sending stream data\n      if (\n        bytes[0] === 0x4f &&\n        bytes[1] === 0x67 &&\n        bytes[2] === 0x67 &&\n        bytes[3] === 0x53 &&\n        !(bytes[5] & 0b11111000)\n      ) {\n        this._currentPosition -= 5;\n        this._remainingData += 5;\n        this._stats._totalBytesRead -= 5;\n        this._stats._currentBytesRemaining += 5;\n        break;\n      }\n      syncBytes.push(bytes[0]);\n\n      this._currentPosition -= 4;\n      this._stats._totalBytesRead -= 4;\n      this._stats._currentBytesRemaining += 4;\n    }\n\n    if (syncBytes.length) yield* this._sendStream(Uint8Array.from(syncBytes));\n\n    if (syncBytes.length > 65307) {\n      this._logError(\n        \"This stream is not an OGG stream. No OGG metadata will be returned.\",\n        \"See https://github.com/eshaz/icecast-metadata-js for information on OGG metadata.\"\n      );\n      this._onMetadataFailed(\"ogg\");\n      return false;\n    }\n\n    const baseOggPage = yield* this._getNextValue(27);\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    const oggPageSegments = yield* this._getNextValue(baseOggPage[26]);\n\n    this._remainingData = oggPageSegments.reduce(\n      (acc, octet) => acc + octet,\n      0\n    );\n    return true;\n  }\n\n  *_identifyCodec() {\n    const data = yield* this._getNextValue(8);\n\n    yield* this._getStream();\n\n    if (this._matchBytes(/\\x7fFLAC/, data.subarray(0, 5))) {\n      return { regex: /^[\\x84|\\x04]/, length: 4 };\n    } else if (this._matchBytes(/OpusHead/, data.subarray(0, 8))) {\n      return { regex: /OpusTags/, length: 8 };\n    } else if (this._matchBytes(/\\x01vorbis/, data.subarray(0, 7))) {\n      return { regex: /\\x03vorbis/, length: 7 };\n    }\n  }\n\n  *_getMetadata({ regex, length }) {\n    if (this._matchBytes(regex, yield* this._getNextValue(length))) {\n      yield* this._sendMetadata(yield* this._readVorbisComment());\n    }\n  }\n\n  *_getStream() {\n    while (this._remainingData) {\n      yield* this._getNextValue();\n    }\n  }\n\n  *_getNextValue(length) {\n    const value = yield* super._getNextValue(length);\n\n    yield* this._sendStream(value);\n    return value;\n  }\n\n  *_readData() {\n    const data = yield* super._readData();\n    this._stats.currentStreamBytesRemaining = data.length;\n    return data;\n  }\n\n  *_readVorbisComment() {\n    /*\n    1) [vendor_length] = read an unsigned integer of 32 bits\n    2) [vendor_string] = read a UTF-8 vector as [vendor_length] octets\n    3) [user_comment_list_length] = read an unsigned integer of 32 bits\n    4) iterate [user_comment_list_length] times {\n       5) [length] = read an unsigned integer of 32 bits\n       6) this iteration's user comment = read a UTF-8 vector as [length] octets\n    }\n    7) [framing_bit] = read a single bit as boolean\n    8) if ( [framing_bit] unset or end of packet ) then ERROR\n    9) done.\n    */\n    const vendorStringLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const vendorString = this._decoder.decode(\n      yield* this._getNextValue(vendorStringLength)\n    );\n    this._stats.addMetadataBytes(vendorStringLength);\n\n    const commentListLength = this._getUint32(yield* this._getNextValue(4));\n    this._stats.addMetadataBytes(4);\n\n    const comments = [];\n    for (let i = 0; i < commentListLength; i++) {\n      const commentLength = yield* this._getNextValue(4);\n      this._stats.addMetadataBytes(4);\n\n      comments.push(yield* this._getNextValue(this._getUint32(commentLength)));\n      this._stats.addMetadataBytes(comments[comments.length - 1].length);\n    }\n\n    this._stats.currentMetadataBytesRemaining = 0;\n\n    return comments.reduce(\n      (metadata, comment) => {\n        const delimiter = comment.indexOf(0x3d);\n        // prettier-ignore\n        const key = String.fromCharCode(...comment.subarray(0, delimiter)).toUpperCase();\n        const val = this._decoder.decode(comment.subarray(delimiter + 1));\n\n        metadata[key] = metadata[key] ? `${metadata[key]}; ${val}` : val;\n        return metadata;\n      },\n      { VENDOR_STRING: vendorString }\n    );\n  }\n}\n\nmodule.exports = OggMetadataParser;\n","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nclass Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining += bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n\n  addBytes(bytes) {\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n  }\n\n  addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n  }\n\n  addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n  }\n\n  addCurrentBytesRemaining(bytes) {\n    this._currentBytesRemaining += bytes;\n  }\n}\n\nmodule.exports = Stats;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* Copyright 2020 Ethan Halsall\n    This file is part of icecast-metadata-js.\n\n    icecast-metadata-js free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    icecast-metadata-js distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n */\nexport default class IcecastReadableStream {\n  /**\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { icyMetaInt, onStream = noOp, ...rest }) {\n    let icecast;\n\n    this._readableStream = new ReadableStream({\n      async start(controller) {\n        icecast = new IcecastMetadataReader({\n          ...rest,\n          icyMetaInt:\n            parseInt(response.headers.get(\"Icy-MetaInt\")) || icyMetaInt,\n          onStream: async (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of IcecastReadableStream.asyncIterator(\n          response.body\n        )) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n\n    this._icecast = icecast;\n  }\n\n  /**\n   * @returns Icecast Metadata Interval if it is present on this stream\n   */\n  get icyMetaInt() {\n    return this._icecast.icyMetaInt;\n  }\n\n  /**\n   * @returns The ReadableStream instance\n   */\n  get readableStream() {\n    return this._readableStream;\n  }\n\n  /**\n   * @description Starts reading from the response and processing stream and metadata.\n   */\n  async startReading() {\n    try {\n      for await (const i of IcecastReadableStream.asyncIterator(\n        this._readableStream\n      )) {\n      }\n    } catch (e) {\n      if (e.name !== \"AbortError\") throw e;\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/**\n * @license\n * @see https://github.com/eshaz/icecast-metadata-js\n * @copyright 2021 Ethan Halsall\n *  This file is part of icecast-metadata-stats.\n *\n *  icecast-metadata-stats free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Lesser General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  icecast-metadata-stats distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public License\n *  along with this program.  If not, see <https://www.gnu.org/licenses/>\n */\n\nimport { IcecastReadableStream } from \"icecast-metadata-js\";\n\nconst noOp = () => {};\n\nconst STOPPED = \"stopped\";\nconst RUNNING = \"running\";\nconst FETCHING = \"fetching\";\n\nconst p = new WeakMap();\n\n// variables\nconst icyController = Symbol();\nconst icyFetchStatus = Symbol();\n\nconst oggController = Symbol();\nconst oggFetchStatus = Symbol();\n\nconst icestatsEndpoint = Symbol();\nconst icestatsController = Symbol();\nconst icestatsFetchStatus = Symbol();\n\nconst statsEndpoint = Symbol();\nconst statsController = Symbol();\nconst statsFetchStatus = Symbol();\n\nconst nextsongsEndpoint = Symbol();\nconst nextsongsController = Symbol();\nconst nextsongsFetchStatus = Symbol();\n\nconst sevenhtmlEndpoint = Symbol();\nconst sevenhtmlController = Symbol();\nconst sevenhtmlFetchStatus = Symbol();\n\nconst streamEndpoint = Symbol();\nconst icyMetaInt = Symbol();\nconst icyDetectionTimeout = Symbol();\nconst sources = Symbol();\nconst interval = Symbol();\nconst onStats = Symbol();\nconst onStatsFetch = Symbol();\n\nconst state = Symbol();\nconst intervalId = Symbol();\n\n// methods\nconst fetchStats = Symbol();\nconst getStreamMetadata = Symbol();\n\nexport default class IcecastMetadataStats {\n  /**\n   * @constructor\n   * @param {URL} endpoint Stream endpoint\n   * @param {object} [options] Options object\n   *\n   * @callback [options.onStats] Called when the automatic query completes\n   * @callback [options.onStatsFetch] Called when the automatic query begins\n   * @param {Array} [options.sources] List of sources to automatically query [\"icy\", \"ogg\", \"icestats\", \"stats\", \"sevenhtml\", \"nextsongs\"]\n   * @param {number} [options.interval] Time in seconds to wait between automatically queries\n   * @param {URL} [options.icestatsEndpoint] Endpoint for the `status-json.xsl` source\n   * @param {URL} [options.statsEndpoint] Endpoint for the `stats` source\n   * @param {URL} [options.nextsongsEndpoint] Endpoint for the `nextsongs` source\n   * @param {URL} [options.sevenhtmlEndpoint] Endpoint for the `7.html` source\n   * @param {number} [options.icyMetaInt] Manually sets the ICY metadata interval\n   * @param {number} [options.icyDetectionTimeout] Time in milliseconds to search for ICY metadata\n   */\n  constructor(endpoint, options = {}) {\n    const serverPath = endpoint.split(\"/\").slice(0, -1).join(\"/\");\n\n    // prettier-ignore\n    p.set(this, {\n      [streamEndpoint]: endpoint,\n      [icestatsEndpoint]: options.icestatsEndpoint || `${serverPath}/status-json.xsl`,\n      [statsEndpoint] : options.statsEndpoint || `${serverPath}/stats`,\n      [nextsongsEndpoint] : options.nextsongsEndpoint || `${serverPath}/nextsongs`,\n      [sevenhtmlEndpoint] : options.sevenhtmlEndpoint || `${serverPath}/7.html`,\n      [sources]: options.sources || [],\n      [interval]: (options.interval || 30) * 1000,\n      [onStats]: options.onStats || noOp,\n      [onStatsFetch]: options.onStatsFetch || noOp,\n      [icyMetaInt]: options.icyMetaInt,\n      [icyDetectionTimeout]: options.icyDetectionTimeout,\n      [icyController]: new AbortController(),\n      [oggController]: new AbortController(),\n      [icestatsController]: new AbortController(),\n      [statsController]: new AbortController(),\n      [nextsongsController]: new AbortController(),\n      [sevenhtmlController]: new AbortController(),\n      [state]: STOPPED,\n    });\n  }\n\n  static xml2Json(xml) {\n    const deserialize = (xml) =>\n      new DOMParser().parseFromString(xml, \"application/xml\");\n\n    const serialize = (element) => {\n      if (!element.children.length) {\n        return Number.isNaN(Number(element.innerHTML))\n          ? element.innerHTML\n          : Number(element.innerHTML);\n      }\n\n      const json = {};\n\n      for (const child of element.children) {\n        if (child.nodeName in json) {\n          if (Array.isArray(json[child.nodeName])) {\n            json[child.nodeName].push(serialize(child));\n          } else {\n            json[child.nodeName] = [json[child.nodeName], serialize(child)];\n          }\n        } else {\n          json[child.nodeName] = serialize(child);\n        }\n      }\n\n      return json;\n    };\n\n    return serialize(deserialize(xml));\n  }\n\n  /**\n   * @returns The current state [\"stopped\", \"running\", \"fetching\"]\n   */\n  get state() {\n    return p.get(this)[state];\n  }\n\n  /**\n   * @returns The generated `status-json.xsl` endpoint\n   */\n  get icestatsEndpoint() {\n    return p.get(this)[icestatsEndpoint];\n  }\n\n  /**\n   * @returns The generated `stats` endpoint\n   */\n  get statsEndpoint() {\n    return p.get(this)[statsEndpoint];\n  }\n\n  /**\n   * @returns The generated `nextsongs` endpoint\n   */\n  get nextsongsEndpoint() {\n    return p.get(this)[nextsongsEndpoint];\n  }\n\n  /**\n   * @returns The generated `7.html` endpoint\n   */\n  get sevenhtmlEndpoint() {\n    return p.get(this)[sevenhtmlEndpoint];\n  }\n\n  /**\n   * @description Starts automatically fetching stats\n   */\n  start() {\n    if (p.get(this)[state] === STOPPED) {\n      p.get(this)[state] = RUNNING;\n\n      this.fetch().then(p.get(this)[onStats]);\n\n      p.get(this)[intervalId] = setInterval(() => {\n        this.fetch().then(p.get(this)[onStats]);\n      }, p.get(this)[interval]);\n    }\n  }\n\n  /**\n   * @description Stops automatically fetching stats and cancels any inprogress stats\n   */\n  stop() {\n    if (p.get(this)[state] !== STOPPED) {\n      p.get(this)[state] = STOPPED;\n\n      clearInterval(p.get(this)[intervalId]);\n      p.get(this)[icyController].abort();\n      p.get(this)[oggController].abort();\n      p.get(this)[icestatsController].abort();\n      p.get(this)[statsController].abort();\n      p.get(this)[sevenhtmlController].abort();\n    }\n  }\n\n  /**\n   * @description Manually fetches stats from the sources passed in to the `options.sources` parameter\n   * @async\n   * @returns {object} Object containing the stats from the sources\n   */\n  async fetch() {\n    if (p.get(this)[state] !== FETCHING) {\n      const oldState = p.get(this)[state];\n\n      p.get(this)[state] = FETCHING;\n      p.get(this)[onStatsFetch](p.get(this)[sources]);\n\n      const promises = [];\n      if (p.get(this)[sources].includes(\"icestats\"))\n        promises.push(this.getIcestats());\n      if (p.get(this)[sources].includes(\"sevenhtml\"))\n        promises.push(this.getSevenhtml());\n      if (p.get(this)[sources].includes(\"stats\"))\n        promises.push(this.getStats());\n      if (p.get(this)[sources].includes(\"nextsongs\"))\n        promises.push(this.getNextsongs());\n      if (p.get(this)[sources].includes(\"icy\"))\n        promises.push(this.getIcyMetadata());\n      if (p.get(this)[sources].includes(\"ogg\"))\n        promises.push(this.getOggMetadata());\n\n      const stats = await Promise.all(promises).then((stats) =>\n        stats.reduce((acc, stat) => ({ ...acc, ...stat }), {})\n      );\n\n      p.get(this)[state] =\n        p.get(this)[state] !== FETCHING ? p.get(this)[state] : oldState;\n\n      return stats;\n    }\n  }\n\n  /**\n   * @description Fetches the data from the `/status-json.xsl` endpoint\n   * @async\n   * @returns {object} Object containing results of `/status-json.xsl`\n   */\n  async getIcestats() {\n    return this[fetchStats]({\n      status: icestatsFetchStatus,\n      endpoint: icestatsEndpoint,\n      controller: icestatsController,\n      mapper: (res) => res.json(),\n    }).then((stats) => ({ icestats: stats && stats.icestats }));\n  }\n\n  /*\n  <HTML><meta http-equiv=\"Pragma\" content=\"no-cache\"></head><body>350,1,132,1000,41,128,Dj Mixes Sety</body></html>\n  ,141,1000,50,128,Gra AutoPilot audycje Energy 2000</body></html>\n  ,27,1000,8,128,Gra Wavelogic audycje Rave With The Wave</body></html>\n  ,578,1000,233,128,youtube.com/RadioPartyOfficial</body></html>\n  ,15,1000,5,64,youtube.com/RadioPartyOfficial</body></html>\n  */\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#Equivalent_of_7.html\n  // CURRENTLISTENERS STREAMSTATUS PEAKLISTENERS MAXLISTENERS UNIQUELISTENERS BITRATE SONGTITLE\n\n  /**\n   * @description Fetches the data from the `/7.html` endpoint\n   * @async\n   * @returns {object} Object containing results of `/7.html`\n   */\n  async getSevenhtml() {\n    return this[fetchStats]({\n      status: sevenhtmlFetchStatus,\n      endpoint: sevenhtmlEndpoint,\n      controller: sevenhtmlController,\n      mapper: async (res) =>\n        (await res.text()).match(/(.*?)<\\/body>/gi).map((s) => {\n          const stats = s\n            .match(/(<body>|,)(?<stats>.*)<\\/body>/i)\n            .groups.stats.split(\",\");\n\n          return stats.length === 7\n            ? {\n                StreamTitle: stats[6],\n                currentListeners: parseInt(stats[4]),\n                peakListeners: parseInt(stats[2]),\n                maxListeners: parseInt(stats[3]),\n                bitrate: parseInt(stats[5]),\n                status: parseInt(stats[1]),\n                serverListeners: parseInt(stats[0]),\n              }\n            : {\n                StreamTitle: stats[4],\n                currentListeners: parseInt(stats[2]),\n                peakListeners: parseInt(stats[0]),\n                maxListeners: parseInt(stats[1]),\n                bitrate: parseInt(stats[3]),\n              };\n        }),\n    }).then((sevenhtml) => ({\n      sevenhtml,\n    }));\n  }\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#General_Server_Summary\n  /**\n   * @description Fetches the data from the `/stats` endpoint\n   * @async\n   * @returns {object} Object containing results of `/stats`\n   */\n  async getStats() {\n    return this[fetchStats]({\n      status: statsFetchStatus,\n      endpoint: statsEndpoint,\n      controller: statsController,\n      mapper: async (res) =>\n        IcecastMetadataStats.xml2Json(await res.text()).SHOUTCASTSERVER\n          .STREAMSTATS,\n    }).then((stats) => ({\n      stats,\n    }));\n  }\n\n  // http://wiki.winamp.com/wiki/SHOUTcast_DNAS_Server_2_XML_Reponses#Nextsongs\n  /**\n   * @description Fetches the data from the `/nextsongs` endpoint\n   * @async\n   * @returns {object} Object containing results of `/nextsongs`\n   */\n  async getNextsongs() {\n    return this[fetchStats]({\n      status: nextsongsFetchStatus,\n      endpoint: nextsongsEndpoint,\n      controller: nextsongsController,\n      mapper: async (res) =>\n        IcecastMetadataStats.xml2Json(await res.text()).SHOUTCASTSERVER\n          .NEXTSONGS,\n    }).then((nextsongs) => ({\n      nextsongs,\n    }));\n  }\n\n  /**\n   * @description Fetches the first ICY metadata update from the stream\n   * @async\n   * @returns {object} Object containing ICY metadata\n   */\n  async getIcyMetadata() {\n    return this[getStreamMetadata]({\n      status: icyFetchStatus,\n      endpoint: streamEndpoint,\n      controller: icyController,\n      metadataType: \"icy\",\n      headers: { \"Icy-MetaData\": 1 },\n    });\n  }\n\n  /**\n   * @description Fetches the first Ogg metadata update from the stream\n   * @async\n   * @returns {object} Object containing Ogg metadata\n   */\n  async getOggMetadata() {\n    return this[getStreamMetadata]({\n      status: oggFetchStatus,\n      endpoint: streamEndpoint,\n      controller: oggController,\n      metadataType: \"ogg\",\n    });\n  }\n\n  async [getStreamMetadata]({\n    status,\n    endpoint,\n    controller,\n    headers,\n    metadataType,\n  }) {\n    return this[fetchStats]({\n      status,\n      endpoint,\n      controller,\n      headers,\n      mapper: async (res) =>\n        new Promise((resolve) => {\n          new IcecastReadableStream(res, {\n            onMetadata: ({ metadata }) => {\n              p.get(this)[controller].abort();\n              resolve(metadata);\n            },\n            onMetadataFailed: () => {\n              p.get(this)[controller].abort();\n              resolve();\n            },\n            metadataTypes: metadataType,\n            icyMetaInt: p.get(this)[icyMetaInt],\n            icyDetectionTimeout: p.get(this)[icyDetectionTimeout],\n          }).startReading();\n        }),\n    }).then((metadata) => ({ [metadataType]: metadata }));\n  }\n\n  async [fetchStats]({ status, endpoint, controller, mapper, headers = {} }) {\n    if (!p.get(this)[status]) {\n      p.get(this)[status] = true;\n      return fetch(p.get(this)[endpoint], {\n        method: \"GET\",\n        headers,\n        signal: p.get(this)[controller].signal,\n      })\n        .then((res) => {\n          if (!res.ok) throw new Error(`HTTP Error ${res.status}`);\n          return res;\n        })\n        .then(mapper)\n        .catch((e) => {\n          if (e.name !== \"AbortError\") {\n            console.warn(`Failed to fetch ${p.get(this)[endpoint]}`, e);\n          }\n        })\n        .finally(() => {\n          p.get(this)[status] = false;\n          p.get(this)[controller] = new AbortController();\n        });\n    }\n  }\n}\n"],"sourceRoot":""}
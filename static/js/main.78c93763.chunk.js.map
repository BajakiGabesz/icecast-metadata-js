{"version":3,"sources":["Player/Player.module.css","StationSelector/StationSelector.module.css","About/About.module.css","App.module.css","icecast/metadata-js/IcecastMetadataQueue.js","icecast/metadata-js/MetadataBuffer.js","icecast/metadata-js/IcecastMetadataReader.js","icecast/metadata-js/IcecastReadableStream.js","FragmentedMPEG/codecs/CodecHeader.js","FragmentedMPEG/codecs/crc8.js","FragmentedMPEG/codecs/flac/FlacHeader.js","FragmentedMPEG/codecs/CodecParser.js","FragmentedMPEG/codecs/CodecFrame.js","FragmentedMPEG/codecs/mpeg/MPEGHeader.js","FragmentedMPEG/codecs/mpeg/MPEGFrame.js","FragmentedMPEG/codecs/mpeg/MPEGParser.js","FragmentedMPEG/codecs/aac/AACHeader.js","FragmentedMPEG/codecs/aac/AACFrame.js","FragmentedMPEG/codecs/aac/AACParser.js","FragmentedMPEG/codecs/ogg/OGGPageHeader.js","FragmentedMPEG/codecs/ogg/OGGPage.js","FragmentedMPEG/codecs/flac/FlacFrame.js","FragmentedMPEG/codecs/ogg/OGGParser.js","FragmentedMPEG/isobmff/isobmff-object/ISOBMFFObject.js","FragmentedMPEG/isobmff/isobmff-object/Box.js","FragmentedMPEG/isobmff/isobmff-object/ESTag.js","FragmentedMPEG/isobmff/ISOBMFFBuilder.js","FragmentedMPEG/FragmentedMPEG.js","icecast/MetadataPlayer.js","Player/play.svg","Player/pause.svg","Player/Player.jsx","StationSelector/StationSelector.jsx","About/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IcecastMetadataQueue","icyBr","onMetadataUpdate","this","_icyBr","_onMetadataUpdate","_metadataQueue","bufferOffset","metadata","_enqueueMetadata","bytesRead","forEach","i","clearTimeout","_timeoutId","time","push","setTimeout","_dequeueMetadata","shift","map","MetadataBuffer","expectedLength","_buffer","Uint8Array","_length","data","set","length","Stats","_totalBytesRead","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentBytesRemaining","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","currentStreamBytesRemaining","currentMetadataBytesRemaining","bytes","noOp","IcecastMetadataReader","icyMetaInt","onStream","onMetadata","_icyMetaInt","_remainingData","_currentPosition","_stats","_decoder","TextDecoder","_onStream","_onMetadata","_onStreamPromise","Promise","resolve","_onMetadataPromise","_generator","next","metadataBytes","parseMetadataString","decode","chunk","value","_getStream","_getMetadataLength","_getMetadata","_getNextValue","stream","addStreamBytes","streamPayload","stats","addMetadataLengthBytes","addMetadataBytes","_storeMetadata","metadataPayload","parseMetadata","currentMetadata","metadataBuffer","pop","subarray","metadataString","matchAll","match","IcecastReadableStream","response","readerIterator","asyncIterator","body","start","controller","icecast","parseInt","headers","get","enqueue","asyncReadAll","close","readableStream","reader","getReader","Symbol","read","ReadableStream","CodecHeader","header","_channelMode","channelMode","_channels","channels","_dataByteLength","dataByteLength","_sampleRate","sampleRate","_sampleLength","sampleLength","crcTable","Int32Array","FlacHeader","_blockingStrategy","blockingStrategy","_blockSize","blockSize","_crc","crc","_frameNumber","frameNumber","_sampleSize","sampleSize","_sampleNumber","sampleNumber","mask","offset","idx","buffer","blockingStrategyBits","blockSizeBits","sampleRateBits","channelAssignmentBits","sampleSizeBits","channelAssignment","description","decodedUtf8","decodeUTF8Int","buf","byte","crc8","0","CodecParser","CodecFrame","remainingData","frame","_maxHeaderLength","syncFrame","frames","nextFrame","syncResult","isComplete","frameLocations","readPosition","getHeader","currentFrame","lengthOffset","_header","_data","MPEGHeader","_bitrate","bitrate","_emphasis","emphasis","_framePadding","framePadding","_isCopyrighted","isCopyrighted","_isOriginal","isOriginal","_isPrivate","isPrivate","_layer","layer","_modeExtension","modeExtension","_mpegVersion","mpegVersion","_protection","protection","mpegVersionBits","layerBits","protectionBit","mpegVersions","layers","bitrateBits","paddingBit","privateBit","bitrateMatrix","bitrateIndex","sampleRates","Math","floor","channelModeBits","modeExtensionBits","copyrightBit","originalBit","emphasisBits","channelModes","modeExtensions","v1Layer1","v1Layer2","v1Layer3","v2Layer1","v2Layer23","layer12ModeExtensions","layer3ModeExtensions","v1","v2","headerCache","Map","MPEGFrame","key","String","fromCharCode","MPEGParser","fixedLengthFrame","AACHeader","_bits","bits","_copyrightId","copyrightId","_copyrightIdStart","copyrightIdStart","_bufferFullness","bufferFullness","_isHome","isHome","_numberAACFrames","numberAACFrames","_profile","profile","profileBits","DataView","from","getUint16","homeBit","copyrightIdBit","copyrightIdStartBit","frameLengthBits","getUint32","bufferFullnessBits","audioSpecificConfig","setUint16","AACFrame","AACParser","OGGPageHeader","_absoluteGranulePosition","absoluteGranulePosition","_isContinuedPacket","isContinuedPacket","_isFirstPage","isFirstPage","_isLastPage","isLastPage","_numberPageSegments","numberPageSegments","_pageSequenceNumber","pageSequenceNumber","_pageChecksum","pageChecksum","_streamSerialNumber","streamSerialNumber","headerBytes","view","OggS","streamStructureVersion","zeros","continuePacketBit","firstPageBit","lastPageBit","getBigInt64","getInt32","OGGPage","oggPage","FlacFrame","OGGParser","_codec","_frameClass","oggPages","setCodec","flatMap","variableLengthFrame","ISOBMFFObject","name","contents","objects","_name","_contents","_objects","index","LENGTH_SIZE","slice","concat","object","reduce","acc","obj","Box","boxes","stringToByteArray","box","constructor","console","error","Error","addObject","char","charCodeAt","number","setUint32","ESTag","tagNumber","tags","tag","ISOBMFFBuilder","mimeType","_mimeType","getMp4a","getOpus","getFlaC","esdsCodec","streamDescriptorTag","addTag","getCodecBox","getBoxContents","trun","insertBytes","moof","mdat","getMediaDataBox","fragment","framesLength","frameData","FragmentedMPEG","_codecParser","_frames","_codecData","_sendReceiveData","_parseFrames","_ISOBMFFBuilder","fMP4","appendBuffers","getMovieBox","wrapFrames","codecData","parseFrames","MIN_FRAMES","MIN_FRAMES_LENGTH","codec","buf1","buf2","MetadataPlayer","audioElement","_icecastMetadataQueue","meta","_audioElement","_playing","_mediaSource","MediaSource","src","URL","createObjectURL","addEventListener","_sourceBuffer","addSourceBuffer","mode","once","_playPromise","then","removeAttribute","load","catch","_createMediaSource","appendBuffer","_waitForSourceBuffer","buffered","end","play","currentTime","remove","endpoint","_controller","AbortController","fetch","method","signal","_fMP4Wrapper","isTypeSupported","_appendSourceBuffer","a","iterator","movieFragment","stop","fetchStream","res","getMediaSource","_isInitialMetadata","addMetadata","timestampOffset","startReading","e","_destroyMediaSource","purgeMetadataQueue","message","abort","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","station","Audio","useState","audioHeight","audioWidth","setSpectrumSize","meters","setMeters","log","metadataPlayer","useCallback","metaInt","useEffect","playing","useMetadataPlayer","isPlaying","toggle","useLayoutEffect","updateSize","player","document","getElementById","clientWidth","clientHeight","window","removeEventListener","id","className","styles","spectrum","height","width","audioEle","capColor","capHeight","meterWidth","meterCount","meterColor","color","gap","disabled","button","onClick","StreamTitle","link","visitStation","href","rel","Station","changeStation","type","stationRadio","onChange","stationLabel","htmlFor","stationName","stationDescription","stations","about","subLink","disclaimer","App","setStation","About","StationSelector","footer","Player","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78c93763.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spectrum\":\"Player_spectrum__1ThfC\",\"player\":\"Player_player__1vYfQ\",\"metadata\":\"Player_metadata__3j7ae\",\"button\":\"Player_button__297uW\",\"link\":\"Player_link__2k87w\",\"visitStation\":\"Player_visitStation__2xKeH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"StationSelector_station__3a44c\",\"stationRadio\":\"StationSelector_stationRadio__1FTGQ\",\"stationLabel\":\"StationSelector_stationLabel__1DbUR\",\"stationName\":\"StationSelector_stationName__1hB_K\",\"stationDescription\":\"StationSelector_stationDescription__36TBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__2v-0B\",\"link\":\"About_link__1z8T1\",\"subLink\":\"About_subLink__n5KCY\",\"description\":\"About_description__3WN3o\",\"disclaimer\":\"About_disclaimer__2gOk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"footer\":\"App_footer__29Fsv\"};","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class IcecastMetadataQueue {\n  /**\n   * @description Schedules updates up to the millisecond for Icecast Metadata from the response body of an Icecast stream mountpoint\n   * @description The accuracy of metadata updates is a direct relationship of the icyMetaInt\n   * @param {Object} IcecastMetadataQueue constructor parameter\n   * @param {number} [IcecastMetadataQueue.icyBr] Bitrate of audio stream used to increase accuracy when to updating metadata\n   * @param {onMetadataUpdate} [IcecastMetadataQueue.onMetadataUpdate] Callback executed when metadata is scheduled to update\n   *\n   * @callback onMetadataUpdate\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} time Time in seconds the metadata should be displayed / recorded\n   *\n   */\n\n  constructor({ icyBr, onMetadataUpdate = () => {} }) {\n    this._icyBr = icyBr;\n    this._onMetadataUpdate = onMetadataUpdate;\n    this._metadataQueue = [];\n  }\n\n  /**\n   * @description Returns the metadata queued for updates\n   * @type {{metadata: string, time: number}[]} Queued metadata\n   */\n  get metadataQueue() {\n    return this._metadataQueue.map(({ metadata, time }) => ({\n      metadata,\n      time,\n    }));\n  }\n\n  /**\n   *\n   * @param {object} metadata Metadata object returned from IcecastMetadataReader\n   * @param {number} bufferOffset Total buffered audio in seconds\n   */\n  addMetadata({ metadata }, bufferOffset) {\n    /**\n     * Metadata time is derived from the total number of stream bytes read\n     * since the latest buffer input. The buffer offset should be the total\n     * seconds of audio in the player buffer when the metadata was read.\n     */\n\n    this._enqueueMetadata(metadata, bufferOffset);\n  }\n\n  /**\n   * @description Calculates audio stream length based on bitrate\n   * @param {number} bytesRead Number of bytes\n   * @type {number} Seconds\n   */\n  getTimeByBytes(bytesRead) {\n    return this._icyBr ? bytesRead / (this._icyBr * 125) : 0;\n  }\n\n  /**\n   * @description Clears all metadata updates and empties the queue\n   */\n  purgeMetadataQueue() {\n    this._metadataQueue.forEach((i) => clearTimeout(i._timeoutId));\n    this._metadataQueue = [];\n  }\n\n  _enqueueMetadata(metadata, time) {\n    this._metadataQueue.push({\n      _timeoutId: setTimeout(() => {\n        this._dequeueMetadata();\n      }, time * 1000), // trigger timeout relative to play position\n      metadata,\n    });\n  }\n\n  _dequeueMetadata() {\n    const { metadata } = this._metadataQueue.shift();\n    this._onMetadataUpdate(metadata);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// Use fast buffer allocation if this is a NodeJS runtime or Uint8Array if a browser runtime\nconst bufferFunction = (length) => new Uint8Array(length);\n\n/**\n * @description Stores a collection of buffers as an array.\n */\nexport default class MetadataBuffer {\n  constructor(expectedLength) {\n    this._buffer = bufferFunction(expectedLength);\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * @type {Uint8Array} Returns all stored data\n   */\n  pop() {\n    return this._buffer;\n  }\n\n  push(data) {\n    this._buffer.set(data, this._length);\n    this._length += data.length;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataBuffer from \"./MetadataBuffer\";\n\nclass Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set currentBytesRemaining(bytes) {\n    this._currentBytesRemaining = bytes;\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining = bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n}\n\nconst noOp = () => {};\n\n/**\n * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n * @param {number} icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n *\n * @callback onMetadata\n * @param {object} value Object containing Metadata and Statistics\n * @param {object} metadata Object containing the metadata received.\n * @param {string} [metadata.StreamTitle] Title of the metadata update.\n * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n *\n * @callback onStream\n * @param {object} value Object containing Stream data and Statistics\n * @param {Uint8Array} stream Object containing the stream buffer.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n */\nexport default class IcecastMetadataReader {\n  constructor({ icyMetaInt, onStream = noOp, onMetadata = noOp }) {\n    this._icyMetaInt = icyMetaInt;\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = null;\n    this._stats = new Stats();\n    this._decoder = new TextDecoder(\"utf-8\");\n\n    this._onStream = onStream;\n    this._onMetadata = onMetadata;\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  /**\n   * @description Parses an Icecast metadata string into key value pairs.\n   * @param {string} metadataString Icecast formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseMetadataString(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadata = {};\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (let match of metadataString.matchAll(\n      /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/g\n    )) {\n      metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  /**\n   * @description Parses Icecast metadata bytes into key value pairs.\n   * @param {Uint8Array} metadataBytes Bytes containing Icecast metadata.\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  parseMetadata(metadataBytes) {\n    return IcecastMetadataReader.parseMetadataString(\n      this._decoder.decode(metadataBytes)\n    );\n  }\n\n  /**\n   * @description Returns an iterator that iterates over the passed in data.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  /**\n   * @description Returns an async iterator that iterates over the passed in data and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  *_generator() {\n    do {\n      yield* this._getStream();\n      yield* this._getMetadataLength();\n      this._remainingData && (yield* this._getMetadata());\n    } while (true);\n  }\n\n  *_getStream() {\n    this._remainingData = this._icyMetaInt;\n    this._stats.currentStreamBytesRemaining = this._icyMetaInt;\n\n    do {\n      const stream = yield* this._getNextValue();\n      this._stats.addStreamBytes = stream.length;\n\n      const streamPayload = { stream, stats: this._stats.stats };\n      /**\n       * Stream callback.\n       *\n       * @callback onStream\n       * @type {object}\n       * @property {Uint8Array} stream Stream bytes.\n       * @property {object} stats Statistics on bytes read.\n       */\n      this._onStreamPromise = this._onStream(streamPayload);\n\n      yield streamPayload;\n    } while (this._remainingData);\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes = 1;\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    let metadata = yield* this._getNextValue();\n    this._stats.addMetadataBytes = metadata.length;\n\n    if (this._remainingData) metadata = yield* this._storeMetadata(metadata);\n\n    const metadataPayload = {\n      metadata: this.parseMetadata(metadata),\n      stats: this._stats.stats,\n    };\n    /**\n     * Metadata callback.\n     *\n     * @callback onMetadata\n     * @type {object}\n     * @property {object} metadata Metadata key value pairs..\n     * @param {property} [metadata.StreamTitle] Title of the metadata update.\n     * @param {property} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n     * @property {object} stats Statistics on bytes read.\n     */\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n\n    yield metadataPayload;\n  }\n\n  *_storeMetadata(currentMetadata) {\n    // Store any partial metadata updates until a full metadata chunk can be parsed.\n    const metadataBuffer = new MetadataBuffer(\n      this._remainingData + currentMetadata.length\n    );\n    metadataBuffer.push(currentMetadata);\n\n    do {\n      const metadata = yield* this._getNextValue();\n      metadataBuffer.push(metadata);\n\n      this._stats.addMetadataBytes = metadata.length;\n    } while (this._remainingData);\n\n    return metadataBuffer.pop();\n  }\n\n  *_getNextValue() {\n    while (!this._buffer || this._currentPosition === this._buffer.length) {\n      this._buffer = yield; // if out of data, accept new data in the .next() call\n      this._currentPosition = 0;\n      this._stats.currentBytesRemaining = this._buffer.length;\n    }\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      this._remainingData + this._currentPosition\n    );\n\n    this._remainingData -= value.length;\n    this._currentPosition += value.length;\n\n    return value;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n * @extends ReadableStream\n */\nexport default class IcecastReadableStream extends ReadableStream {\n  /**\n   *\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { icyMetaInt, onStream = noOp, onMetadata }) {\n    const readerIterator = IcecastReadableStream.asyncIterator(response.body);\n\n    super({\n      async start(controller) {\n        const icecast = new IcecastMetadataReader({\n          icyMetaInt:\n            parseInt(response.headers.get(\"Icy-MetaInt\")) || icyMetaInt,\n          onMetadata,\n          onStream: (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of readerIterator) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n  }\n\n  /**\n   * @description Creates an async iterator from this ReadableStream.\n   * @returns {Symbol.asyncIterator} Async Iterator for this ReadableStream.\n   */\n  async startReading() {\n    for await (const i of IcecastReadableStream.asyncIterator(this)) {\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class CodecHeader {\n  /**\n   * @private\n   */\n  constructor(header) {\n    this._channelMode = header.channelMode;\n    this._channels = header.channels;\n    this._dataByteLength = header.dataByteLength;\n    this._length = header.length;\n    this._sampleRate = header.sampleRate;\n    this._sampleLength = header.sampleLength;\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  get dataByteLength() {\n    return this._dataByteLength;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get sampleRate() {\n    return this._sampleRate;\n  }\n\n  get sampleLength() {\n    return this._sampleLength;\n  }\n}\n","// https://pycrc.org/\n\n// prettier-ignore\nconst crcTable = new Int32Array([\n  0x00,0x07,0x0e,0x09,0x1c,0x1b,0x12,0x15,0x38,0x3f,0x36,0x31,0x24,0x23,0x2a,0x2d,\n  0x70,0x77,0x7e,0x79,0x6c,0x6b,0x62,0x65,0x48,0x4f,0x46,0x41,0x54,0x53,0x5a,0x5d,\n  0xe0,0xe7,0xee,0xe9,0xfc,0xfb,0xf2,0xf5,0xd8,0xdf,0xd6,0xd1,0xc4,0xc3,0xca,0xcd,\n  0x90,0x97,0x9e,0x99,0x8c,0x8b,0x82,0x85,0xa8,0xaf,0xa6,0xa1,0xb4,0xb3,0xba,0xbd,\n  0xc7,0xc0,0xc9,0xce,0xdb,0xdc,0xd5,0xd2,0xff,0xf8,0xf1,0xf6,0xe3,0xe4,0xed,0xea,\n  0xb7,0xb0,0xb9,0xbe,0xab,0xac,0xa5,0xa2,0x8f,0x88,0x81,0x86,0x93,0x94,0x9d,0x9a,\n  0x27,0x20,0x29,0x2e,0x3b,0x3c,0x35,0x32,0x1f,0x18,0x11,0x16,0x03,0x04,0x0d,0x0a,\n  0x57,0x50,0x59,0x5e,0x4b,0x4c,0x45,0x42,0x6f,0x68,0x61,0x66,0x73,0x74,0x7d,0x7a,\n  0x89,0x8e,0x87,0x80,0x95,0x92,0x9b,0x9c,0xb1,0xb6,0xbf,0xb8,0xad,0xaa,0xa3,0xa4,\n  0xf9,0xfe,0xf7,0xf0,0xe5,0xe2,0xeb,0xec,0xc1,0xc6,0xcf,0xc8,0xdd,0xda,0xd3,0xd4,\n  0x69,0x6e,0x67,0x60,0x75,0x72,0x7b,0x7c,0x51,0x56,0x5f,0x58,0x4d,0x4a,0x43,0x44,\n  0x19,0x1e,0x17,0x10,0x05,0x02,0x0b,0x0c,0x21,0x26,0x2f,0x28,0x3d,0x3a,0x33,0x34,\n  0x4e,0x49,0x40,0x47,0x52,0x55,0x5c,0x5b,0x76,0x71,0x78,0x7f,0x6a,0x6d,0x64,0x63,\n  0x3e,0x39,0x30,0x37,0x22,0x25,0x2c,0x2b,0x06,0x01,0x08,0x0f,0x1a,0x1d,0x14,0x13,\n  0xae,0xa9,0xa0,0xa7,0xb2,0xb5,0xbc,0xbb,0x96,0x91,0x98,0x9f,0x8a,0x8d,0x84,0x83,\n  0xde,0xd9,0xd0,0xd7,0xc2,0xc5,0xcc,0xcb,0xe6,0xe1,0xe8,0xef,0xfa,0xfd,0xf4,0xf3\n]);\n\nexport default (buf) => {\n  let crc;\n\n  for (const byte of buf) {\n    crc = crcTable[(crc ^ byte) & 0xff] & 0xff;\n  }\n\n  return crc;\n};\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/ogg/doc/framing.html\n\nAAAAAAAA AAAAAABC DDDDEEEE FFFFGGGH \n(IIIIIIII...)\n(JJJJJJJJ|JJJJJJJJ)\n(KKKKKKKK|KKKKKKKK)\nLLLLLLLLL\n\nFlac Frame Header\nLetter \tLength (bits) \tDescription\nA \t13 \t11111111|11111\nB   1   Reserved 0 - mandatory, 1 - reserved\nC \t1 \tBlocking strategy, 0 - fixed, 1 - variable\nD \t4   Block size in inter-channel samples\nE \t4 \tSample rate\nF   4   Channel assignment\nG   3   Sample size in bits\nH   1   Reserved 0 - mandatory, 1 - reserved\nI   ?   if(variable blocksize)\n           <8-56>:\"UTF-8\" coded sample number (decoded number is 36 bits) [4]\n        else\n           <8-48>:\"UTF-8\" coded frame number (decoded number is 31 bits) [4]\nJ   ?   if(blocksize bits == 011x)\n            8/16 bit (blocksize-1)\nK   ?   if(sample rate bits == 11xx)\n            8/16 bit sample rate\nL   8   CRC-8 (polynomial = x^8 + x^2 + x^1 + x^0, initialized with 0) of everything before the crc, including the sync code\n        \n*/\n\nimport CodecHeader from \"../CodecHeader\";\nimport crc8 from \"../crc8\";\n\nexport default class FlacHeader extends CodecHeader {\n  static blockingStrategy = {\n    0b00000000: \"Fixed\",\n    0b00000001: \"Variable\",\n  };\n\n  static blockSize = {\n    0b00000000: \"reserved\",\n    0b00010000: 192,\n    0b00100000: 576,\n    0b00110000: 1152,\n    0b01000000: 2304,\n    0b01010000: 4608,\n    0b01100000: \"8-bit (blocksize-1) end of header\",\n    0b01110000: \"16-bit (blocksize-1) end of header\",\n    0b10000000: 256,\n    0b10010000: 512,\n    0b10100000: 1024,\n    0b10110000: 2048,\n    0b11000000: 4096,\n    0b11010000: 8192,\n    0b11100000: 16384,\n    0b11110000: 32768,\n  };\n\n  static sampleRate = {\n    0b00000000: \"invalid\", // (unsupported) get from STREAMINFO metadata block\n    0b00000001: 88200,\n    0b00000010: 176400,\n    0b00000011: 192000,\n    0b00000100: 8000,\n    0b00000101: 16000,\n    0b00000110: 22050,\n    0b00000111: 24000,\n    0b00001000: 32000,\n    0b00001001: 44100,\n    0b00001010: 48000,\n    0b00001011: 96000,\n    0b00001100: \"get 8 bit sample rate (in kHz) from end of header\",\n    0b00001101: \"get 16 bit sample rate (in Hz) from end of header\",\n    0b00001110: \"get 16 bit sample rate (in tens of Hz) from end of header\",\n    0b00001111: \"invalid\",\n  };\n\n  /* prettier-ignore */\n  static channelAssignment = {\n    0b00000000: {channels: 1, description: \"mono\"},\n    0b00010000: {channels: 2, description: \"left, right\"},\n    0b00100000: {channels: 3, description: \"left, right, center\"},\n    0b00110000: {channels: 4, description: \"front left, front right, back left, back right\"},\n    0b01000000: {channels: 5, description: \"front left, front right, front center, back/surround left, back/surround right\"},\n    0b01010000: {channels: 6, description: \"front left, front right, front center, LFE, back/surround left, back/surround right\"},\n    0b01100000: {channels: 7, description: \"front left, front right, front center, LFE, back center, side left, side right\"},\n    0b01110000: {channels: 8, description: \"front left, front right, front center, LFE, back left, back right, side left, side right\"},\n    0b10000000: {channels: 2, description: \"left/side stereo: channel 0 is the left channel, channel 1 is the side(difference) channel\"},\n    0b10010000: {channels: 2, description: \"right/side stereo: channel 0 is the side(difference) channel, channel 1 is the right channel\"},\n    0b10100000: {channels: 2, description: \"mid/side stereo: channel 0 is the mid(average) channel, channel 1 is the side(difference) channel\"},\n    0b10110000: \"reserved\",\n    0b11000000: \"reserved\",\n    0b11010000: \"reserved\",\n    0b11100000: \"reserved\",\n    0b11110000: \"reserved\",\n  }\n\n  static sampleSize = {\n    0b00000000: \"get from STREAMINFO metadata block\",\n    0b00000010: 8,\n    0b00000100: 12,\n    0b00000110: \"reserved\",\n    0b00001000: 16,\n    0b00001010: 20,\n    0b00001100: 24,\n    0b00001110: \"reserved\",\n  };\n\n  static decodeUTF8Int(data) {\n    if (data[0] < 0x80) return { value: data[0], next: 1 };\n\n    if (data === 0xff) return null; // invalid\n\n    let next = 2,\n      mask = 0xe0,\n      value;\n\n    // determine length of utf-8 character\n    while ((data[0] & mask) !== ((mask << 1) & 0xff) && next < 7) {\n      next++;\n      mask |= mask >> 1;\n    }\n\n    if (data.length < next) return null; // not enough data\n    if (next === 7) return null; // invalid\n\n    const offset = (next - 1) * 6;\n\n    // set value for the remaining bits in the length character\n    value = data[0] & ((mask ^ 0xff) << offset);\n\n    // set the remaining values\n    for (let idx = 1; idx < next; idx++) {\n      value |= (data[idx] & 0x3f) << (offset - 6 * idx);\n    }\n\n    return { value, next };\n  }\n\n  static getHeader(buffer) {\n    // Must be at least 6 bytes.\n    if (buffer.length < 6) return null;\n\n    // Bytes (1-2 of 6)\n    // * `11111111|111110..`: Frame sync\n    // * `........|......0.`: Reserved 0 - mandatory, 1 - reserved\n    if (buffer[0] !== 0xff || !(buffer[1] === 0xf8 || buffer[1] === 0xf9)) {\n      return null;\n    }\n\n    const header = {};\n    header.length = 2;\n\n    // Byte (2 of 6)\n    // * `.......C`: Blocking strategy, 0 - fixed, 1 - variable\n    const blockingStrategyBits = buffer[1] & 0b00000001;\n\n    header.blockingStrategy = FlacHeader.blockingStrategy[blockingStrategyBits];\n\n    // Byte (3 of 6)\n    // * `DDDD....`: Block size in inter-channel samples\n    // * `....EEEE`: Sample rate\n    header.length++;\n    const blockSizeBits = buffer[2] & 0b11110000;\n    const sampleRateBits = buffer[2] & 0b00001111;\n\n    header.blockSize = FlacHeader.blockSize[blockSizeBits];\n    if (header.blockSize === \"reserved\") return null;\n\n    header.sampleRate = FlacHeader.sampleRate[sampleRateBits];\n    if (header.sampleRate === \"invalid\") return null;\n\n    // Byte (4 of 6)\n    // * `FFFF....`: Channel assignment\n    // * `....GGG.`: Sample size in bits\n    // * `.......H`: Reserved 0 - mandatory, 1 - reserved\n    header.length++;\n    if (buffer[3] & 0b00000001) return null;\n    const channelAssignmentBits = buffer[3] & 0b11110000;\n    const sampleSizeBits = buffer[3] & 0b00001110;\n\n    const channelAssignment =\n      FlacHeader.channelAssignment[channelAssignmentBits];\n    if (channelAssignment === \"reserved\") return null;\n\n    header.channels = channelAssignment.channels;\n    header.channelMode = channelAssignment.description;\n\n    header.sampleSize = FlacHeader.sampleSize[sampleSizeBits];\n    if (header.sampleSize === \"reserved\") return null;\n\n    // Byte (5...)\n    // * `IIIIIIII|...`: VBR block size ? sample number : frame number\n    header.length++;\n    const decodedUtf8 = FlacHeader.decodeUTF8Int(buffer.subarray(4));\n    if (!decodedUtf8) return null;\n\n    if (blockingStrategyBits) {\n      header.sampleNumber = decodedUtf8.value;\n    } else {\n      header.frameNumber = decodedUtf8.value;\n    }\n\n    header.length += decodedUtf8.next;\n\n    // Byte (...)\n    // * `JJJJJJJJ|(JJJJJJJJ)`: Blocksize (8/16bit custom value)\n    if (typeof header.blockSize === \"string\") {\n      if (blockSizeBits === 0b01100000) {\n        // 8 bit\n        if (buffer.length < header.length) return null; // out of data\n        header.blockSize = buffer[header.length - 1] - 1;\n        header.length += 1;\n      } else if (blockSizeBits === 0b01110000) {\n        // 16 bit\n        if (buffer.length <= header.length) return null; // out of data\n        header.blockSize =\n          (buffer[header.length - 1] << 8) + buffer[header.length] - 1;\n        header.length += 2;\n      }\n    }\n\n    // Byte (...)\n    // * `KKKKKKKK|(KKKKKKKK)`: Sample rate (8/16bit custom value)\n    if (typeof header.sampleRate === \"string\") {\n      if (sampleRateBits === 0b00001100) {\n        // 8 bit\n        if (buffer.length < header.length) return null; // out of data\n        header.sampleRate = buffer[header.length - 1] - 1;\n        header.length += 1;\n      } else if (sampleRateBits === 0b00001101) {\n        // 16 bit\n        if (buffer.length <= header.length) return null; // out of data\n        header.sampleRate =\n          (buffer[header.length - 1] << 8) + buffer[header.length] - 1;\n        header.length += 2;\n      } else if (sampleRateBits === 0b00001110) {\n        // 16 bit\n        if (buffer.length <= header.length) return null; // out of data\n        header.sampleRate =\n          (buffer[header.length - 1] << 8) + buffer[header.length] - 1;\n        header.length += 2;\n      }\n    }\n\n    // Byte (...)\n    // * `LLLLLLLL`: CRC-8\n    if (buffer.length < header.length) return null; // out of data\n\n    header.crc = buffer[header.length - 1];\n    if (header.crc !== crc8(buffer.subarray(0, header.length - 1))) {\n      return null;\n    }\n\n    return new FlacHeader(header);\n  }\n\n  /**\n   * @private\n   * Call FlacHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this._blockingStrategy = header.blockingStrategy;\n    this._blockSize = header.blockSize;\n    this._crc = header.crc;\n    this._frameNumber = header.frameNumber;\n    this._sampleSize = header.sampleSize;\n    this._sampleNumber = header.sampleNumber;\n    this._sampleLength = header.blockSize;\n  }\n\n  get blockSize() {\n    return this._blockSize;\n  }\n\n  get frameNumber() {\n    return this._frameNumber;\n  }\n\n  get sampleSize() {\n    return this._sampleSize;\n  }\n\n  /**\n   * @description Interface for variable length frame\n   */\n  get currentFrame() {\n    return this._frameNumber;\n  }\n\n  get nextFrame() {\n    return this._frameNumber + 1;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport FlacHeader from \"./flac/FlacHeader\";\n\n/**\n * @abstract\n * @description Abstract class containing methods for parsing codec frames\n */\nexport default class CodecParser {\n  syncFrame(CodecFrame, data, remainingData = 0) {\n    let frame = new CodecFrame(data.subarray(remainingData));\n\n    while (\n      !frame.header &&\n      remainingData + this._maxHeaderLength < data.length\n    ) {\n      remainingData += frame.length || 1;\n      frame = new CodecFrame(data.subarray(remainingData));\n    }\n\n    return { frame, remainingData };\n  }\n\n  /**\n   * @description Searches for CodecFrames within bytes containing a sequence of known codec frames.\n   * @param {Uint8Array} data Codec data that should contain a sequence of known length frames.\n   * @returns {object} Object containing the actual offset and frame. Frame is undefined if no valid header was found\n   */\n  fixedLengthFrame(CodecFrame, data) {\n    // initial sync\n    let { frame, remainingData } = this.syncFrame(CodecFrame, data);\n    let frames = [];\n\n    // find a header in the data\n    while (\n      frame.header &&\n      frame.length + remainingData + this._maxHeaderLength < data.length\n    ) {\n      // check if there is a valid frame immediately after this frame\n      const nextFrame = new CodecFrame(\n        data.subarray(frame.length + remainingData)\n      );\n\n      if (nextFrame.header) {\n        // there is a next frame, so the current frame is valid\n        frames.push(frame);\n        remainingData += frame.length;\n        frame = nextFrame;\n      } else {\n        // frame is invalid and must re-sync\n        remainingData++;\n        const syncResult = this.syncFrame(CodecFrame, data, remainingData);\n        remainingData += syncResult.remainingData;\n        frame = syncResult.frame;\n      }\n    }\n\n    return {\n      frames,\n      remainingData,\n    };\n  }\n\n  variableLengthFrame(CodecFrame, data, isComplete) {\n    let frameLocations = [];\n    let frames = [];\n    let nextFrame = null;\n    let remainingData = 0;\n\n    for (let readPosition = 0; readPosition <= data.length; readPosition++) {\n      if (\n        data[readPosition] === 0xff &&\n        (data[readPosition + 1] === 0xf8 || data[readPosition + 1] === 0xf9)\n      ) {\n        const header = FlacHeader.getHeader(data.subarray(readPosition));\n\n        if (header) {\n          if (nextFrame === null) {\n            nextFrame = header.nextFrame;\n            frameLocations.push(readPosition);\n\n            readPosition += header.length;\n          } else if (header.currentFrame === nextFrame) {\n            frameLocations.push(readPosition);\n\n            nextFrame = header.nextFrame;\n            readPosition += header.length;\n          }\n        }\n      }\n    }\n\n    // if there is a complete set of frames, assume the last frame is valid\n    const lengthOffset = isComplete ? 0 : 1;\n\n    for (let i = 0; i < frameLocations.length - lengthOffset; i++) {\n      frames.push(\n        new CodecFrame(data.subarray(frameLocations[i], frameLocations[i + 1]))\n      );\n\n      remainingData = frameLocations[i];\n    }\n\n    return {\n      frames,\n      remainingData,\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class CodecFrame {\n  constructor(header, data, length) {\n    this._header = header;\n    this._data = data || [];\n    this._length = length || 0;\n  }\n\n  /**\n   * @returns Total length of frame (header + data)\n   */\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * @returns {MPEGHeader} This frame's header\n   */\n  get header() {\n    return this._header;\n  }\n\n  /**\n   * @returns {MPEGHeader} {Uint8Array} This frame's data\n   */\n  get data() {\n    return this._data;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecHeader from \"../CodecHeader\";\n\n// http://www.mp3-tech.org/programmer/frame_header.html\n\nexport default class MPEGHeader extends CodecHeader {\n  static bitrateMatrix = {\n    // bits | V1,L1 | V1,L2 | V1,L3 | V2,L1 | V2, L2 & L3\n    0b00000000: [\"free\", \"free\", \"free\", \"free\", \"free\"],\n    0b00010000: [32, 32, 32, 32, 8],\n    0b00100000: [64, 48, 40, 48, 16],\n    0b00110000: [96, 56, 48, 56, 24],\n    0b01000000: [128, 64, 56, 64, 32],\n    0b01010000: [160, 80, 64, 80, 40],\n    0b01100000: [192, 96, 80, 96, 48],\n    0b01110000: [224, 112, 96, 112, 56],\n    0b10000000: [256, 128, 112, 128, 64],\n    0b10010000: [288, 160, 128, 144, 80],\n    0b10100000: [320, 192, 160, 160, 96],\n    0b10110000: [352, 224, 192, 176, 112],\n    0b11000000: [384, 256, 224, 192, 128],\n    0b11010000: [416, 320, 256, 224, 144],\n    0b11100000: [448, 384, 320, 256, 160],\n    0b11110000: [\"bad\", \"bad\", \"bad\", \"bad\", \"bad\"],\n  };\n\n  static v1Layer1 = 0;\n  static v1Layer2 = 1;\n  static v1Layer3 = 2;\n  static v2Layer1 = 3;\n  static v2Layer23 = 4;\n\n  static layer12ModeExtensions = {\n    0b00000000: \"bands 4 to 31\",\n    0b00010000: \"bands 8 to 31\",\n    0b00100000: \"bands 12 to 31\",\n    0b00110000: \"bands 16 to 31\",\n  };\n\n  static layer3ModeExtensions = {\n    0b00000000: \"Intensity stereo off, MS stereo off\",\n    0b00010000: \"Intensity stereo on, MS stereo off\",\n    0b00100000: \"Intensity stereo off, MS stereo on\",\n    0b00110000: \"Intensity stereo on, MS stereo on\",\n  };\n\n  static layers = {\n    0b00000000: { description: \"reserved\" },\n    0b00000010: {\n      description: \"Layer III\",\n      framePadding: 1,\n      modeExtensions: MPEGHeader.layer3ModeExtensions,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer3,\n        sampleLength: 1152,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer23,\n        sampleLength: 576,\n      },\n    },\n    0b00000100: {\n      description: \"Layer II\",\n      framePadding: 1,\n      modeExtensions: MPEGHeader.layer12ModeExtensions,\n      sampleLength: 1152,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer2,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer23,\n      },\n    },\n    0b00000110: {\n      description: \"Layer I\",\n      framePadding: 4,\n      modeExtensions: MPEGHeader.layer12ModeExtensions,\n      sampleLength: 384,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer1,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer1,\n      },\n    },\n  };\n\n  static mpegVersions = {\n    0b00000000: {\n      description: \"MPEG Version 2.5 (later extension of MPEG 2)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 11025,\n        0b00000100: 12000,\n        0b00001000: 8000,\n        0b00001100: \"reserved\",\n      },\n    },\n    0b00001000: { description: \"reserved\" },\n    0b00010000: {\n      description: \"MPEG Version 2 (ISO/IEC 13818-3)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 22050,\n        0b00000100: 24000,\n        0b00001000: 16000,\n        0b00001100: \"reserved\",\n      },\n    },\n    0b00011000: {\n      description: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n      layers: \"v1\",\n      sampleRates: {\n        0b00000000: 44100,\n        0b00000100: 48000,\n        0b00001000: 32000,\n        0b00001100: \"reserved\",\n      },\n    },\n  };\n\n  static protection = {\n    0b00000000: \"16bit CRC\",\n    0b00000001: \"none\",\n  };\n\n  static emphasis = {\n    0b00000000: \"none\",\n    0b00000001: \"50/15 ms\",\n    0b00000010: \"reserved\",\n    0b00000011: \"CCIT J.17\",\n  };\n\n  static channelModes = {\n    0b00000000: { channels: 2, description: \"Stereo\" },\n    0b01000000: { channels: 2, description: \"Joint stereo\" },\n    0b10000000: { channels: 2, description: \"Dual channel\" },\n    0b11000000: { channels: 1, description: \"Single channel (Mono)\" },\n  };\n\n  static getHeader(buffer) {\n    // Must be at least four bytes.\n    if (buffer.length < 4) return null;\n\n    // Frame sync (all bits must be set): `11111111|111`:\n    if (buffer[0] !== 0xff || buffer[1] < 0xe0) return null;\n\n    // Byte (2 of 4)\n    // * `111BBCCD`\n    // * `...BB...`: MPEG Audio version ID\n    // * `.....CC.`: Layer description\n    // * `.......D`: Protection bit (0 - Protected by CRC (16bit CRC follows header), 1 = Not protected)\n    const mpegVersionBits = buffer[1] & 0b00011000;\n    const layerBits = buffer[1] & 0b00000110;\n    const protectionBit = buffer[1] & 0b00000001;\n\n    const header = {};\n    header.length = 4;\n\n    // Mpeg version (1, 2, 2.5)\n    const mpegVersion = MPEGHeader.mpegVersions[mpegVersionBits];\n    if (mpegVersion.description === \"reserved\") return null;\n\n    // Layer (I, II, III)\n    if (MPEGHeader.layers[layerBits].description === \"reserved\") return null;\n    const layer = {\n      ...MPEGHeader.layers[layerBits],\n      ...MPEGHeader.layers[layerBits][mpegVersion.layers],\n    };\n\n    header.mpegVersion = mpegVersion.description;\n    header.layer = layer.description;\n    header.sampleLength = layer.sampleLength;\n    header.protection = MPEGHeader.protection[protectionBit];\n\n    // Byte (3 of 4)\n    // * `EEEEFFGH`\n    // * `EEEE....`: Bitrate index. 1111 is invalid, everything else is accepted\n    // * `....FF..`: Sample rate\n    // * `......G.`: Padding bit, 0=frame not padded, 1=frame padded\n    // * `.......H`: Private bit.\n    const bitrateBits = buffer[2] & 0b11110000;\n    const sampleRateBits = buffer[2] & 0b00001100;\n    const paddingBit = buffer[2] & 0b00000010;\n    const privateBit = buffer[2] & 0b00000001;\n\n    header.bitrate = MPEGHeader.bitrateMatrix[bitrateBits][layer.bitrateIndex];\n    if (header.bitrate === \"bad\") return null;\n\n    header.sampleRate = mpegVersion.sampleRates[sampleRateBits];\n    if (header.sampleRate === \"reserved\") return null;\n\n    header.framePadding = paddingBit >> 1 && layer.framePadding;\n    header.isPrivate = !!privateBit;\n\n    header.dataByteLength = Math.floor(\n      (125 * header.bitrate * header.sampleLength) / header.sampleRate +\n        header.framePadding\n    );\n    if (!header.dataByteLength) return null;\n\n    // Byte (4 of 4)\n    // * `IIJJKLMM`\n    // * `II......`: Channel mode\n    // * `..JJ....`: Mode extension (only if joint stereo)\n    // * `....K...`: Copyright\n    // * `.....L..`: Original\n    // * `......MM`: Emphasis\n    const channelModeBits = buffer[3] & 0b11000000;\n    const modeExtensionBits = buffer[3] & 0b00110000;\n    const copyrightBit = buffer[3] & 0b00001000;\n    const originalBit = buffer[3] & 0b00000100;\n    const emphasisBits = buffer[3] & 0b00000011;\n\n    header.channelMode = MPEGHeader.channelModes[channelModeBits].description;\n    header.channels = MPEGHeader.channelModes[channelModeBits].channels;\n    header.modeExtension = layer.modeExtensions[modeExtensionBits];\n    header.isCopyrighted = !!(copyrightBit >> 3);\n    header.isOriginal = !!(originalBit >> 2);\n\n    header.emphasis = MPEGHeader.emphasis[emphasisBits];\n    if (header.emphasis === \"reserved\") return null;\n\n    return new MPEGHeader(header);\n  }\n\n  /**\n   * @private\n   * Call MPEGHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this._bitrate = header.bitrate;\n    this._emphasis = header.emphasis;\n    this._framePadding = header.framePadding;\n    this._isCopyrighted = header.isCopyrighted;\n    this._isOriginal = header.isOriginal;\n    this._isPrivate = header.isPrivate;\n    this._layer = header.layer;\n    this._modeExtension = header.modeExtension;\n    this._mpegVersion = header.mpegVersion;\n    this._protection = header.protection;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\nimport MPEGHeader from \"./MPEGHeader\";\n\nconst headerCache = new Map();\n\nexport default class MPEGFrame extends CodecFrame {\n  constructor(data) {\n    const key = String.fromCharCode(...data.subarray(0, 4));\n    let header = headerCache.get(key);\n\n    if (!header) {\n      header = MPEGHeader.getHeader(data);\n      if (header) headerCache.set(key, header);\n    }\n\n    super(\n      header,\n      header && data.subarray(0, header.dataByteLength),\n      header && header.dataByteLength\n    );\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecParser from \"../CodecParser\";\nimport MPEGFrame from \"./MPEGFrame\";\n\nexport default class MPEGParser extends CodecParser {\n  constructor() {\n    super();\n    this._maxHeaderLength = 4;\n  }\n\n  get codec() {\n    return \"mp3\";\n  }\n\n  parseFrames(data) {\n    return this.fixedLengthFrame(MPEGFrame, data);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://wiki.multimedia.cx/index.php/ADTS\n\nAAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)\n\nAACHeader consists of 7 or 9 bytes (without or with CRC).\nLetter \tLength (bits) \tDescription\nA \t12 \tsyncword 0xFFF, all bits must be 1\nB \t1 \tMPEG Version: 0 for MPEG-4, 1 for MPEG-2\nC \t2 \tLayer: always 0\nD \t1 \tprotection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\nE \t2 \tprofile, the MPEG-4 Audio Object Type minus 1\nF \t4 \tMPEG-4 Sampling Frequency Index (15 is forbidden)\nG \t1 \tprivate bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\nH \t3 \tMPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\nI \t1 \toriginality, set to 0 when encoding, ignore when decoding\nJ \t1 \thome, set to 0 when encoding, ignore when decoding\nK \t1 \tcopyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\nL \t1 \tcopyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\nM \t13 \tframe length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\nO \t11 \tBuffer fullness // 0x7FF for VBR\nP \t2 \tNumber of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\nQ \t16 \tCRC if protection absent is 0 \n*/\n\nimport CodecHeader from \"../CodecHeader\";\n\nexport default class AACHeader extends CodecHeader {\n  static mpegVersion = {\n    0b00000000: \"MPEG-4\",\n    0b00001000: \"MPEG-2\",\n  };\n\n  static layer = {\n    0b00000000: \"valid\",\n    0b00000010: \"bad\",\n    0b00000100: \"bad\",\n    0b00000110: \"bad\",\n  };\n\n  static protection = {\n    0b00000000: \"16bit CRC\",\n    0b00000001: \"none\",\n  };\n\n  static profile = {\n    0b00000000: \"AAC Main\",\n    0b01000000: \"AAC LC (Low Complexity)\",\n    0b10000000: \"AAC SSR (Scalable Sample Rate)\",\n    0b11000000: \"AAC LTP (Long Term Prediction)\",\n  };\n\n  static sampleRates = {\n    0b00000000: \"96000\",\n    0b00000100: \"88200\",\n    0b00001000: \"64000\",\n    0b00001100: \"48000\",\n    0b00010000: \"44100\",\n    0b00010100: \"32000\",\n    0b00011000: \"24000\",\n    0b00011100: \"22050\",\n    0b00100000: \"16000\",\n    0b00100100: \"12000\",\n    0b00101000: \"11025\",\n    0b00101100: \"8000\",\n    0b00110000: \"7350\",\n    0b00110100: \"reserved\",\n    0b00111000: \"reserved\",\n    0b00111100: \"frequency is written explicitly\",\n  };\n\n  static channelMode = {\n    0b000000000: { channels: 0, description: \"Defined in AOT Specific Config\" },\n    0b001000000: { channels: 1, description: \"front-center\" },\n    0b010000000: { channels: 2, description: \"front-left, front-right\" },\n    0b011000000: {\n      channels: 3,\n      description: \"front-center, front-left, front-right\",\n    },\n    0b100000000: {\n      channels: 4,\n      description: \"front-center, front-left, front-right, back-center\",\n    },\n    0b101000000: {\n      channels: 5,\n      description:\n        \"front-center, front-left, front-right, back-left, back-right\",\n    },\n    0b110000000: {\n      channels: 6,\n      description:\n        \"front-center, front-left, front-right, back-left, back-right, LFE-channel\",\n    },\n    0b111000000: {\n      channels: 8,\n      description:\n        \"front-center, front-left, front-right, side-left, side-right, back-left, back-right, LFE-channel\",\n    },\n  };\n\n  static getHeader(buffer) {\n    // Must be at least seven bytes.\n    if (buffer.length < 7) return null;\n\n    // Frame sync (all bits must be set): `11111111|1111`:\n    if (buffer[0] !== 0xff || buffer[1] < 0xf0) return null;\n\n    // Byte (2 of 7)\n    // * `1111BCCD`\n    // * `....B...`: MPEG Version: 0 for MPEG-4, 1 for MPEG-2\n    // * `.....CC.`: Layer: always 0\n    // * `.......D`: protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\n    const mpegVersionBits = buffer[1] & 0b00001000;\n    const layerBits = buffer[1] & 0b00000110;\n    const protectionBit = buffer[1] & 0b00000001;\n\n    const header = {};\n    header.mpegVersion = AACHeader.mpegVersion[mpegVersionBits];\n\n    header.layer = AACHeader.layer[layerBits];\n    if (header.layer === \"bad\") return null;\n\n    header.protection = AACHeader.protection[protectionBit];\n    header.length = protectionBit ? 7 : 9;\n\n    // Byte (3 of 7)\n    // * `EEFFFFGH`\n    // * `EE......`: profile, the MPEG-4 Audio Object Type minus 1\n    // * `..FFFF..`: MPEG-4 Sampling Frequency Index (15 is forbidden)\n    // * `......G.`: private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\n    const profileBits = buffer[2] & 0b11000000;\n    const sampleRateBits = buffer[2] & 0b00111100;\n    const privateBit = buffer[2] & 0b00000010;\n\n    header.profile = AACHeader.profile[profileBits];\n\n    header.sampleRate = AACHeader.sampleRates[sampleRateBits];\n    if (header.sampleRate === \"reserved\") return null;\n\n    header.isPrivate = !!(privateBit >> 1);\n\n    // Byte (3,4 of 7)\n    // * `.......H|HH......`: MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\n    const channelModeBits =\n      new DataView(Uint8Array.from([buffer[2], buffer[3]]).buffer).getUint16() &\n      0b111000000;\n    header.channelMode = AACHeader.channelMode[channelModeBits].description;\n    header.channels = AACHeader.channelMode[channelModeBits].channels;\n\n    // Byte (4 of 7)\n    // * `HHIJKLMM`\n    // * `..I.....`: originality, set to 0 when encoding, ignore when decoding\n    // * `...J....`: home, set to 0 when encoding, ignore when decoding\n    // * `....K...`: copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\n    // * `.....L..`: copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\n    const originalBit = buffer[3] & 0b00100000;\n    const homeBit = buffer[3] & 0b00001000;\n    const copyrightIdBit = buffer[3] & 0b00001000;\n    const copyrightIdStartBit = buffer[3] & 0b00000100;\n\n    header.isOriginal = !!(originalBit >> 5);\n    header.isHome = !!(homeBit >> 4);\n    header.copyrightId = !!(copyrightIdBit >> 3);\n    header.copyrightIdStart = !!(copyrightIdStartBit >> 2);\n\n    // Byte (4,5,6 of 7)\n    // * `.......MM|MMMMMMMM|MMM.....`: frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\n    const frameLengthBits =\n      new DataView(\n        Uint8Array.from([0x00, buffer[3], buffer[4], buffer[5]]).buffer\n      ).getUint32() & 0x3ffe0;\n    header.dataByteLength = frameLengthBits >> 5;\n    if (!header.dataByteLength) return null;\n\n    // Byte (6,7 of 7)\n    // * `...OOOOO|OOOOOO..`: Buffer fullness\n    const bufferFullnessBits =\n      new DataView(Uint8Array.from([buffer[5], buffer[6]]).buffer).getUint16() &\n      0x1ffc;\n    header.bufferFullness =\n      bufferFullnessBits === 0x1ffc ? \"VBR\" : bufferFullnessBits >> 2;\n\n    // Byte (7 of 7)\n    // * `......PP` Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\n    header.numberAACFrames = buffer[6] & 0b00000011;\n    header.sampleLength = 1024;\n\n    header.bits = {\n      profileBits,\n      sampleRateBits,\n      channelModeBits,\n    };\n\n    return new AACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call AACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this._bits = header.bits;\n    this._copyrightId = header.copyrightId;\n    this._copyrightIdStart = header.copyrightIdStart;\n    this._bufferFullness = header.bufferFullness;\n    this._isHome = header.isHome;\n    this._isOriginal = header.isOriginal;\n    this._isPrivate = header.isPrivate;\n    this._layer = header.layer;\n    this._mpegVersion = header.mpegVersion;\n    this._numberAACFrames = header.numberAACFrames;\n    this._profile = header.profile;\n    this._protection = header.protection;\n  }\n\n  get audioSpecificConfig() {\n    // Audio Specific Configuration\n    // * `000EEFFF|F0HHH000`:\n    // * `000EE...|........`: Object Type (profileBit + 1)\n    // * `.....FFF|F.......`: Sample Rate\n    // * `........|.0HHH...`: Channel Configuration\n    // * `........|.....0..`: Frame Length (1024)\n    // * `........|......0.`: does not depend on core coder\n    // * `........|.......0`: Not Extension\n    const audioSpecificConfig =\n      ((this._bits.profileBits + 0x40) << 5) |\n      (this._bits.sampleRateBits << 5) |\n      (this._bits.channelModeBits >> 3);\n\n    const bytes = new Uint8Array(2);\n    new DataView(bytes.buffer).setUint16(0, audioSpecificConfig, false);\n    return bytes;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\nimport AACHeader from \"./AACHeader\";\n\nexport default class AACFrame extends CodecFrame {\n  constructor(data) {\n    const header = AACHeader.getHeader(data);\n\n    super(\n      header,\n      header && data.subarray(header.length, header.dataByteLength),\n      header && header.dataByteLength\n    );\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecParser from \"../CodecParser\";\nimport AACFrame from \"./AACFrame\";\n\nexport default class AACParser extends CodecParser {\n  constructor() {\n    super();\n    this._maxHeaderLength = 9;\n  }\n\n  get codec() {\n    return \"mp4a.40.2\";\n  }\n\n  parseFrames(data) {\n    return this.fixedLengthFrame(AACFrame, data);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://xiph.org/ogg/doc/framing.html\n\nAAAAAAAA AAAAAAAA AAAAAAAA AAAAAAAA BBBBBBBB 00000CDE\n\n(LSB)                                                             (MSB)\nFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF\nGGGGGGGG GGGGGGGG GGGGGGGG GGGGGGGG\nHHHHHHHH HHHHHHHH HHHHHHHH HHHHHHHH\nIIIIIIII IIIIIIII IIIIIIII IIIIIIII\n\nJJJJJJJJ\nLLLLLLLL...\n\nOGG Page Header\nLetter \tLength (bits) \tDescription\nA \t32 \t0x4f676753, \"OggS\"\nB \t8 \tstream_structure_version\nC \t1 \t(0 no, 1 yes) continued packet\nD \t1 \t(0 no, 1 yes) first page of logical bitstream (bos)\nE \t1 \t(0 no, 1 yes) last page of logical bitstream (eos)\n\nF \t64 \tabsolute granule position\n        Sample Count??\nG   32  stream serial number\nH   32  page sequence no\nI   32  page checksum\nJ   8   Number of page segments in the segment table\nL   n   Segment table (n=page_segments+26).\n        Segment table values sum to the total length of the packet.\n        Last value is always < 0xFF. Last lacing value will be 0x00 if evenly divisible by 0xFF.\n        \n*/\n\nexport default class OGGPageHeader {\n  static OggS = 0x4f676753;\n\n  static getHeader(buffer) {\n    // Must be at least 28 bytes.\n    if (buffer.length < 28) return null;\n\n    let headerBytes = [];\n    for (let i = 0; i < 28; i++) {\n      headerBytes.push(buffer[i]);\n    }\n    const view = new DataView(Uint8Array.from(headerBytes).buffer);\n\n    // Bytes (1-4 of 28)\n    // Frame sync (must equal OggS): `AAAAAAAA|AAAAAAAA|AAAAAAAA|AAAAAAAA`:\n    if (view.getUint32(0) !== OGGPageHeader.OggS) {\n      return null;\n    }\n\n    const header = {};\n\n    // Byte (5 of 28)\n    // * `BBBBBBBB`: stream_structure_version\n    header.streamStructureVersion = buffer[4];\n\n    // Byte (6 of 28)\n    // * `00000CDE`\n    // * `00000...`: All zeros\n    // * `.....C..`: (0 no, 1 yes) continued packet\n    // * `......D.`: (0 no, 1 yes) first page of logical bitstream (bos)\n    // * `.......E`: (0 no, 1 yes) last page of logical bitstream (eos)\n    const zeros = buffer[5] & 0b11111000;\n    const continuePacketBit = buffer[5] & 0b00000100;\n    const firstPageBit = buffer[5] & 0b00000010;\n    const lastPageBit = buffer[5] & 0b00000001;\n\n    if (zeros) return null;\n    header.isContinuedPacket = !!(continuePacketBit >> 2);\n    header.isFirstPage = !!(firstPageBit >> 1);\n    header.isLastPage = !!lastPageBit;\n\n    // Byte (7-14 of 28)\n    // * `FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF|FFFFFFFF`\n    // * Absolute Granule Position\n    header.absoluteGranulePosition = view.getBigInt64(6, true);\n\n    // Byte (15-18 of 28)\n    // * `GGGGGGGG|GGGGGGGG|GGGGGGGG|GGGGGGGG`\n    // * Stream Serial Number\n    header.streamSerialNumber = view.getInt32(14, true);\n\n    // Byte (19-22 of 28)\n    // * `HHHHHHHH|HHHHHHHH|HHHHHHHH|HHHHHHHH`\n    // * Page Sequence Number\n    header.pageSequenceNumber = view.getInt32(18, true);\n\n    // Byte (23-26 of 28)\n    // * `IIIIIIII|IIIIIIII|IIIIIIII|IIIIIIII`\n    // * Page Checksum\n    header.pageChecksum = view.getInt32(22, true);\n\n    // Byte (27 of 28)\n    // * `JJJJJJJJ`: Number of page segments in the segment table\n    header.numberPageSegments = buffer[26];\n    header.length = header.numberPageSegments + 27;\n\n    if (header.length > buffer.length) return null;\n\n    header.dataByteLength = 0;\n    for (let i = 0; i < header.numberPageSegments; i++) {\n      header.dataByteLength += buffer[i + 27];\n    }\n\n    return new OGGPageHeader(header);\n  }\n\n  /**\n   * @private\n   * Call OGGPageHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    this._absoluteGranulePosition = header.absoluteGranulePosition;\n    this._dataByteLength = header.dataByteLength;\n    this._isContinuedPacket = header.isContinuedPacket;\n    this._isFirstPage = header.isFirstPage;\n    this._isLastPage = header.isLastPage;\n    this._length = header.length;\n    this._numberPageSegments = header.numberPageSegments;\n    this._pageSequenceNumber = header.pageSequenceNumber;\n    this._pageChecksum = header.pageChecksum;\n    this._streamSerialNumber = header.streamSerialNumber;\n  }\n\n  get absoluteGranulePosition() {\n    return this._absoluteGranulePosition;\n  }\n\n  get dataByteLength() {\n    return this._dataByteLength;\n  }\n\n  get length() {\n    return this._length;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\nimport OGGPageHeader from \"./OGGPageHeader\";\n\nexport default class OGGPage extends CodecFrame {\n  constructor(data) {\n    const oggPage = OGGPageHeader.getHeader(data);\n\n    super(\n      oggPage,\n      oggPage &&\n        data.subarray(oggPage.length, oggPage.length + oggPage.dataByteLength),\n      oggPage && oggPage.length + oggPage.dataByteLength\n    );\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\nimport FlacHeader from \"./FlacHeader\";\n\nexport default class FlacFrame extends CodecFrame {\n  constructor(data) {\n    let header = FlacHeader.getHeader(data);\n\n    super(header, header && data, header && data.length);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecParser from \"../CodecParser\";\nimport OGGPage from \"./OGGPage\";\nimport FlacFrame from \"../flac/FlacFrame\";\n\nexport default class OGGParser extends CodecParser {\n  constructor() {\n    super();\n    this._maxHeaderLength = 283;\n    this._codec = null;\n  }\n\n  get codec() {\n    return this._codec || \"flac,opus\";\n  }\n\n  setCodec(oggPage) {\n    // FLAC\n    if (\n      oggPage.data[0] === 0x7f &&\n      oggPage.data[1] === 0x46 &&\n      oggPage.data[2] === 0x4c &&\n      oggPage.data[3] === 0x41 &&\n      oggPage.data[4] === 0x43\n    ) {\n      this._codec = \"flac\";\n      this._frameClass = FlacFrame;\n      this._maxHeaderLength = 309;\n    }\n  }\n\n  parseFrames(data) {\n    const oggPages = this.fixedLengthFrame(OGGPage, data);\n\n    if (!this._codec && oggPages.frames.length)\n      this.setCodec(oggPages.frames[0]);\n\n    const frames = oggPages.frames.flatMap(\n      ({ data }) =>\n        this.variableLengthFrame(this._frameClass, data, true).frames\n    );\n\n    return { frames, remainingData: oggPages.remainingData };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class ISOBMFFObject {\n  /**\n   * @abstract\n   * @description ISO Base Media File Format Object structure Abstract Class\n   * @param {any} name Name of the object\n   * @param {Array<Uint8>} [contents] Array of bytes to insert into this box\n   * @param {Array<ISOBMFFObject>} [objects] Array of objects to insert into this object\n   */\n  constructor(name, contents, objects) {\n    this._name = name;\n    this._contents = contents;\n    this._objects = objects;\n  }\n\n  get contents() {\n    return this._contents.concat(\n      this._objects.reduce((acc, obj) => acc.concat(obj.contents), [])\n    );\n  }\n\n  /**\n   * @returns {number} Total length of this object and all contents\n   */\n  get length() {\n    return this._objects.reduce(\n      (acc, obj) => acc + obj.length,\n      this.LENGTH_SIZE + this._contents.length\n    );\n  }\n\n  /**\n   * @description Inserts bytes into the contents of this object\n   * @param {Array<Uint>} data Bytes to insert\n   * @param {number} index Position to insert bytes\n   */\n  insertBytes(data, index) {\n    index = index + this.LENGTH_SIZE;\n    this._contents = this._contents\n      .slice(0, index)\n      .concat(data)\n      .concat(this._contents.slice(index));\n  }\n\n  /**\n   * @description Appends data to the end of the contents of this box\n   * @param {Array<Uint>} data Bytes to append\n   */\n  appendBytes(data) {\n    this._contents = this._contents.concat(data);\n  }\n\n  addObject(object) {\n    this._objects.push(object);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\nimport ISOBMFFObject from \"./ISOBMFFObject\";\n\nexport default class Box extends ISOBMFFObject {\n  /**\n   * @description ISO/IEC 14496-12 Part 12 ISO Base Media File Format Box\n   * @param {string} name Name of the box (i.e. 'moov', 'moof', 'traf')\n   * @param {object} params Object containing contents or boxes\n   * @param {Array<Uint8>} [params.contents] Array of bytes to insert into this box\n   * @param {Array<Box>} [params.boxes] Array of boxes to insert into this box\n   */\n  constructor(name, { contents = [], boxes = [] } = {}) {\n    super(name, [...Box.stringToByteArray(name)].concat(contents), boxes);\n\n    this.LENGTH_SIZE = 4;\n  }\n\n  /**\n   * @description Converts a string to a byte array\n   * @param {string} name String to convert\n   * @returns {Uint8Array}\n   */\n  static stringToByteArray(name) {\n    return [...name].map((char) => char.charCodeAt(0));\n  }\n\n  /**\n   * @description Converts a JavaScript number to Uint32\n   * @param {number} number Number to convert\n   * @returns {Uint32}\n   */\n  static getUint32(number) {\n    const bytes = new Uint8Array(4);\n    new DataView(bytes.buffer).setUint32(0, number);\n    return bytes;\n  }\n\n  /**\n   * @description Converts a JavaScript number to Uint32\n   * @param {number} number Number to convert\n   * @returns {Uint32}\n   */\n  static getUint16(number) {\n    const bytes = new Uint8Array(2);\n    new DataView(bytes.buffer).setUint16(0, number);\n    return bytes;\n  }\n\n  /**\n   * @returns {Array<Uint8>} Contents of this box\n   */\n  get contents() {\n    const contents = super.contents;\n\n    return [...Box.getUint32(this.LENGTH_SIZE + contents.length)].concat(\n      contents\n    );\n  }\n\n  /**\n   * @description Adds a Box to this box\n   * @param {Box} box Box to add\n   */\n  addBox(box) {\n    if (box.constructor !== Box) {\n      console.error(\"Only an object of type Box can be appended\");\n      throw new Error(\"Not a box\");\n    }\n\n    this.addObject(box);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport ISOBMFFObject from \"./ISOBMFFObject\";\n\nexport default class ESTag extends ISOBMFFObject {\n  constructor(tagNumber, { contents = [], tags = [] } = {}) {\n    super(tagNumber, contents, tags);\n    this.LENGTH_SIZE = 1;\n  }\n\n  /**\n   * @returns {Uint8Array} Contents of this stream descriptor tag\n   */\n  get contents() {\n    const contents = super.contents;\n\n    /* prettier-ignore */\n    return [\n      this._name,\n      0x80,0x80,0x80,\n      contents.length,\n    ].concat(contents);\n  }\n\n  addTag(tag) {\n    this.addObject(tag);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Box from \"./isobmff-object/Box\";\nimport ESTag from \"./isobmff-object/ESTag\";\n\n/**\n * @description Fragmented ISO Base Media File Format Builder is a class to\n * wrap codec frames in a MP4 container for streaming MP3 / AAC compatibility in Firefox.\n */\nexport default class ISOBMFFBuilder {\n  constructor(mimeType) {\n    this._mimeType = mimeType;\n  }\n\n  static getBoxContents(boxes) {\n    return Uint8Array.from(\n      boxes.reduce((acc, box) => acc.concat(box.contents), [])\n    );\n  }\n\n  getCodecBox(header) {\n    /**\n     * @description Codec mapping for `esds` box\n     * https://stackoverflow.com/questions/3987850/mp4-atom-how-to-discriminate-the-audio-codec-is-it-aac-or-mp3\n     * https://web.archive.org/web/20180312163039/http://mp4ra.org/object.html\n     * 0x40 - MPEG-4 Audio\n     * 0x6b - MPEG-1 Audio (MPEG-1 Layers 1, 2, and 3)\n     * 0x69 - MPEG-2 Backward Compatible Audio (MPEG-2 Layers 1, 2, and 3)\n     * 0x67 - MPEG-2 AAC LC\n     */\n    switch (this._mimeType) {\n      case 'audio/mp4;codecs=\"mp3\"':\n        return this.getMp4a(header, 0x6b);\n      case 'audio/mp4;codecs=\"mp4a.40.2\"':\n        return this.getMp4a(header, 0x40);\n      case 'audio/mp4;codecs=\"opus\"':\n        return this.getOpus(header);\n      case 'audio/mp4;codecs=\"flac\"':\n        return this.getFlaC(header);\n    }\n  }\n\n  getOpus(header) {\n    // https://opus-codec.org/docs/opus_in_isobmff.html\n    return new Box(\"Opus\", {\n      /* prettier-ignore */\n      contents: [\n        0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,0x01, // data reference index\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,0x00,0x00,0x00, // reserved\n        0x00,header.channels, // channel count\n        0x00,header.sampleSize, // PCM bitrate (16bit)\n        0x00,0x00, // predefined\n        0x00,0x00, // reserved\n        ...Box.getUint16(header.sampleRate),0x00,0x00, // sample rate 16.16 fixed-point\n      ],\n      boxes: [\n        new Box(\"dOps\", {\n          /* prettier-ignore */\n          contents: [0x00, // version\n            header.channels, // output channel count\n            0x00,0x00, // pre skip\n            ...Box.getUint32(header.sampleRate),// input sample rate\n            0x00,0x00, // output gain\n            // channel mapping family int(8)\n            // if (ChannelMappingFamily != 0) {\n            //   stream count int(8)\n            //   coupled count int(8)\n            //   channel mapping int(8 * OutputChannelCount) ChannelMapping\n            // }\n          ],\n        }),\n      ],\n    });\n  }\n\n  getFlaC(header) {\n    // https://github.com/xiph/flac/blob/master/doc/isoflac.txt\n    return new Box(\"fLaC\", {\n      /* prettier-ignore */\n      contents: [\n        0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,0x01, // data reference index\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,header.channels, // channel count\n        0x00,header.sampleSize, // PCM bitrate (16bit)\n        0x00,0x00, // predefined\n        0x00,0x00, // reserved\n        ...Box.getUint16(header.sampleRate),0x00,0x00, // sample rate 16.16 fixed-point\n        /*\n        When the bitstream's native sample rate is greater\n        than the maximum expressible value of 65535 Hz,\n        the samplerate field shall hold the greatest\n        expressible regular division of that rate. I.e.\n        the samplerate field shall hold 48000.0 for\n        native sample rates of 96 and 192 kHz. In the\n        case of unusual sample rates which do not have\n        an expressible regular division, the maximum value\n        of 65535.0 Hz should be used.\n        */\n      ],\n      boxes: [\n        new Box(\"dfLa\", {\n          /* prettier-ignore */\n          contents: [0x00, // version\n            0x00,0x00,0x00, // flags\n            // * `A........` Last metadata block flag\n            // * `.BBBBBBBB` BlockType\n            0x80, // last metadata block, stream info\n            0x00,0x00,0x22, // Length\n            ...Box.getUint16(header.blockSize), // maximum block size\n            ...Box.getUint16(header.blockSize), // minimum block size\n            0x00,0x00,0x00, // maximum frame size\n            0x00,0x00,0x00, // minimum frame size\n            ...Box.getUint32((header.sampleRate << 12) | (header.channels << 8) | ((header.sampleSize - 1) << 4)), // 20bits sample rate, 3bits channels, 5bits samplesize - 1\n            0x00,0x00,0x00,0x00, // total samples\n            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // md5 of stream\n          ],\n        }),\n      ],\n    });\n  }\n\n  getMp4a(header, esdsCodec) {\n    const streamDescriptorTag = new ESTag(4, {\n      /* prettier-ignore */\n      contents: [\n        esdsCodec,\n        0x15, // stream type(6bits)=5 audio, flags(2bits)=1\n        0x00,0x00,0x00, // 24bit buffer size\n        0x00,0x00,0x00,0x00, // max bitrate\n        0x00,0x00,0x00,0x00, // avg bitrate\n      ],\n    });\n\n    // mp4a.40.2\n    if (esdsCodec === 0x40) {\n      streamDescriptorTag.addTag(\n        new ESTag(5, {\n          contents: [...header.audioSpecificConfig],\n        })\n      );\n    }\n\n    return new Box(\"mp4a\", {\n      /* prettier-ignore */\n      contents: [0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,0x01, // data reference index\n        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n        0x00,header.channels, // channel count\n        0x00,0x10, // PCM bitrate (16bit)\n        0x00,0x00, // Compression ID\n        0x00,0x00, // Packet size\n        ...Box.getUint16(header.sampleRate),0x00,0x00], // sample rate unsigned floating point\n      boxes: [\n        new Box(\"esds\", {\n          contents: [0x00, 0x00, 0x00, 0x00],\n          boxes: [\n            new ESTag(3, {\n              contents: [\n                0x00,\n                0x01, // ES_ID = 1\n                0x00, // flags etc = 0\n              ],\n              tags: [\n                streamDescriptorTag,\n                new ESTag(6, {\n                  contents: [0x02],\n                }),\n              ],\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n\n  /**\n   * @param {Header} header Codec header\n   * @returns {Uint8Array} Filetype and Movie Box information for the codec\n   */\n  getMovieBox(header) {\n    const sampleRate = Box.getUint32(header.sampleRate);\n\n    const boxes = [\n      new Box(\"ftyp\", {\n        /* prettier-ignore */\n        contents: [...Box.stringToByteArray(\"iso5\"), // major brand\n          0x00,0x00,0x02,0x00, // minor version\n          ...Box.stringToByteArray(\"iso6mp41\")], // compatible brands\n      }),\n      new Box(\"moov\", {\n        boxes: [\n          new Box(\"mvhd\", {\n            /* prettier-ignore */\n            contents: [0x00, // version\n              0x00,0x00,0x00, // flags\n              0x00,0x00,0x00,0x00, // creation time\n              0x00,0x00,0x00,0x00, // modification time\n              0x00,0x00,0x03,0xe8, // timescale\n              0x00,0x00,0x00,0x00, // duration\n              0x00,0x01,0x00,0x00, // rate\n              0x01,0x00, // volume\n              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n              0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // a b u (matrix structure)\n              0x00,0x00,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, // c d v\n              0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x00, // x y w\n              0x00,0x00,0x00,0x00, // preview time\n              0x00,0x00,0x00,0x00, // preview duration\n              0x00,0x00,0x00,0x00, // poster time\n              0x00,0x00,0x00,0x00, // selection time\n              0x00,0x00,0x00,0x00, // selection duration\n              0x00,0x00,0x00,0x00, // current time\n              0x00,0x00,0x00,0x02], // next track\n          }),\n          new Box(\"trak\", {\n            boxes: [\n              new Box(\"tkhd\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x00,0x00,0x03, // flags (0x01 - track enabled, 0x02 - track in movie, 0x04 - track in preview, 0x08 - track in poster)\n                  0x00,0x00,0x00,0x00, // creation time\n                  0x00,0x00,0x00,0x00, // modification time\n                  0x00,0x00,0x00,0x01, // track id\n                  0x00,0x00,0x00,0x00, // reserved\n                  0x00,0x00,0x00,0x00, // duration\n                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n                  0x00,0x00, // layer\n                  0x00,0x01, // alternate group\n                  0x01,0x00, // volume\n                  0x00,0x00, // reserved\n                  0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // a b u (matrix structure)\n                  0x00,0x00,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, // c d v \n                  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x00, // x y w\n                  0x00,0x00,0x00,0x00, // track width\n                  0x00,0x00,0x00,0x00], // track height\n              }),\n              new Box(\"mdia\", {\n                boxes: [\n                  new Box(\"mdhd\", {\n                    /* prettier-ignore */\n                    contents: [0x00, // version\n                      0x00,0x00,0x00, // flags\n                      0x00,0x00,0x00,0x00, // creation time (in seconds since midnight, January 1, 1904)\n                      0x00,0x00,0x00,0x00, // modification time\n                      ...sampleRate, // time scale\n                      0x00,0x00,0x00,0x00, // duration\n                      0x55,0xc4, // language\n                      0x00,0x00], // quality\n                  }),\n                  new Box(\"hdlr\", {\n                    /* prettier-ignore */\n                    contents: [0x00, // version\n                      0x00,0x00,0x00, // flags\n                      ...Box.stringToByteArray('mhlr'), // component type (mhlr, dhlr)\n                      ...Box.stringToByteArray('soun'), // component subtype (vide' for video data, 'soun' for sound data or ‘subt’ for subtitles)\n                      0x00,0x00,0x00,0x00, // component manufacturer\n                      0x00,0x00,0x00,0x00, // component flags\n                      0x00,0x00,0x00,0x00, // component flags mask\n                      0x00], // String that specifies the name of the component, terminated by a null character\n                  }),\n                  new Box(\"minf\", {\n                    boxes: [\n                      new Box(\"stbl\", {\n                        boxes: [\n                          new Box(\"stsd\", {\n                            // Sample description atom\n                            /* prettier-ignore */\n                            contents: [0x00, // version\n                              0x00,0x00,0x00, // flags\n                              0x00,0x00,0x00,0x01], // entry count\n                            boxes: [this.getCodecBox(header)],\n                          }),\n                          new Box(\"stts\", {\n                            // Time-to-sample atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stsc\", {\n                            // Sample-to-chunk atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stsz\", {\n                            // Sample Size atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n                              0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stco\", {\n                            // Chunk Offset atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                        ],\n                      }),\n                    ],\n                  }),\n                ],\n              }),\n            ],\n          }),\n          new Box(\"mvex\", {\n            boxes: [\n              new Box(\"trex\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x00, // flags\n                  0x00,0x00,0x00,0x01, // track id\n                  0x00,0x00,0x00,0x01, // default_sample_description_index\n                  0x00,0x00,0x00,0x00, // default_sample_duration\n                  0x00,0x00,0x00,0x00, // default_sample_size;\n                  0x00,0x00,0x00,0x00], // default_sample_flags;\n              }),\n            ],\n          }),\n        ],\n      }),\n    ];\n\n    return ISOBMFFBuilder.getBoxContents(boxes);\n  }\n\n  static getMediaDataBox(frames) {\n    let offset = 8;\n    const framesLength =\n      frames.reduce((acc, { data }) => acc + data.length, 0) + offset;\n\n    const frameData = new Uint8Array(framesLength);\n    frameData.set([\n      ...Box.getUint32(framesLength),\n      ...Box.stringToByteArray(\"mdat\"),\n    ]);\n\n    for (const { data } of frames) {\n      frameData.set(data, offset);\n      offset += data.length;\n    }\n\n    return frameData;\n  }\n\n  /**\n   * @description Wraps codec frames into a Movie Fragment\n   * @param {Array<Frame>} frames Frames to contain in this Movie Fragment\n   * @returns {Uint8Array} Movie Fragment containing the frames\n   */\n  wrapFrames(frames) {\n    const trun = new Box(\"trun\", {\n      /* prettier-ignore */\n      contents: [0x00, // version\n        0x00,0x02,0x01, // flags\n        // * `ABCD|00000E0F`\n        // * `A...|........` sample‐composition‐time‐offsets‐present\n        // * `.B..|........` sample‐flags‐present\n        // * `..C.|........` sample‐size‐present\n        // * `...D|........` sample‐duration‐present\n        // * `....|.....E..` first‐sample‐flags‐present\n        // * `....|.......G` data-offset-present\n        ...Box.getUint32(frames.length), // number of samples\n        ...frames.flatMap(({data}) => [...Box.getUint32(data.length)]), // samples lengths per frame\n      ],\n    });\n\n    const boxes = [\n      new Box(\"moof\", {\n        boxes: [\n          new Box(\"mfhd\", {\n            /* prettier-ignore */\n            contents: [0x00,0x00,0x00,0x00,\n              0x00,0x00,0x00,0x00], // sequence number\n          }),\n          new Box(\"traf\", {\n            boxes: [\n              new Box(\"tfhd\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x02,0x00,0x08, // flags\n                  // * `AB|00000000|00CDE0FG`\n                  // * `A.|........|........` default-base-is-moof\n                  // * `.B|........|........` duration-is-empty\n                  // * `..|........|..C.....` default-sample-flags-present\n                  // * `..|........|...D....` default-sample-size-present\n                  // * `..|........|....E...` default-sample-duration-present\n                  // * `..|........|......F.` sample-description-index-present\n                  // * `..|........|.......G` base-data-offset-present\n                  0x00,0x00,0x00,0x01, // track id\n                  ...Box.getUint32(frames[0].header.sampleLength), // default sample duration\n                ],\n              }),\n              new Box(\"tfdt\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x00,0x00,0x00, // flags\n                  0x00,0x00,0x00,0x00], // base media decode time\n              }),\n              trun,\n            ],\n          }),\n        ],\n      }),\n    ];\n\n    trun.insertBytes([...Box.getUint32(boxes[0].length + 12)], 8); // data offset (moof length + mdat length + mdat)\n\n    const moof = ISOBMFFBuilder.getBoxContents(boxes);\n    const mdat = ISOBMFFBuilder.getMediaDataBox(frames);\n\n    const fragment = new Uint8Array(moof.length + mdat.length);\n    fragment.set(moof);\n    fragment.set(mdat, moof.length);\n\n    return fragment;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MPEGParser from \"./codecs/mpeg/MPEGParser\";\nimport AACParser from \"./codecs/aac/AACParser\";\nimport OGGParser from \"./codecs/ogg/OGGParser\";\n\nimport ISOBMFFBuilder from \"./isobmff/ISOBMFFBuilder\";\n\n/**\n * @description Generator that takes in MPEG 1/2, AAC, or Ogg FLAC and yields Fragmented MP4 (ISOBMFF)\n */\nexport default class FragmentedMPEG {\n  static MIN_FRAMES = 4;\n  static MIN_FRAMES_LENGTH = 1022;\n\n  constructor(mimeType) {\n    if (mimeType.match(/aac/)) {\n      this._codecParser = new AACParser();\n    } else if (mimeType.match(/mpeg/)) {\n      this._codecParser = new MPEGParser();\n    } else if (mimeType.match(/ogg/)) {\n      this._codecParser = new OGGParser();\n    }\n\n    this._frames = [];\n    this._codecData = new Uint8Array(0);\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  get mimeType() {\n    return `audio/mp4;codecs=\"${this._codecParser.codec}\"`;\n  }\n\n  /**\n   * @private\n   * @description Appends two buffers\n   * @param {Uint8Array} buf1\n   * @param {Uint8Array} buf2\n   */\n  static appendBuffers(buf1, buf2) {\n    const buf = new Uint8Array(buf1.length + buf2.length);\n    buf.set(buf1);\n    buf.set(buf2, buf1.length);\n\n    return buf;\n  }\n\n  /**\n   * @description Returns an iterator for the passed in codec data.\n   * @param {Uint8Array} chunk Next chunk of codec data to read\n   * @returns {IterableIterator} Iterator that operates over the codec data.\n   * @yields {Uint8Array} Movie Fragments containing codec frames\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @private\n   * @description Internal generator.\n   * @yields {Uint8Array} Movie Fragments containing codec frames\n   */\n  *_generator() {\n    let frames;\n    // start parsing out frames\n    while (!frames) {\n      yield* this._sendReceiveData();\n      frames = this._parseFrames();\n    }\n\n    this._ISOBMFFBuilder = new ISOBMFFBuilder(this.mimeType);\n\n    // yield the movie box along with a movie fragment containing frames\n    let fMP4 = FragmentedMPEG.appendBuffers(\n      this._ISOBMFFBuilder.getMovieBox(frames[0].header),\n      this._ISOBMFFBuilder.wrapFrames(frames)\n    );\n\n    // yield movie fragments containing frames\n    while (true) {\n      yield* this._sendReceiveData(fMP4);\n      frames = this._parseFrames();\n      fMP4 = frames ? this._ISOBMFFBuilder.wrapFrames(frames) : null;\n    }\n  }\n\n  /**\n   * @private\n   * @param {Uint8Array} fMP4 Fragmented MP4 to send\n   * @yields {Uint8Array} Fragmented MP4\n   */\n  *_sendReceiveData(fMP4) {\n    let codecData = yield fMP4;\n\n    while (!codecData) {\n      codecData = yield;\n    }\n\n    this._codecData = FragmentedMPEG.appendBuffers(this._codecData, codecData);\n  }\n\n  /**\n   * @private\n   */\n  _parseFrames() {\n    const { frames, remainingData } = this._codecParser.parseFrames(\n      this._codecData\n    );\n\n    this._frames = this._frames.concat(frames);\n    this._codecData = this._codecData.subarray(remainingData);\n\n    if (\n      this._frames.length >= FragmentedMPEG.MIN_FRAMES &&\n      this._frames.reduce((acc, frame) => acc + frame.data.length, 0) >=\n        FragmentedMPEG.MIN_FRAMES_LENGTH\n    ) {\n      const frames = this._frames;\n      this._frames = [];\n      return frames;\n    }\n  }\n}\n","import IcecastMetadataQueue from \"./metadata-js/IcecastMetadataQueue\";\nimport IcecastReadableStream from \"./metadata-js/IcecastReadableStream\";\nimport FragmentedMPEG from \"../FragmentedMPEG/FragmentedMPEG\";\n\nexport default class MetadataPlayer {\n  constructor({ onMetadataUpdate, audioElement }) {\n    this._icecastMetadataQueue = new IcecastMetadataQueue({\n      onMetadataUpdate: (meta) => onMetadataUpdate(meta),\n    });\n    this._audioElement = audioElement;\n    this._onMetadataUpdate = onMetadataUpdate;\n\n    this._playing = false;\n  }\n\n  get playing() {\n    return this._playing;\n  }\n\n  async _createMediaSource(mimeType) {\n    this._mediaSource = new MediaSource();\n    this._audioElement.src = URL.createObjectURL(this._mediaSource);\n\n    return new Promise((resolve) => {\n      this._mediaSource.addEventListener(\n        \"sourceopen\",\n        () => {\n          this._sourceBuffer = this._mediaSource.addSourceBuffer(mimeType);\n          this._sourceBuffer.mode = \"sequence\";\n          resolve();\n        },\n        { once: true }\n      );\n    });\n  }\n\n  async _destroyMediaSource() {\n    this._mediaSource = null;\n    this._playPromise &&\n      (await this._playPromise\n        .then(() => this._audioElement.removeAttribute(\"src\"))\n        .then(() => this._audioElement.load())\n        .catch(() => {}));\n  }\n\n  async _waitForSourceBuffer() {\n    return new Promise((resolve) => {\n      this._sourceBuffer.addEventListener(\"updateend\", resolve, { once: true });\n    });\n  }\n\n  async _appendSourceBuffer(chunk, mimeType) {\n    if (!this._mediaSource) await this._createMediaSource(mimeType);\n\n    this._sourceBuffer.appendBuffer(chunk);\n    await this._waitForSourceBuffer();\n\n    // buffer 2 seconds to remove flac skips\n    if (\n      this._sourceBuffer.buffered.length &&\n      this._sourceBuffer.buffered.end(0) > 2\n    ) {\n      this._playPromise = this._audioElement.play();\n    }\n\n    if (this._audioElement.currentTime > 0) {\n      this._sourceBuffer.remove(0, this._audioElement.currentTime);\n      await this._waitForSourceBuffer();\n    }\n  }\n\n  async fetchStream(endpoint) {\n    this._controller = new AbortController();\n\n    return fetch(endpoint, {\n      method: \"GET\",\n      headers: {\n        \"Icy-MetaData\": \"1\",\n      },\n      signal: this._controller.signal,\n    });\n  }\n\n  getMediaSource({ headers }) {\n    const mimeType = headers.get(\"content-type\");\n    this._fMP4Wrapper = new FragmentedMPEG(mimeType);\n\n    if (MediaSource.isTypeSupported(mimeType)) {\n      this._onStream = ({ stream }) =>\n        this._appendSourceBuffer(stream, mimeType);\n    } else if (MediaSource.isTypeSupported(this._fMP4Wrapper.mimeType)) {\n      this._onStream = async ({ stream }) => {\n        for await (const movieFragment of this._fMP4Wrapper.iterator(stream)) {\n          await this._appendSourceBuffer(\n            movieFragment,\n            this._fMP4Wrapper.mimeType\n          );\n        }\n      };\n    } else {\n      throw new Error(\n        `Your browser does not support MediaSource ${mimeType}. Try using Google Chrome.`\n      );\n    }\n  }\n\n  play(endpoint, icyMetaInt) {\n    if (this._playing) this.stop();\n    this._playing = true;\n\n    this.fetchStream(endpoint)\n      .then(async (res) => {\n        this.getMediaSource(res);\n        this._isInitialMetadata = true;\n\n        await new IcecastReadableStream(res, {\n          icyMetaInt,\n          onStream: this._onStream,\n          onMetadata: (value) => {\n            this._isInitialMetadata\n              ? this._onMetadataUpdate(value.metadata)\n              : this._icecastMetadataQueue.addMetadata(\n                  value,\n                  this._sourceBuffer.timestampOffset -\n                    this._audioElement.currentTime\n                );\n            this._isInitialMetadata = false;\n          },\n        }).startReading();\n      })\n      .catch(async (e) => {\n        await this._destroyMediaSource();\n        this._icecastMetadataQueue.purgeMetadataQueue();\n        if (e.name !== \"AbortError\") {\n          this._onMetadataUpdate(`Error Connecting: ${e.message}`);\n        }\n      });\n  }\n\n  stop() {\n    this._playing = false;\n    this._controller.abort();\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\"\n});\n\nvar SvgPlay = function SvgPlay(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPlay, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/play.0187bd2f.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z\"\n});\n\nvar SvgPause = function SvgPause(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPause, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/pause.b0b65543.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useLayoutEffect, useEffect, useState } from \"react\";\nimport AudioSpectrum from \"react-audio-spectrum\";\nimport MetadataPlayer from \"../icecast/MetadataPlayer\";\nimport { ReactComponent as Play } from \"./play.svg\";\nimport { ReactComponent as Pause } from \"./pause.svg\";\nimport styles from \"./Player.module.css\";\nimport { useCallback } from \"react\";\n\nconst SELECT_STATION = \"Select a station\";\nconst SELECT_OR_PLAY = \"Select a station or press play\";\nconst LOADING = \"Loading...\";\nconst VISIT_STATION = \"Visit this station at \";\n\nconst useMetadataPlayer = (station, onMetadataUpdate, audioElement) => {\n  const [metadataPlayer] = useState(\n    new MetadataPlayer({\n      onMetadataUpdate: (meta) => {\n        console.log(meta);\n        onMetadataUpdate(meta);\n      },\n      audioElement,\n    })\n  );\n\n  const play = useCallback(() => {\n    onMetadataUpdate(LOADING);\n    metadataPlayer.play(station.endpoint, station.metaInt);\n  }, [onMetadataUpdate, metadataPlayer, station]);\n\n  const stop = useCallback(() => {\n    onMetadataUpdate(SELECT_OR_PLAY);\n    metadataPlayer.stop();\n  }, [onMetadataUpdate, metadataPlayer]);\n\n  useEffect(() => {\n    station && play();\n  }, [station, play]);\n\n  const toggle = () => (metadataPlayer.playing ? stop() : play());\n\n  return [metadataPlayer.playing, toggle];\n};\n\nexport default ({ station }) => {\n  const audioElement = new Audio();\n  const [[audioHeight, audioWidth], setSpectrumSize] = useState([0, 0]);\n  const [meters, setMeters] = useState(0);\n  const [metadata, setMetadata] = useState(SELECT_STATION);\n  const [isPlaying, toggle] = useMetadataPlayer(\n    station,\n    setMetadata,\n    audioElement\n  );\n\n  useLayoutEffect(() => {\n    const updateSize = () => {\n      const player = document.getElementById(\"player\");\n      setMeters(Math.floor(player.clientWidth / 32));\n      setSpectrumSize([player.clientHeight + 6, player.clientWidth]);\n    };\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, []);\n\n  return (\n    <div id={\"player\"} className={styles.player}>\n      <div className={styles.spectrum}>\n        <AudioSpectrum\n          height={audioHeight}\n          width={audioWidth}\n          audioEle={audioElement}\n          capColor={\"red\"}\n          capHeight={1}\n          meterWidth={2}\n          meterCount={(meters + 1) * 32}\n          meterColor={[\n            { stop: 0, color: \"#f00\" },\n            { stop: 0.3, color: \"#0CD7FD\" },\n            { stop: 1, color: \"red\" },\n          ]}\n          gap={1}\n        />\n      </div>\n      <button disabled={!station} className={styles.button} onClick={toggle}>\n        {isPlaying ? <Pause /> : <Play />}\n      </button>\n      <div>\n        <p className={styles.metadata}>\n          {typeof metadata === \"object\" ? metadata.StreamTitle : metadata}\n        </p>\n        {station?.link && (\n          <div className={styles.visitStation}>\n            {VISIT_STATION}\n            <a\n              className={styles.link}\n              href={station.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {station.name}\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styles from \"./StationSelector.module.css\";\n\nconst Station = ({ id, station, changeStation }) => (\n  <div className={styles.station}>\n    <input\n      type=\"radio\"\n      className={styles.stationRadio}\n      id={id}\n      name=\"stations\"\n      onChange={() => changeStation(station)}\n    ></input>\n    <label className={styles.stationLabel} htmlFor={id}>\n      <div className={styles.stationName}>{station.name}</div>\n      <div className={styles.stationDescription}>{station.description}</div>\n    </label>\n  </div>\n);\n\nexport default (props) =>\n  props.stations.map((station, idx) => (\n    <Station\n      key={idx}\n      station={station}\n      id={idx}\n      changeStation={props.changeStation}\n    />\n  ));\n","import React from \"react\";\nimport styles from \"./About.module.css\";\n\nexport default () => (\n  <div className={styles.about}>\n    <a\n      className={styles.link}\n      href=\"https://github.com/eshaz/icecast-metadata-js\"\n    >\n      <div>icecast-metadata-js</div>\n      <div className={styles.subLink}>\n        https://github.com/eshaz/icecast-metadata-js\n      </div>\n    </a>\n    <div className={styles.description}>\n      Javascript library that reads, parses, and queues realtime metadata from\n      an Icecast stream.\n    </div>\n    <div className={styles.disclaimer}>\n      Stations are presented here for demonstration purposes only.\n    </div>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport Player from \"./Player/Player\";\nimport StationSelector from \"./StationSelector/StationSelector\";\nimport stations from \"./stations.json\";\nimport styles from \"./App.module.css\";\nimport About from \"./About/About\";\n\nfunction App() {\n  const [station, setStation] = useState();\n\n  return (\n    <>\n      <header className={styles.header}>\n        <About />\n      </header>\n      <StationSelector stations={stations} changeStation={setStation} />\n      <footer className={styles.footer}>\n        <Player station={station}></Player>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
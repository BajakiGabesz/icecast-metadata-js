{"version":3,"sources":["Player/Player.module.css","StationSelector/StationSelector.module.css","About/About.module.css","App.module.css","icecast/metadata-js/IcecastMetadataQueue.js","icecast/metadata-js/MetadataBuffer.js","icecast/metadata-js/IcecastMetadataReader.js","icecast/metadata-js/IcecastReadableStream.js","FragmentedMPEG/mpeg/Header.js","FragmentedMPEG/mpeg/Frame.js","FragmentedMPEG/mpeg/MPEGParser.js","FragmentedMPEG/isobmff/Box.js","FragmentedMPEG/isobmff/FragmentedISOBMFFBuilder.js","FragmentedMPEG/FragmentedMPEG.js","icecast/MetadataPlayer.js","Player/play.svg","Player/pause.svg","Player/Player.jsx","StationSelector/StationSelector.jsx","About/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IcecastMetadataQueue","icyBr","onMetadataUpdate","this","_icyBr","_onMetadataUpdate","_metadataQueue","bufferOffset","metadata","_enqueueMetadata","bytesRead","forEach","i","clearTimeout","_timeoutId","time","push","setTimeout","_dequeueMetadata","shift","map","MetadataBuffer","expectedLength","_buffer","Uint8Array","_length","data","set","length","Stats","_totalBytesRead","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentBytesRemaining","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","currentStreamBytesRemaining","currentMetadataBytesRemaining","bytes","noOp","IcecastMetadataReader","icyMetaInt","onStream","onMetadata","_icyMetaInt","_remainingData","_currentPosition","_stats","_decoder","TextDecoder","_onStream","_onMetadata","_onStreamPromise","Promise","resolve","_onMetadataPromise","_generator","next","metadataBytes","parseMetadataString","decode","chunk","value","_getStream","_getMetadataLength","_getMetadata","_getNextValue","stream","addStreamBytes","streamPayload","stats","addMetadataLengthBytes","addMetadataBytes","_storeMetadata","metadataPayload","parseMetadata","currentMetadata","metadataBuffer","pop","subarray","metadataString","matchAll","match","IcecastReadableStream","response","readerIterator","asyncIterator","body","start","controller","icecast","parseInt","headers","get","enqueue","asyncReadAll","close","readableStream","reader","getReader","Symbol","read","ReadableStream","Header","header","_bitrate","bitrate","_channelMode","channelMode","_channels","channels","_emphasis","emphasis","_framePadding","framePadding","_isCopyrighted","isCopyrighted","_isOriginal","isOriginal","_isPrivate","isPrivate","_layer","layer","_modeExtension","modeExtension","_mpegVersion","mpegVersion","_protection","protection","_sampleLength","sampleLength","_sampleRate","sampleRate","_frameByteLength","frameByteLength","buffer","mpegVersionBits","layerBits","protectionBit","mpegVersions","description","layers","bitrateBits","sampleRateBits","paddingBit","privateBit","bitrateMatrix","bitrateIndex","sampleRates","Math","floor","channelModeBits","modeExtensionBits","copyrightBits","originalBits","emphasisBits","channelModes","modeExtensions","headerByteLength","0","v1Layer1","v1Layer2","v1Layer3","v2Layer1","v2Layer23","layer12ModeExtensions","layer3ModeExtensions","v1","v2","sampleLengths","v2SampleLengths","v1SampleLengths","Frame","_header","_data","MPEGParser","_headerCache","Map","key","String","fromCharCode","has","getHeader","offset","_getHeader","nextHeaderOffset","frame","Box","name","contents","boxes","_contents","from","stringToU8intArray","_boxes","box","constructor","console","error","Error","index","insertOffset","reduce","acc","LENGTH_SIZE","flatMap","getUint32","array","char","charCodeAt","number","DataView","setUint32","FragmentedISOBMFFBuilder","getBoxContents","frames","trun","insertBytes","FragmentedMPEG","_mpegParser","_frames","_mpegData","_sendReceiveData","parsedFrames","_parseFrames","_firstHeader","_getMovieFragment","appendBuffers","getMp3MovieBox","mpegData","currentFrame","readFrameStream","MIN_FRAMES","MIN_FRAMES_LENGTH","movieFragment","wrapMp3InMovieFragment","buf1","buf2","buf","MetadataPlayer","_icecastMetadataQueue","meta","_audioElement","Audio","_playing","mimeType","_mediaSource","MediaSource","src","URL","createObjectURL","addEventListener","_sourceBuffer","addSourceBuffer","mode","once","_playPromise","then","removeAttribute","load","catch","appendBuffer","_waitForSourceBuffer","currentTime","remove","endpoint","fetch","method","_controller","AbortController","signal","res","isTypeSupported","_createMediaSource","_appendSourceBuffer","_mp3ToMp4","a","iterator","_streamPromise","stop","fetchStream","race","fetchMimeType","getMediaSource","play","_isInitialMetadata","addMetadata","timestampOffset","startReading","e","message","_destroyMediaSource","abort","purgeMetadataQueue","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fill","d","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","station","useState","log","metadataPlayer","useCallback","metaInt","useEffect","playing","useMetadataPlayer","isPlaying","toggle","className","styles","player","disabled","Boolean","button","onClick","StreamTitle","link","visitStation","href","rel","Station","id","changeStation","type","stationRadio","onChange","stationLabel","htmlFor","stationName","stationDescription","stations","idx","about","subLink","disclaimer","App","setStation","About","StationSelector","footer","Player","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,OAAS,uBAAuB,KAAO,qBAAqB,aAAe,+B,mBCAjKD,EAAOC,QAAU,CAAC,QAAU,iCAAiC,aAAe,sCAAsC,aAAe,sCAAsC,YAAc,qCAAqC,mBAAqB,8C,mBCA/OD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,QAAU,uBAAuB,YAAc,2BAA2B,WAAa,4B,mBCAjKD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,OAAS,sB,m1OCenCC,E,WAgBnB,cAAqD,IAAvCC,EAAsC,EAAtCA,MAAsC,IAA/BC,wBAA+B,MAAZ,aAAY,sBAClDC,KAAKC,OAASH,EACdE,KAAKE,kBAAoBH,EACzBC,KAAKG,eAAiB,G,0DAmBEC,GAAe,IAA3BC,EAA0B,EAA1BA,SAOZL,KAAKM,iBAAiBD,EAAUD,K,qCAQnBG,GACb,OAAOP,KAAKC,OAASM,GAA2B,IAAdP,KAAKC,QAAgB,I,2CAOvDD,KAAKG,eAAeK,SAAQ,SAACC,GAAD,OAAOC,aAAaD,EAAEE,eAClDX,KAAKG,eAAiB,K,uCAGPE,EAAUO,GAAO,IAAD,OAC/BZ,KAAKG,eAAeU,KAAK,CACvBF,WAAYG,YAAW,WACrB,EAAKC,qBACG,IAAPH,GACHP,e,yCAIgB,IACVA,EAAaL,KAAKG,eAAea,QAAjCX,SACRL,KAAKE,kBAAkBG,K,oCAjDvB,OAAOL,KAAKG,eAAec,KAAI,kBAAyB,CACtDZ,SAD6B,EAAGA,SAEhCO,KAF6B,EAAaA,a,qECrB3BM,E,WACnB,WAAYC,GAAiB,oBAC3BnB,KAAKoB,QAP0B,IAAIC,WAOLF,GAC9BnB,KAAKsB,QAAU,E,kDAWf,OAAOtB,KAAKoB,U,2BAGTG,GACHvB,KAAKoB,QAAQI,IAAID,EAAMvB,KAAKsB,SAC5BtB,KAAKsB,SAAWC,EAAKE,S,6BAZrB,OAAOzB,KAAKsB,Y,KCXVI,E,WACJ,aAAe,oBACb1B,KAAK2B,gBAAkB,EACvB3B,KAAK4B,iBAAmB,EACxB5B,KAAK6B,yBAA2B,EAChC7B,KAAK8B,mBAAqB,EAE1B9B,KAAK+B,uBAAyB,EAC9B/B,KAAKgC,6BAA+B,EACpChC,KAAKiC,+BAAiC,E,kDAItC,MAAO,CACLC,eAAgBlC,KAAK2B,gBACrBQ,gBAAiBnC,KAAK4B,iBACtBQ,wBAAyBpC,KAAK6B,yBAC9BQ,kBAAmBrC,KAAK8B,mBACxBQ,sBAAuBtC,KAAK+B,uBAC5BQ,4BAA6BvC,KAAKgC,6BAClCQ,8BAA+BxC,KAAKiC,kC,mCAIrBQ,GACjBzC,KAAK4B,kBAAoBa,EACzBzC,KAAK2B,iBAAmBc,EACxBzC,KAAKgC,8BAAgCS,EACrCzC,KAAK+B,wBAA0BU,I,2CAGNA,GACzBzC,KAAK6B,0BAA4BY,EACjCzC,KAAK2B,iBAAmBc,EACxBzC,KAAK+B,wBAA0BU,I,qCAGZA,GACnBzC,KAAK8B,oBAAsBW,EAC3BzC,KAAK2B,iBAAmBc,EACxBzC,KAAKiC,gCAAkCQ,EACvCzC,KAAK+B,wBAA0BU,I,0CAGPA,GACxBzC,KAAK+B,uBAAyBU,I,gDAGAA,GAC9BzC,KAAKgC,6BAA+BS,I,kDAGJA,GAChCzC,KAAKiC,+BAAiCQ,M,KAIpCC,EAAO,aAkBQC,E,WACnB,cAAiE,IAAnDC,EAAkD,EAAlDA,WAAkD,IAAtCC,gBAAsC,MAA3BH,EAA2B,MAArBI,kBAAqB,MAARJ,EAAQ,sBAC9D1C,KAAK+C,YAAcH,EACnB5C,KAAKgD,eAAiB,EACtBhD,KAAKiD,iBAAmB,EACxBjD,KAAKoB,QAAU,KACfpB,KAAKkD,OAAS,IAAIxB,EAClB1B,KAAKmD,SAAW,IAAIC,YAAY,SAEhCpD,KAAKqD,UAAYR,EACjB7C,KAAKsD,YAAcR,EACnB9C,KAAKuD,iBAAmBC,QAAQC,UAChCzD,KAAK0D,mBAAqBF,QAAQC,UAElCzD,KAAK2D,WAAa3D,KAAK2D,aACvB3D,KAAK2D,WAAWC,O,0DA+BJC,GACZ,OAAOlB,EAAsBmB,oBAC3B9D,KAAKmD,SAASY,OAAOF,M,2CAUfG,G,uEAEFvD,EAAIT,KAAK2D,WAAWC,KAAKI,G,WAC7BvD,EAAEwD,M,gBAGF,O,SAAMxD,EAAEwD,M,OAFRxD,EAAIT,KAAK2D,WAAWC,O,6FAUhBI,GACN,IACE,IAAIvD,EAAIT,KAAK2D,WAAWC,KAAKI,GAC7BvD,EAAEwD,MACFxD,EAAIT,KAAK2D,WAAWC,W,oCAUHI,GAAQ,IAAD,wHAEpBvD,EAAI,EAAKkD,WAAWC,KAAKI,GAFL,WAGxBvD,EAAEwD,MAHsB,6CAMlB,EAAKV,kBANa,mCAOlB,EAAKG,oBAPa,OAQxB,OARwB,SAQlBjD,EAAEwD,MARgB,OAIxBxD,EAAI,EAAKkD,WAAWC,OAJI,+D,4EAgBTI,G,uEAEXvD,EAAIT,KAAK2D,WAAWC,KAAKI,G,WAC7BvD,EAAEwD,M,gCAGIjE,KAAKuD,iB,uBACLvD,KAAK0D,mB,OAHXjD,EAAIT,KAAK2D,WAAWC,O,sOASpB,uBAAO5D,KAAKkE,aAAZ,Q,OACA,uBAAOlE,KAAKmE,qBAAZ,Q,eACAnE,KAAKgD,gB,qBAAmB,uBAAOhD,KAAKoE,eAAZ,Q,8LAK1BpE,KAAKgD,eAAiBhD,KAAK+C,YAC3B/C,KAAKkD,OAAOX,4BAA8BvC,KAAK+C,Y,OAG9B,uBAAO/C,KAAKqE,gBAAZ,Q,OAcf,OAdMC,E,KACNtE,KAAKkD,OAAOqB,eAAiBD,EAAO7C,OAE9B+C,EAAgB,CAAEF,SAAQG,MAAOzE,KAAKkD,OAAOuB,OASnDzE,KAAKuD,iBAAmBvD,KAAKqD,UAAUmB,G,SAEjCA,E,UACCxE,KAAKgD,e,yLAIdhD,KAAKgD,eAAiB,E,OAGG,uBAAOhD,KAAKqE,gBAAZ,Q,iBAA6B,GAApDrE,KAAKgD,eAAoD,G,eAC1B,IAAxBhD,KAAKgD,e,uBAEdhD,KAAKkD,OAAOwB,uBAAyB,E,0KAMtB,OAFf1E,KAAKkD,OAAOV,8BAAgCxC,KAAKgD,eAElC,gBAAOhD,KAAKqE,gBAAZ,Q,UAAXhE,E,KACJL,KAAKkD,OAAOyB,iBAAmBtE,EAASoB,QAEpCzB,KAAKgD,e,gBAA2B,uBAAOhD,KAAK4E,eAAevE,GAA3B,Q,OAAXA,E,YAkBzB,OAhBMwE,EAAkB,CACtBxE,SAAUL,KAAK8E,cAAczE,GAC7BoE,MAAOzE,KAAKkD,OAAOuB,OAYrBzE,KAAK0D,mBAAqB1D,KAAKsD,YAAYuB,G,UAErCA,E,kGAGQE,G,0EAERC,EAAiB,IAAI9D,EACzBlB,KAAKgD,eAAiB+B,EAAgBtD,SAEzBZ,KAAKkE,G,OAGD,uBAAO/E,KAAKqE,gBAAZ,Q,OAAXhE,E,KACN2E,EAAenE,KAAKR,GAEpBL,KAAKkD,OAAOyB,iBAAmBtE,EAASoB,O,UACjCzB,KAAKgD,e,gDAEPgC,EAAeC,O,4KAIdjF,KAAKoB,SAAWpB,KAAKiD,mBAAqBjD,KAAKoB,QAAQK,O,gBAC9C,Y,iBAAfzB,KAAKoB,Q,OACLpB,KAAKiD,iBAAmB,EACxBjD,KAAKkD,OAAOZ,sBAAwBtC,KAAKoB,QAAQK,O,6BAE7CwC,EAAQjE,KAAKoB,QAAQ8D,SACzBlF,KAAKiD,iBACLjD,KAAKgD,eAAiBhD,KAAKiD,kBAG7BjD,KAAKgD,gBAAkBiB,EAAMxC,OAC7BzB,KAAKiD,kBAAoBgB,EAAMxC,O,kBAExBwC,G,6FA7LkBkB,GAOzB,IAPyC,EAOnC9E,EAAW,GAPwB,cASvB8E,EAAeC,SAAf,YAChB,0DADgB,iBATuB,IASzC,2BAEG,CAAC,IAFKC,EAEN,QACDhF,EAASgF,EAAK,OAAL,KAA0BA,EAAK,OAAL,KAZI,8BAezC,OAAOhF,M,KCjHLqC,EAAO,aAMQ4C,E,kDAOnB,WAAYC,EAAZ,GAAoE,IAA5C3C,EAA2C,EAA3CA,WAA2C,IAA/BC,gBAA+B,MAApBH,EAAoB,EAAdI,EAAc,EAAdA,WAAc,oBACjE,IAAM0C,EAAiBF,EAAsBG,cAAcF,EAASG,MADH,mBAG3D,CACEC,MADF,SACQC,GAAa,OAAD,wHAChBC,EAAU,IAAIlD,EAAsB,CACxCC,WACEkD,SAASP,EAASQ,QAAQC,IAAI,iBAAmBpD,EACnDE,aACAD,SAAU,SAACoB,GAET,OADA2B,EAAWK,QAAQhC,EAAMK,QAClBzB,EAASoB,MAPE,iCAWIuB,GAXJ,gIAWLxB,EAXK,YAYd6B,EAAQK,aAAalC,GAZP,iTAetB4B,EAAWO,QAfW,iF,sNAyBJb,EAAsBG,cAAczF,O,4kBASvCoG,GACnB,IAAMC,EAASD,EAAeE,YAC9B,OAAO,eACJC,OAAOd,eAAgB,iBAAO,CAC7B7B,KAAM,kBAAMyC,EAAOG,gB,eAjDwBC,iB,eCN9BC,E,WAiOnB,WAAYC,GAAS,oBACnB3G,KAAK4G,SAAWD,EAAOE,QACvB7G,KAAK8G,aAAeH,EAAOI,YAC3B/G,KAAKgH,UAAYL,EAAOM,SACxBjH,KAAKkH,UAAYP,EAAOQ,SACxBnH,KAAKoH,cAAgBT,EAAOU,aAC5BrH,KAAKsH,eAAiBX,EAAOY,cAC7BvH,KAAKwH,YAAcb,EAAOc,WAC1BzH,KAAK0H,WAAaf,EAAOgB,UACzB3H,KAAK4H,OAASjB,EAAOkB,MACrB7H,KAAK8H,eAAiBnB,EAAOoB,cAC7B/H,KAAKgI,aAAerB,EAAOsB,YAC3BjI,KAAKkI,YAAcvB,EAAOwB,WAC1BnI,KAAKoI,cAAgBzB,EAAO0B,aAC5BrI,KAAKsI,YAAc3B,EAAO4B,WAC1BvI,KAAKwI,iBAAmB7B,EAAO8B,gB,2DApGhBC,GAEf,GAAIA,EAAOjH,OAAS,EAAG,OAAO,KAG9B,GAAkB,MAAdiH,EAAO,IAAeA,EAAO,GAAK,IAAM,OAAO,KAOnD,IAAMC,EAA8B,GAAZD,EAAO,GACzBE,EAAwB,EAAZF,EAAO,GACnBG,EAA4B,EAAZH,EAAO,GAEvB/B,EAAS,GAGTsB,EAAcvB,EAAOoC,aAAaH,GACxC,GAAgC,aAA5BV,EAAYc,YAA4B,OAAO,KAGnD,GAA6C,aAAzCrC,EAAOsC,OAAOJ,GAAWG,YAA4B,OAAO,KAChE,IAAMlB,EAAK,2BACNnB,EAAOsC,OAAOJ,IACdlC,EAAOsC,OAAOJ,GAAWX,EAAYe,SAG1CrC,EAAOsB,YAAcA,EAAYc,YACjCpC,EAAOkB,MAAQA,EAAMkB,YACrBpC,EAAO0B,aAAeR,EAAMQ,aAC5B1B,EAAOwB,WAAazB,EAAOyB,WAAWU,GAQtC,IAAMI,EAA0B,IAAZP,EAAO,GACrBQ,EAA6B,GAAZR,EAAO,GACxBS,EAAyB,EAAZT,EAAO,GACpBU,EAAyB,EAAZV,EAAO,GAG1B,GADA/B,EAAOE,QAAUH,EAAO2C,cAAcJ,GAAapB,EAAMyB,cAClC,QAAnB3C,EAAOE,QAAmB,OAAO,KAGrC,GADAF,EAAO4B,WAAaN,EAAYsB,YAAYL,GAClB,aAAtBvC,EAAO4B,WAA2B,OAAO,KAS7C,GAPA5B,EAAOU,aAAe8B,GAAc,GAAKtB,EAAMR,aAC/CV,EAAOgB,YAAcyB,EAErBzC,EAAO8B,gBAAkBe,KAAKC,MAC3B,IAAM9C,EAAOE,QAAUF,EAAO0B,aAAgB1B,EAAO4B,WACpD5B,EAAOU,eAENV,EAAO8B,gBAAiB,OAAO,KASpC,IAAMiB,EAA8B,IAAZhB,EAAO,GACzBiB,EAAgC,GAAZjB,EAAO,GAC3BkB,EAA4B,EAAZlB,EAAO,GACvBmB,EAA2B,EAAZnB,EAAO,GACtBoB,EAA2B,EAAZpB,EAAO,GAS5B,OAPA/B,EAAOI,YAAcL,EAAOqD,aAAaL,GAAiBX,YAC1DpC,EAAOM,SAAWP,EAAOqD,aAAaL,GAAiBzC,SACvDN,EAAOoB,cAAgBF,EAAMmC,eAAeL,GAC5ChD,EAAOY,iBAAmBqC,GAAiB,GAC3CjD,EAAOc,cAAgBoC,GAAgB,GAEvClD,EAAOQ,SAAWT,EAAOS,SAAS2C,GACV,aAApBnD,EAAOQ,SAAgC,KAEpC,IAAIT,EAAOC,O,8CAsBlB,OAAO3G,KAAKgH,Y,sCAIZ,OAAOhH,KAAKwI,mB,iCAIZ,OAAOxI,KAAKsI,c,mCAIZ,OAAOtI,KAAKoI,kB,KAhQK1B,EACZuD,iBAAmB,EADPvD,EAGZ2C,cAAgB,CAErBa,EAAY,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAC7C,GAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAC7B,GAAY,CAAC,GAAI,GAAI,GAAI,GAAI,IAC7B,GAAY,CAAC,GAAI,GAAI,GAAI,GAAI,IAC7B,GAAY,CAAC,IAAK,GAAI,GAAI,GAAI,IAC9B,GAAY,CAAC,IAAK,GAAI,GAAI,GAAI,IAC9B,GAAY,CAAC,IAAK,GAAI,GAAI,GAAI,IAC9B,IAAY,CAAC,IAAK,IAAK,GAAI,IAAK,IAChC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACjC,IAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KACjC,IAAY,CAAC,MAAO,MAAO,MAAO,MAAO,QApBxBxD,EAuBZyD,SAAW,EAvBCzD,EAwBZ0D,SAAW,EAxBC1D,EAyBZ2D,SAAW,EAzBC3D,EA0BZ4D,SAAW,EA1BC5D,EA2BZ6D,UAAY,EA3BA7D,EA6BZ8D,sBAAwB,CAC7BN,EAAY,gBACZ,GAAY,gBACZ,GAAY,iBACZ,GAAY,kBAjCKxD,EAoCZ+D,qBAAuB,CAC5BP,EAAY,sCACZ,GAAY,qCACZ,GAAY,qCACZ,GAAY,qCAxCKxD,EA2CZsC,OAAS,CACdkB,EAAY,CAAEnB,YAAa,YAC3B,EAAY,CACVA,YAAa,YACb1B,aAAc,EACd2C,eAAgBtD,EAAO+D,qBACvBC,GAAI,CACFpB,aAAc5C,EAAO2D,SACrBhC,aAAc,MAEhBsC,GAAI,CACFrB,aAAc5C,EAAO6D,UACrBlC,aAAc,MAGlB,EAAY,CACVU,YAAa,WACb1B,aAAc,EACd2C,eAAgBtD,EAAO8D,sBACvBnC,aAAc,KACdqC,GAAI,CACFpB,aAAc5C,EAAO0D,UAEvBO,GAAI,CACFrB,aAAc5C,EAAO6D,YAGzB,EAAY,CACVxB,YAAa,UACb1B,aAAc,EACd2C,eAAgBtD,EAAO8D,sBACvBnC,aAAc,IACdqC,GAAI,CACFpB,aAAc5C,EAAOyD,UAEvBQ,GAAI,CACFrB,aAAc5C,EAAO4D,YA/ER5D,EAoFZoC,aAAe,CACpBoB,EAAY,CACVnB,YAAa,+CACbC,OAAQ,KACRO,YAAa,CACXW,EAAY,MACZ,EAAY,KACZ,EAAY,IACZ,GAAY,YAEdU,cAAelE,EAAOmE,iBAExB,EAAY,CAAE9B,YAAa,YAC3B,GAAY,CACVA,YAAa,mCACbC,OAAQ,KACRO,YAAa,CACXW,EAAY,MACZ,EAAY,KACZ,EAAY,KACZ,GAAY,YAEdU,cAAelE,EAAOmE,iBAExB,GAAY,CACV9B,YAAa,mCACbC,OAAQ,KACRO,YAAa,CACXW,EAAY,MACZ,EAAY,KACZ,EAAY,KACZ,GAAY,YAEdU,cAAelE,EAAOoE,kBArHPpE,EAyHZyB,WAAa,CAClB+B,EAAY,YACZ,EAAY,QA3HKxD,EA8HZS,SAAW,CAChB+C,EAAY,OACZ,EAAY,WACZ,EAAY,WACZ,EAAY,aAlIKxD,EAqIZqD,aAAe,CACpBG,EAAY,CAAEjD,SAAU,EAAG8B,YAAa,UACxC,GAAY,CAAE9B,SAAU,EAAG8B,YAAa,gBACxC,IAAY,CAAE9B,SAAU,EAAG8B,YAAa,gBACxC,IAAY,CAAE9B,SAAU,EAAG8B,YAAa,0B,IC3IvBgC,E,WACnB,WAAYpE,EAAQpF,GAAO,oBACzBvB,KAAKgL,QAAUrE,EACf3G,KAAKiL,MAAQ1J,E,mDAIb,OAAOvB,KAAKgL,U,2BAIZ,OAAOhL,KAAKiL,U,KCRKC,E,WACnB,aAAe,oBACblL,KAAKmL,aAAe,IAAIC,I,uDAQf1C,GACT,IAAM2C,EAAMC,OAAOC,aAAP,MAAAD,OAAM,YAAiB5C,EAAOxD,SAAS,EAAG,KAEtD,GAAIlF,KAAKmL,aAAaK,IAAIH,GACxB,OAAOrL,KAAKmL,aAAanF,IAAIqF,GAE7B,IAAM1E,EAASD,EAAO+E,UAAU/C,GAChC,OAAI/B,GACF3G,KAAKmL,aAAa3J,IAAI6J,EAAK1E,GACpBA,QAFT,I,sCAaYpF,GAKd,IALiC,IAAbmK,EAAY,uDAAH,EAEzB/E,EAAS3G,KAAK2L,WAAWpK,EAAK2D,SAASwG,KAGnC/E,GAAU+E,EAAShF,EAAOuD,iBAAmB1I,EAAKE,QACxDiK,IACA/E,EAAS3G,KAAK2L,WAAWpK,EAAK2D,SAASwG,IAGzC,GAAI/E,EAAQ,CAEV,IAAMiF,EAAmBF,EAAS/E,EAAO8B,gBACzC,GAAImD,EAAmBlF,EAAOuD,kBAAoB1I,EAAKE,OACrD,OAAOzB,KAAK2L,WAAWpK,EAAK2D,SAAS0G,IACjC,CACEF,SACAG,MAAO,IAAId,EAAMpE,EAAQpF,EAAK2D,SAASwG,EAAQE,KAEjD,CAAEF,OAAQE,EAAmBlF,EAAOuD,kBAK5C,MAAO,CACLyB,c,KC1DeI,E,WAUnB,WAAYC,GAA2C,IAAD,yDAAJ,GAAI,IAAlCC,gBAAkC,MAAvB,GAAuB,MAAnBC,aAAmB,MAAX,GAAW,sBACpDjM,KAAKkM,UAAY7K,WAAW8K,KAAX,sBACZL,EAAIM,mBAAmBL,IADX,YAEZC,KAELhM,KAAKqM,OAASJ,E,mDAwDTK,GACL,GAAIA,EAAIC,cAAgBT,EAEtB,MADAU,QAAQC,MAAM,8CACR,IAAIC,MAAM,aAGlB1M,KAAKqM,OAAOxL,KAAKyL,K,kCAQP/K,EAAMoL,GAChB,IAAMC,EAAeD,EAAQ,EAC7B3M,KAAKkM,UAAY7K,WAAW8K,KAAX,sBACZnM,KAAKkM,UAAUhH,SAAS,EAAG0H,IADf,YAEZrL,GAFY,YAGZvB,KAAKkM,UAAUhH,SAAS0H,Q,kCAQnBrL,GACVvB,KAAKkM,UAAY7K,WAAW8K,KAAX,sBAAoBnM,KAAKkM,WAAzB,YAAuC3K,O,6BArDxD,OAAOvB,KAAKqM,OAAOQ,QACjB,SAACC,EAAKR,GAAN,OAAcQ,EAAMR,EAAI7K,SACxBqK,EAAIiB,YAAc/M,KAAKkM,UAAUzK,U,+BAQnC,IAAMuK,EAAQ,sBACThM,KAAKkM,WADI,YAETlM,KAAKqM,OAAOW,SAAQ,SAACV,GAAD,mBAAaA,EAAIN,eAG1C,OAAO3K,WAAW8K,KAAX,sBACFL,EAAImB,UAAUnB,EAAIiB,YAAcf,EAASvK,SADvC,YAEFuK,Q,0CAxCmBD,GACxB,IAD8B,EACxBmB,EAAQ,GADgB,cAEXnB,GAFW,IAE9B,2BAAyB,CAAC,IAAfoB,EAAc,QACvBD,EAAMrM,KAAKsM,EAAKC,WAAW,KAHC,8BAK9B,OAAO/L,WAAW8K,KAAKe,K,gCAQRG,GACf,IAAM5K,EAAQ,IAAIpB,WAAW,GAE7B,OADA,IAAIiM,SAAS7K,EAAMiG,QAAQ6E,UAAU,EAAGF,GAAQ,GACzC5K,M,KAvCUqJ,EACZiB,YAAc,E,ICKFS,E,4GACGvB,GACpB,OAAO5K,WAAW8K,KAAKF,EAAMe,SAAQ,SAACV,GAAD,mBAAaA,EAAIN,gB,qCAOlCrF,GACpB,IAAMsF,EAAQ,CACZ,IAAIH,EAAI,OAAQ,CAEdE,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,GAAK,MAEhI,IAAIF,EAAI,OAAQ,CACdG,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdf,IAAIF,EAAI,OAAQ,CACdG,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KAE5a,IAAIF,EAAI,OAAQ,CACdG,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdE,SAAS,CAAE,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAA1D,mBACHF,EAAImB,UAAUtG,EAAO4B,aADlB,CAEN,EAAK,EAAK,EAAK,EAAK,GAAK,IAAK,EAAK,MAEvC,IAAIuD,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEjM,IAAIF,EAAI,OAAQ,CAEdE,SAAS,CAAE,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAC7frF,EAAOM,SACP,EAAK,GACL,EAAK,GAHC,mBAIH6E,EAAImB,UAAUtG,EAAO4B,aAJljkB,IAAIuD,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KAExK,IAAIF,EAAI,OAAQ,CACdG,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,KAE5B,IAAIF,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KAErI,IAAIF,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,IAAK,IAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,aAQ3M,OAAOwB,EAAyBC,eAAexB,K,6CAQnByB,GAC5B,IAAMC,EAAO,IAAI7B,EAAI,OAAQ,CAE3BE,SAAS,CACP,EAAK,EAAK,EAAK,GADT,mBAEHF,EAAImB,UAAUS,EAAOjM,SAFlB,YAGHiM,EAAOV,SAAQ,SAACnB,GAAD,mBAAeC,EAAImB,UAAUpB,EAAMtK,KAAKE,gBAIxDwK,EAAQ,CACZ,IAAIH,EAAI,OAAQ,CACdG,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdE,SAAU,CAAC,EAAK,EAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAC1GC,MAAO,CACL,IAAIH,EAAI,OAAQ,CAEdE,SAAS,CAAE,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,KAA9E,mBACHF,EAAImB,UAAUS,EAAO,GAAG/G,OAAO0B,eAD5B,YAEHyD,EAAImB,UAAUS,EAAO,GAAGnM,KAAKE,SAF1B,CAGN,EAAK,EAAK,EAAK,MAEnBkM,QAKR,IAAI7B,EAAI,OAAQ,CACdE,SAAU0B,EAAOV,SAAQ,SAACnB,GAAD,mBAAeA,EAAMtK,YAMlD,OAFAoM,EAAKC,YAAY9B,EAAImB,UAAUhB,EAAM,GAAGxK,OAAS,IAAK,GAE/C+L,EAAyBC,eAAexB,O,KCxH9B4B,E,WAInB,aAAe,oBACb7N,KAAK8N,YAAc,IAAI5C,EACvBlL,KAAK+N,QAAU,GACf/N,KAAKgO,UAAY,IAAI3M,WAAW,GAEhCrB,KAAK2D,WAAa3D,KAAK2D,aACvB3D,KAAK2D,WAAWC,O,iEAuBRI,G,uEAEFvD,EAAIT,KAAK2D,WAAWC,KAAKI,G,WAC7BvD,EAAEwD,M,gBAGF,O,SAAMxD,EAAEwD,M,OAFRxD,EAAIT,KAAK2D,WAAWC,O,0LAcd8J,E,gBACN,uBAAO1N,KAAKiO,mBAAZ,Q,OACMC,EAAelO,KAAKmO,eAC1BnO,KAAKoO,aAAeF,EAAazM,QAAUyM,EAAa,GAAGvH,OAC3D+G,EAAS1N,KAAKqO,oB,sBAIhBX,EAASG,EAAeS,cACtBd,EAAyBe,eAAevO,KAAKoO,cAC7CV,G,OAKA,uBAAO1N,KAAKiO,iBAAiBP,GAA7B,S,QACA1N,KAAKmO,eACLT,EAAS1N,KAAKqO,oB,mHAQAX,G,uEACD,O,SAAMA,E,OAAjBc,E,iBAEIA,E,gBACK,Y,iBAAXA,E,6BAGFxO,KAAKgO,UAAYH,EAAeS,cAActO,KAAKgO,UAAWQ,G,sFAS9D,IAFA,IAAIC,EAAezO,KAAK8N,YAAYY,gBAAgB1O,KAAKgO,WAElDS,EAAa5C,OAClB7L,KAAK+N,QAAQlN,KAAK4N,EAAa5C,OAE/B4C,EAAezO,KAAK8N,YAAYY,gBAC9B1O,KAAKgO,UACLS,EAAa/C,OAAS+C,EAAa5C,MAAMlF,OAAO8B,iBAKpD,OAFAzI,KAAKgO,UAAYhO,KAAKgO,UAAU9I,SAASuJ,EAAa/C,QAE/C1L,KAAK+N,U,0CAOZ,GACE/N,KAAK+N,QAAQtM,QAAUoM,EAAec,YACtC3O,KAAK+N,QAAQlB,QAAO,SAACC,EAAKjB,GAAN,OAAgBiB,EAAMjB,EAAMtK,KAAKE,SAAQ,IAC3DoM,EAAee,kBACjB,CACA,IAAMC,EAAgBrB,EAAyBsB,uBAC7C9O,KAAK+N,SAIP,OADA/N,KAAK+N,QAAU,GACRc,M,qCApGUE,EAAMC,GACzB,IAAMC,EAAM,IAAI5N,WAAW0N,EAAKtN,OAASuN,EAAKvN,QAI9C,OAHAwN,EAAIzN,IAAIuN,GACRE,EAAIzN,IAAIwN,EAAMD,EAAKtN,QAEZwN,M,KAxBUpB,EACZc,WAAa,EADDd,EAEZe,kBAAoB,K,ICpBRM,E,WACnB,cAAmC,IAArBnP,EAAoB,EAApBA,iBAAoB,oBAChCC,KAAKmP,sBAAwB,IAAItP,EAAqB,CACpDE,iBAAkB,SAACqP,GAAD,OAAUrP,EAAiBqP,MAE/CpP,KAAKqP,cAAgB,IAAIC,MACzBtP,KAAKE,kBAAoBH,EAEzBC,KAAKuP,UAAW,E,wGAOOC,G,mFACvBxP,KAAKyP,aAAe,IAAIC,YACxB1P,KAAKqP,cAAcM,IAAMC,IAAIC,gBAAgB7P,KAAKyP,c,kBAE3C,IAAIjM,SAAQ,SAACC,GAClB,EAAKgM,aAAaK,iBAChB,cACA,WACE,EAAKC,cAAgB,EAAKN,aAAaO,gBAAgBR,GACvD,EAAKO,cAAcE,KAAO,WAC1BxM,MAEF,CAAEyM,MAAM,Q,mJAKS,IAAD,OACpBlQ,KAAKyP,aAAe,KACpBzP,KAAKmQ,cACHnQ,KAAKmQ,aACFC,MAAK,kBAAM,EAAKf,cAAcgB,gBAAgB,UAC9CD,MAAK,kBAAM,EAAKf,cAAciB,UAC9BC,OAAM,iB,2LAIJ,IAAI/M,SAAQ,SAACC,GAClB,EAAKsM,cAAcD,iBAAiB,YAAarM,EAAS,CAAEyM,MAAM,Q,oLAI5ClM,G,wEACxBhE,KAAK+P,cAAcS,aAAaxM,G,SAC1BhE,KAAKyQ,uB,YAEPzQ,KAAKqP,cAAcqB,YAAc,G,uBACnC1Q,KAAK+P,cAAcY,OAAO,EAAG3Q,KAAKqP,cAAcqB,a,SAC1C1Q,KAAKyQ,uB,oLAIKG,G,0FACXC,MAAMD,EAAU,CACrBE,OAAQ,OACRb,KAAM,U,6KAIQW,G,wEAChB5Q,KAAK+Q,YAAc,IAAIC,gB,kBAEhBH,MAAMD,EAAU,CACrBE,OAAQ,MACR/K,QAAS,CACP,eAAgB,KAElBkL,OAAQjR,KAAK+Q,YAAYE,U,qLAIRC,G,iFACb1B,EAAW0B,EAAInL,QAAQC,IAAI,iBAE7B0J,YAAYyB,gBAAgB3B,G,gCACxBxP,KAAKoR,mBAAmB5B,G,OAE9BxP,KAAKqD,UAAY,gBAAGiB,EAAH,EAAGA,OAAH,OAAgB,EAAK+M,oBAAoB/M,I,0BAE7C,eAAbkL,IACAE,YAAYyB,gBAAgB,2B,kCAEtBnR,KAAKoR,mBAAmB,2B,QAE9BpR,KAAKsR,UAAY,IAAIzD,EACrB7N,KAAKqD,UAAL,uCAAiB,2CAAAkO,EAAA,sDAASjN,EAAT,EAASA,OAAT,iCACmB,EAAKgN,UAAUE,SAASlN,IAD3C,gIACEuK,EADF,YAEP,EAAKwC,oBAAoBxC,GAFlB,qXAAjB,kCAAA7O,KAAA,e,8BAMM,IAAI0M,MAAJ,oDACyC8C,EADzC,+B,iCAKDxP,KAAKyR,gB,mIAGTb,EAAUhO,GAAa,IAAD,OACrB5C,KAAKuP,UAAUvP,KAAK0R,OACxB1R,KAAKuP,UAAW,EAChBvP,KAAKyR,eAAiBzR,KAAK2R,YAAYf,GAEvCpN,QAAQoO,KAAK,CACX5R,KAAK6R,cAAcjB,GAAUL,OAAM,kBAAM,EAAKkB,kBAC9CzR,KAAKyR,iBAEJrB,MAAK,SAACc,GAAD,OAAS,EAAKY,eAAeZ,MAClCd,KALH,uCAKQ,WAAOc,GAAP,SAAAK,EAAA,6DACJ,EAAKpB,aAAe,EAAKd,cAAc0C,OACvC,EAAKC,oBAAqB,EAFtB,SAIE,IAAI1M,EAAsB4L,EAAK,CACnCtO,aACAC,SAAU,EAAKQ,UACfP,WAAY,SAACmB,GACX,EAAK+N,mBACD,EAAK9R,kBAAkB+D,EAAM5D,UAC7B,EAAK8O,sBAAsB8C,YACzBhO,EACA,EAAK8L,cAAcmC,gBACjB,EAAK7C,cAAcqB,aAE3B,EAAKsB,oBAAqB,KAE3BG,eAjBC,2CALR,uDAwBG5B,OAAM,SAAC6B,GACS,eAAXA,EAAErG,MACJ,EAAK7L,kBAAL,4BAA4CkS,EAAEC,UAEhD,EAAKC,2B,6BAKTtS,KAAKuP,UAAW,EAChBvP,KAAK+Q,YAAYwB,QACjBvS,KAAKmP,sBAAsBqD,uB,8BApI3B,OAAOxS,KAAKuP,a,KChBhB,SAASkD,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAInS,EAAI,EAAGA,EAAIoS,UAAUpR,OAAQhB,IAAK,CAAE,IAAIqS,EAASD,UAAUpS,GAAI,IAAK,IAAI4K,KAAOyH,EAAcJ,OAAOK,UAAUC,eAAeC,KAAKH,EAAQzH,KAAQuH,EAAOvH,GAAOyH,EAAOzH,IAAY,OAAOuH,IAA2BM,MAAMlT,KAAM6S,WAEhT,SAASM,EAAyBL,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAAkEzH,EAAK5K,EAAnEmS,EAEzF,SAAuCE,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAA2DzH,EAAK5K,EAA5DmS,EAAS,GAAQS,EAAaX,OAAOY,KAAKR,GAAqB,IAAKrS,EAAI,EAAGA,EAAI4S,EAAW5R,OAAQhB,IAAO4K,EAAMgI,EAAW5S,GAAQ2S,EAASG,QAAQlI,IAAQ,IAAauH,EAAOvH,GAAOyH,EAAOzH,IAAQ,OAAOuH,EAFxMY,CAA8BV,EAAQM,GAAuB,GAAIV,OAAOe,sBAAuB,CAAE,IAAIC,EAAmBhB,OAAOe,sBAAsBX,GAAS,IAAKrS,EAAI,EAAGA,EAAIiT,EAAiBjS,OAAQhB,IAAO4K,EAAMqI,EAAiBjT,GAAQ2S,EAASG,QAAQlI,IAAQ,GAAkBqH,OAAOK,UAAUY,qBAAqBV,KAAKH,EAAQzH,KAAgBuH,EAAOvH,GAAOyH,EAAOzH,IAAU,OAAOuH,EAMne,IAAIgB,EAAqB,IAAMC,cAAc,OAAQ,CACnDC,KAAM,UACNC,EAAG,oHAGD,EAAU,SAAiBC,GAC7B,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQhB,EAAyBa,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAOpB,EAAS,CACtD2B,QAAS,cACTC,IAAKJ,GACJE,GAAQD,EAAqB,IAAML,cAAc,QAAS,KAAMK,GAAS,KAAMN,IAGhFU,EAA0B,IAAMC,YAAW,SAAUJ,EAAOE,GAC9D,OAAoB,IAAMR,cAAc,EAASpB,EAAS,CACxDwB,OAAQI,GACPF,OAEU,IC7Bf,SAAS,IAA2Q,OAA9P,EAAWzB,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAInS,EAAI,EAAGA,EAAIoS,UAAUpR,OAAQhB,IAAK,CAAE,IAAIqS,EAASD,UAAUpS,GAAI,IAAK,IAAI4K,KAAOyH,EAAcJ,OAAOK,UAAUC,eAAeC,KAAKH,EAAQzH,KAAQuH,EAAOvH,GAAOyH,EAAOzH,IAAY,OAAOuH,IAA2BM,MAAMlT,KAAM6S,WAEhT,SAAS,EAAyBC,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAAkEzH,EAAK5K,EAAnEmS,EAEzF,SAAuCE,EAAQM,GAAY,GAAc,MAAVN,EAAgB,MAAO,GAAI,IAA2DzH,EAAK5K,EAA5DmS,EAAS,GAAQS,EAAaX,OAAOY,KAAKR,GAAqB,IAAKrS,EAAI,EAAGA,EAAI4S,EAAW5R,OAAQhB,IAAO4K,EAAMgI,EAAW5S,GAAQ2S,EAASG,QAAQlI,IAAQ,IAAauH,EAAOvH,GAAOyH,EAAOzH,IAAQ,OAAOuH,EAFxM,CAA8BE,EAAQM,GAAuB,GAAIV,OAAOe,sBAAuB,CAAE,IAAIC,EAAmBhB,OAAOe,sBAAsBX,GAAS,IAAKrS,EAAI,EAAGA,EAAIiT,EAAiBjS,OAAQhB,IAAO4K,EAAMqI,EAAiBjT,GAAQ2S,EAASG,QAAQlI,IAAQ,GAAkBqH,OAAOK,UAAUY,qBAAqBV,KAAKH,EAAQzH,KAAgBuH,EAAOvH,GAAOyH,EAAOzH,IAAU,OAAOuH,EAMne,IAAI,EAAqB,IAAMiB,cAAc,OAAQ,CACnDC,KAAM,UACNC,EAAG,2NAGD,EAAW,SAAkBC,GAC/B,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQ,EAAyBH,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,EAAS,CACtDO,QAAS,cACTC,IAAKJ,GACJE,GAAQD,EAAqB,IAAML,cAAc,QAAS,KAAMK,GAAS,KAAM,IAGhF,EAA0B,IAAMK,YAAW,SAAUJ,EAAOE,GAC9D,OAAoB,IAAMR,cAAc,EAAU,EAAS,CACzDI,OAAQI,GACPF,O,GAEU,I,gBCYA,cAAkB,IAAfK,EAAc,EAAdA,QAAc,EACEC,mBAnCX,oBAkCS,mBACvBpU,EADuB,OA7BN,SAACmU,EAASzU,GAAsB,IAAD,EAC9B0U,mBACvB,IAAIvF,EAAe,CACjBnP,iBAAkB,SAACqP,GACjB5C,QAAQkI,IAAItF,GACZrP,EAAiBqP,OAJhBuF,EADgD,oBAUjD5C,EAAO6C,uBAAY,WACvB7U,EAdY,cAeZ4U,EAAe5C,KAAKyC,EAAQ5D,SAAU4D,EAAQK,WAC7C,CAAC9U,EAAkB4U,EAAgBH,IAEhC9C,EAAOkD,uBAAY,WACvB7U,EApBmB,kCAqBnB4U,EAAejD,SACd,CAAC3R,EAAkB4U,IAEtBG,qBAAU,WACRN,GAAWzC,MACV,CAACyC,EAASzC,IAIb,MAAO,CAAC4C,EAAeI,QAFR,kBAAOJ,EAAeI,QAAUrD,IAASK,MAO5BiD,CAAkBR,EAFhB,yBAEvBS,EAFuB,KAEZC,EAFY,KAI9B,OACE,yBAAKC,UAAWC,IAAOC,QACrB,4BACEC,UAAWC,QAAQf,GACnBW,UAAWC,IAAOI,OAClBC,QAASP,GAERD,EAAY,kBAAC,EAAD,MAAY,kBAAC,EAAD,OAE3B,6BACE,uBAAGE,UAAWC,IAAO/U,UACE,kBAAbA,EAAwBA,EAASqV,YAAcrV,IAEjD,OAAPmU,QAAO,IAAPA,OAAA,EAAAA,EAASmB,OACR,yBAAKR,UAAWC,IAAOQ,cAjDX,yBAmDV,uBACET,UAAWC,IAAOO,KAClBE,KAAMrB,EAAQmB,KACd/C,OAAO,SACPkD,IAAI,uBAEHtB,EAAQzI,U,iBChEjBgK,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,QAASyB,EAAhB,EAAgBA,cAAhB,OACd,yBAAKd,UAAWC,IAAOZ,SACrB,2BACE0B,KAAK,QACLf,UAAWC,IAAOe,aAClBH,GAAIA,EACJjK,KAAK,WACLqK,SAAU,kBAAMH,EAAczB,MAEhC,2BAAOW,UAAWC,IAAOiB,aAAcC,QAASN,GAC9C,yBAAKb,UAAWC,IAAOmB,aAAc/B,EAAQzI,MAC7C,yBAAKoJ,UAAWC,IAAOoB,oBAAqBhC,EAAQzL,gBAK3C,YAACoL,GAAD,OACbA,EAAMsC,SAASxV,KAAI,SAACuT,EAASkC,GAAV,OACjB,kBAAC,EAAD,CACErL,IAAKqL,EACLlC,QAASA,EACTwB,GAAIU,EACJT,cAAe9B,EAAM8B,oB,iDCtBZ,qBACb,yBAAKd,UAAWC,KAAOuB,OACrB,uBACExB,UAAWC,KAAOO,KAClBE,KAAK,gDAEL,oDACA,yBAAKV,UAAWC,KAAOwB,SAAvB,iDAIF,yBAAKzB,UAAWC,KAAOrM,aAAvB,+FAIA,yBAAKoM,UAAWC,KAAOyB,YAAvB,kECKWC,OAhBf,WAAgB,IAAD,EACiBrC,qBADjB,mBACND,EADM,KACGuC,EADH,KAGb,OACE,oCACE,4BAAQ5B,UAAWC,KAAOzO,QACxB,kBAACqQ,GAAD,OAEF,kBAACC,GAAD,CAAiBR,SAAUA,GAAUR,cAAec,IACpD,4BAAQ5B,UAAWC,KAAO8B,QACxB,kBAACC,EAAD,CAAQ3C,QAASA,OCLLe,QACW,cAA7B6B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjS,MACvB,2DCZNkS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1H,MAAK,SAAC2H,GACLA,EAAaC,gBAEdzH,OAAM,SAAC9D,GACND,QAAQC,MAAMA,EAAM4F,c","file":"static/js/main.7111f4ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"Player_player__1vYfQ\",\"metadata\":\"Player_metadata__3j7ae\",\"button\":\"Player_button__297uW\",\"link\":\"Player_link__2k87w\",\"visitStation\":\"Player_visitStation__2xKeH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"StationSelector_station__3a44c\",\"stationRadio\":\"StationSelector_stationRadio__1FTGQ\",\"stationLabel\":\"StationSelector_stationLabel__1DbUR\",\"stationName\":\"StationSelector_stationName__1hB_K\",\"stationDescription\":\"StationSelector_stationDescription__36TBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__2v-0B\",\"link\":\"About_link__1z8T1\",\"subLink\":\"About_subLink__n5KCY\",\"description\":\"About_description__3WN3o\",\"disclaimer\":\"About_disclaimer__2gOk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"footer\":\"App_footer__29Fsv\"};","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class IcecastMetadataQueue {\n  /**\n   * @description Schedules updates up to the millisecond for Icecast Metadata from the response body of an Icecast stream mountpoint\n   * @description The accuracy of metadata updates is a direct relationship of the icyMetaInt\n   * @param {Object} IcecastMetadataQueue constructor parameter\n   * @param {number} [IcecastMetadataQueue.icyBr] Bitrate of audio stream used to increase accuracy when to updating metadata\n   * @param {onMetadataUpdate} [IcecastMetadataQueue.onMetadataUpdate] Callback executed when metadata is scheduled to update\n   *\n   * @callback onMetadataUpdate\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} time Time in seconds the metadata should be displayed / recorded\n   *\n   */\n\n  constructor({ icyBr, onMetadataUpdate = () => {} }) {\n    this._icyBr = icyBr;\n    this._onMetadataUpdate = onMetadataUpdate;\n    this._metadataQueue = [];\n  }\n\n  /**\n   * @description Returns the metadata queued for updates\n   * @type {{metadata: string, time: number}[]} Queued metadata\n   */\n  get metadataQueue() {\n    return this._metadataQueue.map(({ metadata, time }) => ({\n      metadata,\n      time,\n    }));\n  }\n\n  /**\n   *\n   * @param {object} metadata Metadata object returned from IcecastMetadataReader\n   * @param {number} bufferOffset Total buffered audio in seconds\n   */\n  addMetadata({ metadata }, bufferOffset) {\n    /**\n     * Metadata time is derived from the total number of stream bytes read\n     * since the latest buffer input. The buffer offset should be the total\n     * seconds of audio in the player buffer when the metadata was read.\n     */\n\n    this._enqueueMetadata(metadata, bufferOffset);\n  }\n\n  /**\n   * @description Calculates audio stream length based on bitrate\n   * @param {number} bytesRead Number of bytes\n   * @type {number} Seconds\n   */\n  getTimeByBytes(bytesRead) {\n    return this._icyBr ? bytesRead / (this._icyBr * 125) : 0;\n  }\n\n  /**\n   * @description Clears all metadata updates and empties the queue\n   */\n  purgeMetadataQueue() {\n    this._metadataQueue.forEach((i) => clearTimeout(i._timeoutId));\n    this._metadataQueue = [];\n  }\n\n  _enqueueMetadata(metadata, time) {\n    this._metadataQueue.push({\n      _timeoutId: setTimeout(() => {\n        this._dequeueMetadata();\n      }, time * 1000), // trigger timeout relative to play position\n      metadata,\n    });\n  }\n\n  _dequeueMetadata() {\n    const { metadata } = this._metadataQueue.shift();\n    this._onMetadataUpdate(metadata);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// Use fast buffer allocation if this is a NodeJS runtime or Uint8Array if a browser runtime\nconst bufferFunction = (length) => new Uint8Array(length);\n\n/**\n * @description Stores a collection of buffers as an array.\n */\nexport default class MetadataBuffer {\n  constructor(expectedLength) {\n    this._buffer = bufferFunction(expectedLength);\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * @type {Uint8Array} Returns all stored data\n   */\n  pop() {\n    return this._buffer;\n  }\n\n  push(data) {\n    this._buffer.set(data, this._length);\n    this._length += data.length;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataBuffer from \"./MetadataBuffer\";\n\nclass Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set currentBytesRemaining(bytes) {\n    this._currentBytesRemaining = bytes;\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining = bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n}\n\nconst noOp = () => {};\n\n/**\n * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n * @param {number} icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n *\n * @callback onMetadata\n * @param {object} value Object containing Metadata and Statistics\n * @param {object} metadata Object containing the metadata received.\n * @param {string} [metadata.StreamTitle] Title of the metadata update.\n * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n *\n * @callback onStream\n * @param {object} value Object containing Stream data and Statistics\n * @param {Uint8Array} stream Object containing the stream buffer.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n */\nexport default class IcecastMetadataReader {\n  constructor({ icyMetaInt, onStream = noOp, onMetadata = noOp }) {\n    this._icyMetaInt = icyMetaInt;\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = null;\n    this._stats = new Stats();\n    this._decoder = new TextDecoder(\"utf-8\");\n\n    this._onStream = onStream;\n    this._onMetadata = onMetadata;\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  /**\n   * @description Parses an Icecast metadata string into key value pairs.\n   * @param {string} metadataString Icecast formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseMetadataString(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadata = {};\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (let match of metadataString.matchAll(\n      /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/g\n    )) {\n      metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  /**\n   * @description Parses Icecast metadata bytes into key value pairs.\n   * @param {Uint8Array} metadataBytes Bytes containing Icecast metadata.\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  parseMetadata(metadataBytes) {\n    return IcecastMetadataReader.parseMetadataString(\n      this._decoder.decode(metadataBytes)\n    );\n  }\n\n  /**\n   * @description Returns an iterator that iterates over the passed in data.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  /**\n   * @description Returns an async iterator that iterates over the passed in data and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  *_generator() {\n    do {\n      yield* this._getStream();\n      yield* this._getMetadataLength();\n      this._remainingData && (yield* this._getMetadata());\n    } while (true);\n  }\n\n  *_getStream() {\n    this._remainingData = this._icyMetaInt;\n    this._stats.currentStreamBytesRemaining = this._icyMetaInt;\n\n    do {\n      const stream = yield* this._getNextValue();\n      this._stats.addStreamBytes = stream.length;\n\n      const streamPayload = { stream, stats: this._stats.stats };\n      /**\n       * Stream callback.\n       *\n       * @callback onStream\n       * @type {object}\n       * @property {Uint8Array} stream Stream bytes.\n       * @property {object} stats Statistics on bytes read.\n       */\n      this._onStreamPromise = this._onStream(streamPayload);\n\n      yield streamPayload;\n    } while (this._remainingData);\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes = 1;\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    let metadata = yield* this._getNextValue();\n    this._stats.addMetadataBytes = metadata.length;\n\n    if (this._remainingData) metadata = yield* this._storeMetadata(metadata);\n\n    const metadataPayload = {\n      metadata: this.parseMetadata(metadata),\n      stats: this._stats.stats,\n    };\n    /**\n     * Metadata callback.\n     *\n     * @callback onMetadata\n     * @type {object}\n     * @property {object} metadata Metadata key value pairs..\n     * @param {property} [metadata.StreamTitle] Title of the metadata update.\n     * @param {property} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n     * @property {object} stats Statistics on bytes read.\n     */\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n\n    yield metadataPayload;\n  }\n\n  *_storeMetadata(currentMetadata) {\n    // Store any partial metadata updates until a full metadata chunk can be parsed.\n    const metadataBuffer = new MetadataBuffer(\n      this._remainingData + currentMetadata.length\n    );\n    metadataBuffer.push(currentMetadata);\n\n    do {\n      const metadata = yield* this._getNextValue();\n      metadataBuffer.push(metadata);\n\n      this._stats.addMetadataBytes = metadata.length;\n    } while (this._remainingData);\n\n    return metadataBuffer.pop();\n  }\n\n  *_getNextValue() {\n    while (!this._buffer || this._currentPosition === this._buffer.length) {\n      this._buffer = yield; // if out of data, accept new data in the .next() call\n      this._currentPosition = 0;\n      this._stats.currentBytesRemaining = this._buffer.length;\n    }\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      this._remainingData + this._currentPosition\n    );\n\n    this._remainingData -= value.length;\n    this._currentPosition += value.length;\n\n    return value;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n * @extends ReadableStream\n */\nexport default class IcecastReadableStream extends ReadableStream {\n  /**\n   *\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { icyMetaInt, onStream = noOp, onMetadata }) {\n    const readerIterator = IcecastReadableStream.asyncIterator(response.body);\n\n    super({\n      async start(controller) {\n        const icecast = new IcecastMetadataReader({\n          icyMetaInt:\n            parseInt(response.headers.get(\"Icy-MetaInt\")) || icyMetaInt,\n          onMetadata,\n          onStream: (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of readerIterator) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n  }\n\n  /**\n   * @description Creates an async iterator from this ReadableStream.\n   * @returns {Symbol.asyncIterator} Async Iterator for this ReadableStream.\n   */\n  async startReading() {\n    for await (const i of IcecastReadableStream.asyncIterator(this)) {\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// http://www.mp3-tech.org/programmer/frame_header.html\n\nexport default class Header {\n  static headerByteLength = 4;\n\n  static bitrateMatrix = {\n    // bits | V1,L1 | V1,L2 | V1,L3 | V2,L1 | V2, L2 & L3\n    0b00000000: [\"free\", \"free\", \"free\", \"free\", \"free\"],\n    0b00010000: [32, 32, 32, 32, 8],\n    0b00100000: [64, 48, 40, 48, 16],\n    0b00110000: [96, 56, 48, 56, 24],\n    0b01000000: [128, 64, 56, 64, 32],\n    0b01010000: [160, 80, 64, 80, 40],\n    0b01100000: [192, 96, 80, 96, 48],\n    0b01110000: [224, 112, 96, 112, 56],\n    0b10000000: [256, 128, 112, 128, 64],\n    0b10010000: [288, 160, 128, 144, 80],\n    0b10100000: [320, 192, 160, 160, 96],\n    0b10110000: [352, 224, 192, 176, 112],\n    0b11000000: [384, 256, 224, 192, 128],\n    0b11010000: [416, 320, 256, 224, 144],\n    0b11100000: [448, 384, 320, 256, 160],\n    0b11110000: [\"bad\", \"bad\", \"bad\", \"bad\", \"bad\"],\n  };\n\n  static v1Layer1 = 0;\n  static v1Layer2 = 1;\n  static v1Layer3 = 2;\n  static v2Layer1 = 3;\n  static v2Layer23 = 4;\n\n  static layer12ModeExtensions = {\n    0b00000000: \"bands 4 to 31\",\n    0b00010000: \"bands 8 to 31\",\n    0b00100000: \"bands 12 to 31\",\n    0b00110000: \"bands 16 to 31\",\n  };\n\n  static layer3ModeExtensions = {\n    0b00000000: \"Intensity stereo off, MS stereo off\",\n    0b00010000: \"Intensity stereo on, MS stereo off\",\n    0b00100000: \"Intensity stereo off, MS stereo on\",\n    0b00110000: \"Intensity stereo on, MS stereo on\",\n  };\n\n  static layers = {\n    0b00000000: { description: \"reserved\" },\n    0b00000010: {\n      description: \"Layer III\",\n      framePadding: 1,\n      modeExtensions: Header.layer3ModeExtensions,\n      v1: {\n        bitrateIndex: Header.v1Layer3,\n        sampleLength: 1152,\n      },\n      v2: {\n        bitrateIndex: Header.v2Layer23,\n        sampleLength: 576,\n      },\n    },\n    0b00000100: {\n      description: \"Layer II\",\n      framePadding: 1,\n      modeExtensions: Header.layer12ModeExtensions,\n      sampleLength: 1152,\n      v1: {\n        bitrateIndex: Header.v1Layer2,\n      },\n      v2: {\n        bitrateIndex: Header.v2Layer23,\n      },\n    },\n    0b00000110: {\n      description: \"Layer I\",\n      framePadding: 4,\n      modeExtensions: Header.layer12ModeExtensions,\n      sampleLength: 384,\n      v1: {\n        bitrateIndex: Header.v1Layer1,\n      },\n      v2: {\n        bitrateIndex: Header.v2Layer1,\n      },\n    },\n  };\n\n  static mpegVersions = {\n    0b00000000: {\n      description: \"MPEG Version 2.5 (later extension of MPEG 2)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 11025,\n        0b00000100: 12000,\n        0b00001000: 8000,\n        0b00001100: \"reserved\",\n      },\n      sampleLengths: Header.v2SampleLengths,\n    },\n    0b00001000: { description: \"reserved\" },\n    0b00010000: {\n      description: \"MPEG Version 2 (ISO/IEC 13818-3)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 22050,\n        0b00000100: 24000,\n        0b00001000: 16000,\n        0b00001100: \"reserved\",\n      },\n      sampleLengths: Header.v2SampleLengths,\n    },\n    0b00011000: {\n      description: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n      layers: \"v1\",\n      sampleRates: {\n        0b00000000: 44100,\n        0b00000100: 48000,\n        0b00001000: 32000,\n        0b00001100: \"reserved\",\n      },\n      sampleLengths: Header.v1SampleLengths,\n    },\n  };\n\n  static protection = {\n    0b00000000: \"16bit CRC\",\n    0b00000001: \"none\",\n  };\n\n  static emphasis = {\n    0b00000000: \"none\",\n    0b00000001: \"50/15 ms\",\n    0b00000010: \"reserved\",\n    0b00000011: \"CCIT J.17\",\n  };\n\n  static channelModes = {\n    0b00000000: { channels: 2, description: \"Stereo\" },\n    0b01000000: { channels: 2, description: \"Joint stereo\" },\n    0b10000000: { channels: 2, description: \"Dual channel\" },\n    0b11000000: { channels: 1, description: \"Single channel (Mono)\" },\n  };\n\n  static getHeader(buffer) {\n    // Must be at least four bytes.\n    if (buffer.length < 4) return null;\n\n    // Frame sync (all bits must be set): `11111111|111`:\n    if (buffer[0] !== 0xff || buffer[1] < 0xe0) return null;\n\n    // Header's second (out of four) octet: `111xxxxx`\n    //\n    // * `...BB...`: MPEG Audio version ID\n    // * `.....CC.`: Layer description\n    // * `.......1`: Protection bit (0 - Protected by CRC (16bit CRC follows header), 1 = Not protected)\n    const mpegVersionBits = buffer[1] & 0b00011000;\n    const layerBits = buffer[1] & 0b00000110;\n    const protectionBit = buffer[1] & 0b00000001;\n\n    const header = {};\n\n    // Mpeg version (1, 2, 2.5)\n    const mpegVersion = Header.mpegVersions[mpegVersionBits];\n    if (mpegVersion.description === \"reserved\") return null;\n\n    // Layer (I, II, III)\n    if (Header.layers[layerBits].description === \"reserved\") return null;\n    const layer = {\n      ...Header.layers[layerBits],\n      ...Header.layers[layerBits][mpegVersion.layers],\n    };\n\n    header.mpegVersion = mpegVersion.description;\n    header.layer = layer.description;\n    header.sampleLength = layer.sampleLength;\n    header.protection = Header.protection[protectionBit];\n\n    // Header's third (out of four) octet: `EEEEFFGH`\n    //\n    // * `EEEE....`: Bitrate index. 1111 is invalid, everything else is accepted\n    // * `....FF..`: Sample rate\n    // * `......G.`: Padding bit, 0=frame not padded, 1=frame padded\n    // * `.......H`: Private bit.\n    const bitrateBits = buffer[2] & 0b11110000;\n    const sampleRateBits = buffer[2] & 0b00001100;\n    const paddingBit = buffer[2] & 0b00000010;\n    const privateBit = buffer[2] & 0b00000001;\n\n    header.bitrate = Header.bitrateMatrix[bitrateBits][layer.bitrateIndex];\n    if (header.bitrate === \"bad\") return null;\n\n    header.sampleRate = mpegVersion.sampleRates[sampleRateBits];\n    if (header.sampleRate === \"reserved\") return null;\n\n    header.framePadding = paddingBit >> 1 && layer.framePadding;\n    header.isPrivate = !!privateBit;\n\n    header.frameByteLength = Math.floor(\n      (125 * header.bitrate * header.sampleLength) / header.sampleRate +\n        header.framePadding\n    );\n    if (!header.frameByteLength) return null;\n\n    // Header's fourth (out of four) octet: `IIJJKLMM`\n    //\n    // * `II......`: Channel mode\n    // * `..JJ....`: Mode extension (only if joint stereo)\n    // * `....K...`: Copyright\n    // * `.....L..`: Original\n    // * `......MM`: Emphasis\n    const channelModeBits = buffer[3] & 0b11000000;\n    const modeExtensionBits = buffer[3] & 0b00110000;\n    const copyrightBits = buffer[3] & 0b00001000;\n    const originalBits = buffer[3] & 0b00000100;\n    const emphasisBits = buffer[3] & 0b00000011;\n\n    header.channelMode = Header.channelModes[channelModeBits].description;\n    header.channels = Header.channelModes[channelModeBits].channels;\n    header.modeExtension = layer.modeExtensions[modeExtensionBits];\n    header.isCopyrighted = !!(copyrightBits >> 3);\n    header.isOriginal = !!(originalBits >> 2);\n\n    header.emphasis = Header.emphasis[emphasisBits];\n    if (header.emphasis === \"reserved\") return null;\n\n    return new Header(header);\n  }\n\n  constructor(header) {\n    this._bitrate = header.bitrate;\n    this._channelMode = header.channelMode;\n    this._channels = header.channels;\n    this._emphasis = header.emphasis;\n    this._framePadding = header.framePadding;\n    this._isCopyrighted = header.isCopyrighted;\n    this._isOriginal = header.isOriginal;\n    this._isPrivate = header.isPrivate;\n    this._layer = header.layer;\n    this._modeExtension = header.modeExtension;\n    this._mpegVersion = header.mpegVersion;\n    this._protection = header.protection;\n    this._sampleLength = header.sampleLength;\n    this._sampleRate = header.sampleRate;\n    this._frameByteLength = header.frameByteLength;\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  get frameByteLength() {\n    return this._frameByteLength;\n  }\n\n  get sampleRate() {\n    return this._sampleRate;\n  }\n\n  get sampleLength() {\n    return this._sampleLength;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class Frame {\n  constructor(header, data) {\n    this._header = header;\n    this._data = data;\n  }\n\n  get header() {\n    return this._header;\n  }\n\n  get data() {\n    return this._data;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Header from \"./Header\";\nimport Frame from \"./Frame\";\n\nexport default class MPEGParser {\n  constructor() {\n    this._headerCache = new Map();\n  }\n\n  /**\n   * @private\n   * @description Caches valid headers so parsing only happens once\n   * @param {data} buffer Header data\n   */\n  _getHeader(buffer) {\n    const key = String.fromCharCode(...buffer.subarray(0, 4));\n\n    if (this._headerCache.has(key)) {\n      return this._headerCache.get(key);\n    } else {\n      const header = Header.getHeader(buffer);\n      if (header) {\n        this._headerCache.set(key, header);\n        return header;\n      }\n    }\n  }\n\n  /**\n   * @description Finds and returns an MPEG frame in the context of a stream. Frame will be undefined if no valid frame was found at the offset.\n   * @param {Uint8Array} data MPEG data that should contain an MPEG header, audio data, and then next MPEG header\n   * @param {number} offset Offset where frame should be\n   * @returns {object} Object containing the actual offset and frame.\n   */\n  readFrameStream(data, offset = 0) {\n    // try to get the header at the given offset\n    let header = this._getHeader(data.subarray(offset));\n\n    // find a header in the data\n    while (!header && offset + Header.headerByteLength < data.length) {\n      offset++;\n      header = this._getHeader(data.subarray(offset));\n    }\n\n    if (header) {\n      // check if there is a valid header immediately after this frame\n      const nextHeaderOffset = offset + header.frameByteLength;\n      if (nextHeaderOffset + Header.headerByteLength <= data.length) {\n        return this._getHeader(data.subarray(nextHeaderOffset))\n          ? {\n              offset,\n              frame: new Frame(header, data.subarray(offset, nextHeaderOffset)),\n            }\n          : { offset: nextHeaderOffset + Header.headerByteLength };\n      }\n    }\n\n    // there is a header, but there is not enough data to determine the next header\n    return {\n      offset,\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class Box {\n  static LENGTH_SIZE = 4;\n\n  /**\n   * @description ISO/IEC 14496-12 Part 12 ISO Base Media File Format Box\n   * @param {string} name Name of the box (i.e. 'moov', 'moof', 'traf')\n   * @param {object} params Object containing contents or boxes\n   * @param {Uint8Array} [params.contents] Array of bytes to insert into this box\n   * @param {Array<Box>} [params.boxes] Array of boxes to insert into this box\n   */\n  constructor(name, { contents = [], boxes = [] } = {}) {\n    this._contents = Uint8Array.from([\n      ...Box.stringToU8intArray(name),\n      ...contents,\n    ]);\n    this._boxes = boxes;\n  }\n\n  /**\n   * @description Converts a string to a byte array\n   * @param {string} name String to convert\n   * @returns {Uint8Array}\n   */\n  static stringToU8intArray(name) {\n    const array = [];\n    for (const char of name) {\n      array.push(char.charCodeAt(0));\n    }\n    return Uint8Array.from(array);\n  }\n\n  /**\n   * @description Converts a JavaScript number to Uint32\n   * @param {number} number Number to convert\n   * @returns {Uint32}\n   */\n  static getUint32(number) {\n    const bytes = new Uint8Array(4);\n    new DataView(bytes.buffer).setUint32(0, number, false);\n    return bytes;\n  }\n\n  /**\n   * @returns {number} Total length of this box and all contents\n   */\n  get length() {\n    return this._boxes.reduce(\n      (acc, box) => acc + box.length,\n      Box.LENGTH_SIZE + this._contents.length\n    );\n  }\n\n  /**\n   * @returns {Uint8Array} Contents of this box\n   */\n  get contents() {\n    const contents = [\n      ...this._contents,\n      ...this._boxes.flatMap((box) => [...box.contents]),\n    ];\n\n    return Uint8Array.from([\n      ...Box.getUint32(Box.LENGTH_SIZE + contents.length),\n      ...contents,\n    ]);\n  }\n\n  /**\n   * @description Adds a Box to this box\n   * @param {Box} box Box to add\n   */\n  addBox(box) {\n    if (box.constructor !== Box) {\n      console.error(\"Only an object of type Box can be appended\");\n      throw new Error(\"Not a box\");\n    }\n\n    this._boxes.push(box);\n  }\n\n  /**\n   * @description Inserts bytes into the contents of this box\n   * @param {Uint8Array} data Bytes to insert\n   * @param {number} index Position to insert bytes\n   */\n  insertBytes(data, index) {\n    const insertOffset = index + 4;\n    this._contents = Uint8Array.from([\n      ...this._contents.subarray(0, insertOffset),\n      ...data,\n      ...this._contents.subarray(insertOffset),\n    ]);\n  }\n\n  /**\n   * @description Appends data to the end of the contents of this box\n   * @param {Uint8Array} data Bytes to append\n   */\n  appendBytes(data) {\n    this._contents = Uint8Array.from([...this._contents, ...data]);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Box from \"./Box\";\n\n/**\n * @description Fragmented ISO Base Media File Format Builder is a class to\n * wrap MPEG frames in a MP4 container for streaming MP3 compatibility in Firefox.\n */\nexport default class FragmentedISOBMFFBuilder {\n  static getBoxContents(boxes) {\n    return Uint8Array.from(boxes.flatMap((box) => [...box.contents]));\n  }\n\n  /**\n   * @param {Header} header MPEG header\n   * @returns {Uint8Array} Generic Filetype and Movie Box information for MP3\n   */\n  static getMp3MovieBox(header) {\n    const boxes = [\n      new Box(\"ftyp\", {\n        /* prettier-ignore */\n        contents: [0x69,0x73,0x6F,0x6D,0x00,0x00,0x02,0x00,0x69,0x73,0x6F,0x6D,0x69,0x73,0x6F,0x32,0x69,0x73,0x6F,0x36,0x6D,0x70,0x34,0x31],\n      }),\n      new Box(\"moov\", {\n        boxes: [\n          new Box(\"mvhd\", {\n            /* prettier-ignore */\n            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe8,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02],\n          }),\n          new Box(\"trak\", {\n            boxes: [\n              new Box(\"tkhd\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n              }),\n              new Box(\"mdia\", {\n                boxes: [\n                  new Box(\"mdhd\", {\n                    /* prettier-ignore */\n                    contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n                      ...Box.getUint32(header.sampleRate), // sample rate\n                      0x00,0x00,0x00,0x00,0x55,0xc4,0x00,0x00],\n                  }),\n                  new Box(\"hdlr\", {\n                    /* prettier-ignore */\n                    contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x6f,0x75,0x6e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x6f,0x75,0x6e,0x64,0x48,0x61,0x6e,0x64,0x6c,0x65,0x72,0x00],\n                  }),\n                  new Box(\"minf\", {\n                    /* prettier-ignore */\n                    contents: [0x00,0x00,0x00,0x10,0x73,0x6d,0x68,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x64,0x69,0x6e,0x66,0x00,0x00,0x00,0x1c,0x64,0x72,0x65,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0c,0x75,0x72,0x6c,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xac,0x73,0x74,0x62,0x6c,0x00,0x00,0x00,0x60,0x73,0x74,0x73,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x50,0x6d,0x70,0x34,0x61,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n                      header.channels, // channel count\n                      0x00,0x10, // PCM bitrate (16bit)\n                      0x00,0x00,\n                      ...Box.getUint32(header.sampleRate), // sample rate\n                      0x00,0x00,0x00,0x00,0x00,0x2c,0x65,0x73,0x64,0x73,0x00,0x00,0x00,0x00,0x03,0x80,0x80,0x80,0x1b,0x00,0x01,0x00,0x04,0x80,0x80,0x80,0x0d,0x6b,0x15,0x00,0x00,0x00,0x00,0x04,0xe2,0x00,0x00,0x00,0x00,0x00,0x06,0x80,0x80,0x80,0x01,0x02,0x00,0x00,0x00,0x10,0x73,0x74,0x74,0x73,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x73,0x74,0x73,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,0x73,0x74,0x73,0x7a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x73,0x74,0x63,0x6f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                  }),\n                ],\n              }),\n            ],\n          }),\n          new Box(\"mvex\", {\n            /* prettier-ignore */\n            contents: [0x00,0x00,0x00,0x20,0x74,0x72,0x65,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n          }),\n          new Box(\"udta\", {\n            boxes: [\n              new Box(\"meta\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x00],\n              }),\n              new Box(\"hdlr\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6d,0x64,0x69,0x72,0x61,0x70,0x70,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n              }),\n              new Box(\"ilst\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x25,0xa9,0x74,0x6f,0x6f,0x00,0x00,0x00,0x1d,0x64,0x61,0x74,0x61,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x4c,0x61,0x76,0x66,0x35,0x38,0x2e,0x32,0x39,0x2e,0x31,0x30,0x30],\n              }),\n            ],\n          }),\n        ],\n      }),\n    ];\n\n    return FragmentedISOBMFFBuilder.getBoxContents(boxes);\n  }\n\n  /**\n   * @description Wraps MPEG frames into a Movie Fragment\n   * @param {Array<Frame>} frames MPEG frames to contain in this Movie Fragment\n   * @returns {Uint8Array} Movie Fragment containing the MPEG frames\n   */\n  static wrapMp3InMovieFragment(frames) {\n    const trun = new Box(\"trun\", {\n      /* prettier-ignore */\n      contents: [\n        0x00,0x00,0x02,0x01, //flags\n        ...Box.getUint32(frames.length), // number of frames\n        ...frames.flatMap((frame) => [...Box.getUint32(frame.data.length)]), // samples lengths per frame\n      ],\n    });\n\n    const boxes = [\n      new Box(\"moof\", {\n        boxes: [\n          new Box(\"traf\", {\n            /* prettier-ignore */\n            contents: [0x00,0x00,0x00,0x14,0x74,0x66,0x64,0x74,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n            boxes: [\n              new Box(\"tfhd\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x39,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xBF,\n                  ...Box.getUint32(frames[0].header.sampleLength), // default sample duration\n                  ...Box.getUint32(frames[0].data.length), // default sample size\n                  0x02,0x00,0x00,0x00],\n              }),\n              trun,\n            ],\n          }),\n        ],\n      }),\n      new Box(\"mdat\", {\n        contents: frames.flatMap((frame) => [...frame.data]),\n      }),\n    ];\n\n    trun.insertBytes(Box.getUint32(boxes[0].length + 12), 8); // data offset (moof length + mdat length + mdat)\n\n    return FragmentedISOBMFFBuilder.getBoxContents(boxes);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MPEGParser from \"./mpeg/MPEGParser\";\nimport FragmentedISOBMFFBuilder from \"./isobmff/FragmentedISOBMFFBuilder\";\n\n/**\n * @description Generator that takes in MP3 (MPEG) Data and yields Fragmented MP4 (ISOBMFF)\n */\nexport default class FragmentedMPEG {\n  static MIN_FRAMES = 2;\n  static MIN_FRAMES_LENGTH = 1022;\n\n  constructor() {\n    this._mpegParser = new MPEGParser();\n    this._frames = [];\n    this._mpegData = new Uint8Array(0);\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  /**\n   * @private\n   * @description Appends two buffers\n   * @param {Uint8Array} buf1\n   * @param {Uint8Array} buf2\n   */\n  static appendBuffers(buf1, buf2) {\n    const buf = new Uint8Array(buf1.length + buf2.length);\n    buf.set(buf1);\n    buf.set(buf2, buf1.length);\n\n    return buf;\n  }\n\n  /**\n   * @description Returns an iterator for the passed in MPEG data.\n   * @param {Uint8Array} chunk Next chunk of MPEG data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {Uint8Array} Movie Fragments containing MPEG frames\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @private\n   * @description Internal generator.\n   * @yields {Uint8Array} Movie Fragments containing MPEG frames\n   */\n  *_generator() {\n    let frames;\n    // start parsing out frames, save the first header\n    while (!frames) {\n      yield* this._sendReceiveData();\n      const parsedFrames = this._parseFrames();\n      this._firstHeader = parsedFrames.length && parsedFrames[0].header;\n      frames = this._getMovieFragment();\n    }\n\n    // yield the movie box along with a movie fragment containing frames\n    frames = FragmentedMPEG.appendBuffers(\n      FragmentedISOBMFFBuilder.getMp3MovieBox(this._firstHeader),\n      frames\n    );\n\n    // yield movie fragments containing frames\n    while (true) {\n      yield* this._sendReceiveData(frames);\n      this._parseFrames();\n      frames = this._getMovieFragment();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Uint8Array} frames\n   */\n  *_sendReceiveData(frames) {\n    let mpegData = yield frames;\n\n    while (!mpegData) {\n      mpegData = yield;\n    }\n\n    this._mpegData = FragmentedMPEG.appendBuffers(this._mpegData, mpegData);\n  }\n\n  /**\n   * @private\n   */\n  _parseFrames() {\n    let currentFrame = this._mpegParser.readFrameStream(this._mpegData);\n\n    while (currentFrame.frame) {\n      this._frames.push(currentFrame.frame);\n\n      currentFrame = this._mpegParser.readFrameStream(\n        this._mpegData,\n        currentFrame.offset + currentFrame.frame.header.frameByteLength\n      );\n    }\n    this._mpegData = this._mpegData.subarray(currentFrame.offset);\n\n    return this._frames;\n  }\n\n  /**\n   * @private\n   */\n  _getMovieFragment() {\n    if (\n      this._frames.length >= FragmentedMPEG.MIN_FRAMES &&\n      this._frames.reduce((acc, frame) => acc + frame.data.length, 0) >=\n        FragmentedMPEG.MIN_FRAMES_LENGTH\n    ) {\n      const movieFragment = FragmentedISOBMFFBuilder.wrapMp3InMovieFragment(\n        this._frames\n      );\n\n      this._frames = [];\n      return movieFragment;\n    }\n  }\n}\n","import IcecastMetadataQueue from \"./metadata-js/IcecastMetadataQueue\";\nimport IcecastReadableStream from \"./metadata-js/IcecastReadableStream\";\nimport FragmentedMPEG from \"../FragmentedMPEG/FragmentedMPEG\";\n\nexport default class MetadataPlayer {\n  constructor({ onMetadataUpdate }) {\n    this._icecastMetadataQueue = new IcecastMetadataQueue({\n      onMetadataUpdate: (meta) => onMetadataUpdate(meta),\n    });\n    this._audioElement = new Audio();\n    this._onMetadataUpdate = onMetadataUpdate;\n\n    this._playing = false;\n  }\n\n  get playing() {\n    return this._playing;\n  }\n\n  async _createMediaSource(mimeType) {\n    this._mediaSource = new MediaSource();\n    this._audioElement.src = URL.createObjectURL(this._mediaSource);\n\n    return new Promise((resolve) => {\n      this._mediaSource.addEventListener(\n        \"sourceopen\",\n        () => {\n          this._sourceBuffer = this._mediaSource.addSourceBuffer(mimeType);\n          this._sourceBuffer.mode = \"sequence\";\n          resolve();\n        },\n        { once: true }\n      );\n    });\n  }\n\n  _destroyMediaSource() {\n    this._mediaSource = null;\n    this._playPromise &&\n      this._playPromise\n        .then(() => this._audioElement.removeAttribute(\"src\"))\n        .then(() => this._audioElement.load())\n        .catch(() => {});\n  }\n\n  async _waitForSourceBuffer() {\n    return new Promise((resolve) => {\n      this._sourceBuffer.addEventListener(\"updateend\", resolve, { once: true });\n    });\n  }\n\n  async _appendSourceBuffer(chunk) {\n    this._sourceBuffer.appendBuffer(chunk);\n    await this._waitForSourceBuffer();\n\n    if (this._audioElement.currentTime > 0) {\n      this._sourceBuffer.remove(0, this._audioElement.currentTime);\n      await this._waitForSourceBuffer();\n    }\n  }\n\n  async fetchMimeType(endpoint) {\n    return fetch(endpoint, {\n      method: \"HEAD\",\n      mode: \"cors\",\n    });\n  }\n\n  async fetchStream(endpoint) {\n    this._controller = new AbortController();\n\n    return fetch(endpoint, {\n      method: \"GET\",\n      headers: {\n        \"Icy-MetaData\": \"1\",\n      },\n      signal: this._controller.signal,\n    });\n  }\n\n  async getMediaSource(res) {\n    const mimeType = res.headers.get(\"content-type\");\n\n    if (MediaSource.isTypeSupported(mimeType)) {\n      await this._createMediaSource(mimeType);\n\n      this._onStream = ({ stream }) => this._appendSourceBuffer(stream);\n    } else if (\n      mimeType === \"audio/mpeg\" &&\n      MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    ) {\n      await this._createMediaSource('audio/mp4; codecs=\"mp3\"');\n\n      this._mp3ToMp4 = new FragmentedMPEG();\n      this._onStream = async ({ stream }) => {\n        for await (const movieFragment of this._mp3ToMp4.iterator(stream)) {\n          await this._appendSourceBuffer(movieFragment);\n        }\n      };\n    } else {\n      throw new Error(\n        `Your browser does not support MediaSource ${mimeType}. Try using Google Chrome.`\n      );\n    }\n\n    return this._streamPromise;\n  }\n\n  play(endpoint, icyMetaInt) {\n    if (this._playing) this.stop();\n    this._playing = true;\n    this._streamPromise = this.fetchStream(endpoint);\n\n    Promise.race([\n      this.fetchMimeType(endpoint).catch(() => this._streamPromise),\n      this._streamPromise,\n    ])\n      .then((res) => this.getMediaSource(res))\n      .then(async (res) => {\n        this._playPromise = this._audioElement.play();\n        this._isInitialMetadata = true;\n\n        await new IcecastReadableStream(res, {\n          icyMetaInt,\n          onStream: this._onStream,\n          onMetadata: (value) => {\n            this._isInitialMetadata\n              ? this._onMetadataUpdate(value.metadata)\n              : this._icecastMetadataQueue.addMetadata(\n                  value,\n                  this._sourceBuffer.timestampOffset -\n                    this._audioElement.currentTime\n                );\n            this._isInitialMetadata = false;\n          },\n        }).startReading();\n      })\n      .catch((e) => {\n        if (e.name !== \"AbortError\") {\n          this._onMetadataUpdate(`Error Connecting: ${e.message}`);\n        }\n        this._destroyMediaSource();\n      });\n  }\n\n  stop() {\n    this._playing = false;\n    this._controller.abort();\n    this._icecastMetadataQueue.purgeMetadataQueue();\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\"\n});\n\nvar SvgPlay = function SvgPlay(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPlay, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/play.0187bd2f.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z\"\n});\n\nvar SvgPause = function SvgPause(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPause, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/pause.b0b65543.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from \"react\";\nimport MetadataPlayer from \"../icecast/MetadataPlayer\";\nimport { ReactComponent as Play } from \"./play.svg\";\nimport { ReactComponent as Pause } from \"./pause.svg\";\nimport styles from \"./Player.module.css\";\nimport { useCallback } from \"react\";\n\nconst SELECT_STATION = \"Select a station\";\nconst SELECT_OR_PLAY = \"Select a station or press play\";\nconst LOADING = \"Loading...\";\nconst VISIT_STATION = \"Visit this station at \";\n\nconst useMetadataPlayer = (station, onMetadataUpdate) => {\n  const [metadataPlayer] = useState(\n    new MetadataPlayer({\n      onMetadataUpdate: (meta) => {\n        console.log(meta);\n        onMetadataUpdate(meta);\n      },\n    })\n  );\n\n  const play = useCallback(() => {\n    onMetadataUpdate(LOADING);\n    metadataPlayer.play(station.endpoint, station.metaInt);\n  }, [onMetadataUpdate, metadataPlayer, station]);\n\n  const stop = useCallback(() => {\n    onMetadataUpdate(SELECT_OR_PLAY);\n    metadataPlayer.stop();\n  }, [onMetadataUpdate, metadataPlayer]);\n\n  useEffect(() => {\n    station && play();\n  }, [station, play]);\n\n  const toggle = () => (metadataPlayer.playing ? stop() : play());\n\n  return [metadataPlayer.playing, toggle];\n};\n\nexport default ({ station }) => {\n  const [metadata, setMetadata] = useState(SELECT_STATION);\n  const [isPlaying, toggle] = useMetadataPlayer(station, setMetadata);\n\n  return (\n    <div className={styles.player}>\n      <button\n        disabled={!Boolean(station)}\n        className={styles.button}\n        onClick={toggle}\n      >\n        {isPlaying ? <Pause /> : <Play />}\n      </button>\n      <div>\n        <p className={styles.metadata}>\n          {typeof metadata === \"object\" ? metadata.StreamTitle : metadata}\n        </p>\n        {station?.link && (\n          <div className={styles.visitStation}>\n            {VISIT_STATION}\n            <a\n              className={styles.link}\n              href={station.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {station.name}\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styles from \"./StationSelector.module.css\";\n\nconst Station = ({ id, station, changeStation }) => (\n  <div className={styles.station}>\n    <input\n      type=\"radio\"\n      className={styles.stationRadio}\n      id={id}\n      name=\"stations\"\n      onChange={() => changeStation(station)}\n    ></input>\n    <label className={styles.stationLabel} htmlFor={id}>\n      <div className={styles.stationName}>{station.name}</div>\n      <div className={styles.stationDescription}>{station.description}</div>\n    </label>\n  </div>\n);\n\nexport default (props) =>\n  props.stations.map((station, idx) => (\n    <Station\n      key={idx}\n      station={station}\n      id={idx}\n      changeStation={props.changeStation}\n    />\n  ));\n","import React from \"react\";\nimport styles from \"./About.module.css\";\n\nexport default () => (\n  <div className={styles.about}>\n    <a\n      className={styles.link}\n      href=\"https://github.com/eshaz/icecast-metadata-js\"\n    >\n      <div>icecast-metadata-js</div>\n      <div className={styles.subLink}>\n        https://github.com/eshaz/icecast-metadata-js\n      </div>\n    </a>\n    <div className={styles.description}>\n      Javascript library that reads, parses, and queues realtime metadata from\n      an Icecast stream.\n    </div>\n    <div className={styles.disclaimer}>\n      Stations are presented here for demonstration purposes only.\n    </div>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport Player from \"./Player/Player\";\nimport StationSelector from \"./StationSelector/StationSelector\";\nimport stations from \"./stations.json\";\nimport styles from \"./App.module.css\";\nimport About from \"./About/About\";\n\nfunction App() {\n  const [station, setStation] = useState();\n\n  return (\n    <>\n      <header className={styles.header}>\n        <About />\n      </header>\n      <StationSelector stations={stations} changeStation={setStation} />\n      <footer className={styles.footer}>\n        <Player station={station}></Player>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Player/Player.module.css","StationSelector/StationSelector.module.css","About/About.module.css","App.module.css","icecast/metadata-js/IcecastMetadataQueue.js","icecast/metadata-js/MetadataBuffer.js","icecast/metadata-js/IcecastMetadataReader.js","icecast/metadata-js/IcecastReadableStream.js","FragmentedMPEG/codecs/CodecHeader.js","FragmentedMPEG/codecs/mpeg/MPEGHeader.js","FragmentedMPEG/codecs/CodecFrame.js","FragmentedMPEG/codecs/mpeg/MPEGFrame.js","FragmentedMPEG/codecs/aac/AACHeader.js","FragmentedMPEG/codecs/aac/AACFrame.js","FragmentedMPEG/codecs/CodecParser.js","FragmentedMPEG/isobmff/ISOBMFFObject.js","FragmentedMPEG/isobmff/Box.js","FragmentedMPEG/isobmff/ESTag.js","FragmentedMPEG/isobmff/FragmentedISOBMFFBuilder.js","FragmentedMPEG/FragmentedMPEG.js","icecast/MetadataPlayer.js","Player/play.svg","Player/pause.svg","Player/Player.jsx","StationSelector/StationSelector.jsx","About/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IcecastMetadataQueue","icyBr","onMetadataUpdate","this","_icyBr","_onMetadataUpdate","_metadataQueue","bufferOffset","metadata","_enqueueMetadata","bytesRead","forEach","i","clearTimeout","_timeoutId","time","push","setTimeout","_dequeueMetadata","shift","map","MetadataBuffer","expectedLength","_buffer","Uint8Array","_length","data","set","length","Stats","_totalBytesRead","_streamBytesRead","_metadataLengthBytesRead","_metadataBytesRead","_currentBytesRemaining","_currentStreamBytesRemaining","_currentMetadataBytesRemaining","totalBytesRead","streamBytesRead","metadataLengthBytesRead","metadataBytesRead","currentBytesRemaining","currentStreamBytesRemaining","currentMetadataBytesRemaining","bytes","noOp","IcecastMetadataReader","icyMetaInt","onStream","onMetadata","_icyMetaInt","_remainingData","_currentPosition","_stats","_decoder","TextDecoder","_onStream","_onMetadata","_onStreamPromise","Promise","resolve","_onMetadataPromise","_generator","next","metadataBytes","parseMetadataString","decode","chunk","value","_getStream","_getMetadataLength","_getMetadata","_getNextValue","stream","addStreamBytes","streamPayload","stats","addMetadataLengthBytes","addMetadataBytes","_storeMetadata","metadataPayload","parseMetadata","currentMetadata","metadataBuffer","pop","subarray","metadataString","matchAll","match","IcecastReadableStream","response","readerIterator","asyncIterator","body","start","controller","icecast","parseInt","headers","get","enqueue","asyncReadAll","close","readableStream","reader","getReader","Symbol","read","ReadableStream","CodecHeader","header","_channelMode","channelMode","_channels","channels","_dataByteLength","dataByteLength","_headerByteLength","headerByteLength","_isOriginal","isOriginal","_isPrivate","isPrivate","_layer","layer","_mpegVersion","mpegVersion","_protection","protection","_sampleRate","sampleRate","_sampleLength","sampleLength","_mimeType","MPEGHeader","_bitrate","bitrate","_emphasis","emphasis","_framePadding","framePadding","_isCopyrighted","isCopyrighted","_modeExtension","modeExtension","buffer","mpegVersionBits","layerBits","protectionBit","mpegVersions","description","layers","bitrateBits","sampleRateBits","paddingBit","privateBit","bitrateMatrix","bitrateIndex","sampleRates","Math","floor","channelModeBits","modeExtensionBits","copyrightBit","originalBit","emphasisBits","channelModes","modeExtensions","0","v1Layer1","v1Layer2","v1Layer3","v2Layer1","v2Layer23","layer12ModeExtensions","layer3ModeExtensions","v1","v2","CodecFrame","_header","_data","MPEGFrame","AACHeader","_bits","bits","_copyrightId","copyrightId","_copyrightIdStart","copyrightIdStart","_bufferFullness","bufferFullness","_isHome","isHome","_numberAACFrames","numberAACFrames","_profile","profile","profileBits","DataView","from","getUint16","homeBit","copyrightIdBit","copyrightIdStartBit","frameLengthBits","getUint32","bufferFullnessBits","audioSpecificConfig","setUint16","AACFrame","CodecParser","mimeType","_frameClass","_getHeader","_getAACHeader","_headerLength","_getMPEGHeader","_headerCache","Map","getHeader","key","String","fromCharCode","has","offset","nextHeaderOffset","frame","ISOBMFFObject","name","contents","objects","_name","_contents","_objects","index","LENGTH_SIZE","slice","object","flatMap","obj","reduce","acc","Box","boxes","stringToByteArray","box","constructor","console","error","Error","addObject","array","char","charCodeAt","number","setUint32","ESTag","tagNumber","tags","tag","FragmentedISOBMFFBuilder","streamDescriptorTag","esdsCodecs","addTag","getBoxContents","frames","trun","insertBytes","FragmentedMPEG","_codecParser","_fragmentedISOBMFFBuilder","_frames","_codecData","_sendReceiveData","_parseFrames","fMP4","appendBuffers","getMovieBox","wrapFrames","codecData","currentFrame","readFrameStream","MIN_FRAMES","MIN_FRAMES_LENGTH","buf1","buf2","buf","MetadataPlayer","_icecastMetadataQueue","meta","_audioElement","Audio","_playing","_mediaSource","MediaSource","src","URL","createObjectURL","addEventListener","_sourceBuffer","addSourceBuffer","mode","once","_playPromise","then","removeAttribute","load","catch","appendBuffer","_waitForSourceBuffer","currentTime","remove","endpoint","fetch","method","_controller","AbortController","signal","res","isTypeSupported","_createMediaSource","_appendSourceBuffer","_fMP4Wrapper","a","iterator","movieFragment","_streamPromise","stop","fetchStream","race","fetchMimeType","getMediaSource","play","_isInitialMetadata","addMetadata","timestampOffset","startReading","e","message","_destroyMediaSource","abort","purgeMetadataQueue","_extends","Object","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","fill","d","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","station","useState","log","metadataPlayer","useCallback","metaInt","useEffect","playing","useMetadataPlayer","isPlaying","toggle","className","styles","player","disabled","Boolean","button","onClick","StreamTitle","link","visitStation","href","rel","Station","id","changeStation","type","stationRadio","onChange","stationLabel","htmlFor","stationName","stationDescription","stations","idx","about","subLink","disclaimer","App","setStation","About","StationSelector","footer","Player","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d228c441.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"Player_player__1vYfQ\",\"metadata\":\"Player_metadata__3j7ae\",\"button\":\"Player_button__297uW\",\"link\":\"Player_link__2k87w\",\"visitStation\":\"Player_visitStation__2xKeH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"StationSelector_station__3a44c\",\"stationRadio\":\"StationSelector_stationRadio__1FTGQ\",\"stationLabel\":\"StationSelector_stationLabel__1DbUR\",\"stationName\":\"StationSelector_stationName__1hB_K\",\"stationDescription\":\"StationSelector_stationDescription__36TBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__2v-0B\",\"link\":\"About_link__1z8T1\",\"subLink\":\"About_subLink__n5KCY\",\"description\":\"About_description__3WN3o\",\"disclaimer\":\"About_disclaimer__2gOk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"footer\":\"App_footer__29Fsv\"};","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class IcecastMetadataQueue {\n  /**\n   * @description Schedules updates up to the millisecond for Icecast Metadata from the response body of an Icecast stream mountpoint\n   * @description The accuracy of metadata updates is a direct relationship of the icyMetaInt\n   * @param {Object} IcecastMetadataQueue constructor parameter\n   * @param {number} [IcecastMetadataQueue.icyBr] Bitrate of audio stream used to increase accuracy when to updating metadata\n   * @param {onMetadataUpdate} [IcecastMetadataQueue.onMetadataUpdate] Callback executed when metadata is scheduled to update\n   *\n   * @callback onMetadataUpdate\n   * @param {Object} metadata Object containing all metadata received.\n   * @param {string} [metadata.StreamTitle] Title of the metadata update.\n   * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n   * @param {number} time Time in seconds the metadata should be displayed / recorded\n   *\n   */\n\n  constructor({ icyBr, onMetadataUpdate = () => {} }) {\n    this._icyBr = icyBr;\n    this._onMetadataUpdate = onMetadataUpdate;\n    this._metadataQueue = [];\n  }\n\n  /**\n   * @description Returns the metadata queued for updates\n   * @type {{metadata: string, time: number}[]} Queued metadata\n   */\n  get metadataQueue() {\n    return this._metadataQueue.map(({ metadata, time }) => ({\n      metadata,\n      time,\n    }));\n  }\n\n  /**\n   *\n   * @param {object} metadata Metadata object returned from IcecastMetadataReader\n   * @param {number} bufferOffset Total buffered audio in seconds\n   */\n  addMetadata({ metadata }, bufferOffset) {\n    /**\n     * Metadata time is derived from the total number of stream bytes read\n     * since the latest buffer input. The buffer offset should be the total\n     * seconds of audio in the player buffer when the metadata was read.\n     */\n\n    this._enqueueMetadata(metadata, bufferOffset);\n  }\n\n  /**\n   * @description Calculates audio stream length based on bitrate\n   * @param {number} bytesRead Number of bytes\n   * @type {number} Seconds\n   */\n  getTimeByBytes(bytesRead) {\n    return this._icyBr ? bytesRead / (this._icyBr * 125) : 0;\n  }\n\n  /**\n   * @description Clears all metadata updates and empties the queue\n   */\n  purgeMetadataQueue() {\n    this._metadataQueue.forEach((i) => clearTimeout(i._timeoutId));\n    this._metadataQueue = [];\n  }\n\n  _enqueueMetadata(metadata, time) {\n    this._metadataQueue.push({\n      _timeoutId: setTimeout(() => {\n        this._dequeueMetadata();\n      }, time * 1000), // trigger timeout relative to play position\n      metadata,\n    });\n  }\n\n  _dequeueMetadata() {\n    const { metadata } = this._metadataQueue.shift();\n    this._onMetadataUpdate(metadata);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n// Use fast buffer allocation if this is a NodeJS runtime or Uint8Array if a browser runtime\nconst bufferFunction = (length) => new Uint8Array(length);\n\n/**\n * @description Stores a collection of buffers as an array.\n */\nexport default class MetadataBuffer {\n  constructor(expectedLength) {\n    this._buffer = bufferFunction(expectedLength);\n    this._length = 0;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * @type {Uint8Array} Returns all stored data\n   */\n  pop() {\n    return this._buffer;\n  }\n\n  push(data) {\n    this._buffer.set(data, this._length);\n    this._length += data.length;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MetadataBuffer from \"./MetadataBuffer\";\n\nclass Stats {\n  constructor() {\n    this._totalBytesRead = 0;\n    this._streamBytesRead = 0;\n    this._metadataLengthBytesRead = 0;\n    this._metadataBytesRead = 0;\n\n    this._currentBytesRemaining = 0;\n    this._currentStreamBytesRemaining = 0;\n    this._currentMetadataBytesRemaining = 0;\n  }\n\n  get stats() {\n    return {\n      totalBytesRead: this._totalBytesRead,\n      streamBytesRead: this._streamBytesRead,\n      metadataLengthBytesRead: this._metadataLengthBytesRead,\n      metadataBytesRead: this._metadataBytesRead,\n      currentBytesRemaining: this._currentBytesRemaining,\n      currentStreamBytesRemaining: this._currentStreamBytesRemaining,\n      currentMetadataBytesRemaining: this._currentMetadataBytesRemaining,\n    };\n  }\n\n  set addStreamBytes(bytes) {\n    this._streamBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentStreamBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataLengthBytes(bytes) {\n    this._metadataLengthBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set addMetadataBytes(bytes) {\n    this._metadataBytesRead += bytes;\n    this._totalBytesRead += bytes;\n    this._currentMetadataBytesRemaining -= bytes;\n    this._currentBytesRemaining -= bytes;\n  }\n\n  set currentBytesRemaining(bytes) {\n    this._currentBytesRemaining = bytes;\n  }\n\n  set currentStreamBytesRemaining(bytes) {\n    this._currentStreamBytesRemaining = bytes;\n  }\n\n  set currentMetadataBytesRemaining(bytes) {\n    this._currentMetadataBytesRemaining = bytes;\n  }\n}\n\nconst noOp = () => {};\n\n/**\n * @description Splits Icecast raw response into stream bytes and metadata key / value pairs.\n * @param {number} icyMetaInt Interval in bytes of metadata updates returned by the Icecast server\n *\n * @callback onMetadata\n * @param {object} value Object containing Metadata and Statistics\n * @param {object} metadata Object containing the metadata received.\n * @param {string} [metadata.StreamTitle] Title of the metadata update.\n * @param {string} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n *\n * @callback onStream\n * @param {object} value Object containing Stream data and Statistics\n * @param {Uint8Array} stream Object containing the stream buffer.\n * @param {object} stats Object containing statistics on how many bytes were read and the current read position.\n */\nexport default class IcecastMetadataReader {\n  constructor({ icyMetaInt, onStream = noOp, onMetadata = noOp }) {\n    this._icyMetaInt = icyMetaInt;\n    this._remainingData = 0;\n    this._currentPosition = 0;\n    this._buffer = null;\n    this._stats = new Stats();\n    this._decoder = new TextDecoder(\"utf-8\");\n\n    this._onStream = onStream;\n    this._onMetadata = onMetadata;\n    this._onStreamPromise = Promise.resolve();\n    this._onMetadataPromise = Promise.resolve();\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  /**\n   * @description Parses an Icecast metadata string into key value pairs.\n   * @param {string} metadataString Icecast formatted metadata string. (i.e. \"StreamTitle='A Title';\")\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  static parseMetadataString(metadataString) {\n    /**\n     * Metadata is a string of key='value' pairs delimited by a semicolon.\n     * The string is a fixed length and any unused bytes at the end are 0x00.\n     * i.e. \"StreamTitle='The Stream Title';StreamUrl='https://example.com';\\0\\0\\0\\0\\0\\0\"\n     */\n\n    const metadata = {};\n    // [{key: \"StreamTitle\", val: \"The Stream Title\"}, {key: \"StreamUrl\", val: \"https://example.com\"}]\n    for (let match of metadataString.matchAll(\n      /(?<key>[^\\0]+?)='(?<val>[^\\0]*?)(;$|';|'$|$)/g\n    )) {\n      metadata[match[\"groups\"][\"key\"]] = match[\"groups\"][\"val\"];\n    }\n    // {StreamTitle: \"The Stream Title\", StreamUrl: \"https://example.com\"}\n    return metadata;\n  }\n\n  /**\n   * @description Parses Icecast metadata bytes into key value pairs.\n   * @param {Uint8Array} metadataBytes Bytes containing Icecast metadata.\n   * @returns {object} Parsed metadata key value pairs. (i.e. {StreamTitle: \"A Title\"})\n   */\n  parseMetadata(metadataBytes) {\n    return IcecastMetadataReader.parseMetadataString(\n      this._decoder.decode(metadataBytes)\n    );\n  }\n\n  /**\n   * @description Returns an iterator that iterates over the passed in data.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the passed in chunk and calls the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  readAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {}\n  }\n\n  /**\n   * @description Returns an async iterator that iterates over the passed in data and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {object} Object containing stream or metadata.\n   */\n  async *asyncIterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n      yield i.value;\n    }\n  }\n\n  /**\n   * @description Reads all data in the chunk and awaits the onStream and onMetadata callbacks.\n   * @param {Uint8Array} chunk Next chunk of data to read\n   */\n  async asyncReadAll(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      await this._onStreamPromise;\n      await this._onMetadataPromise;\n    }\n  }\n\n  *_generator() {\n    do {\n      yield* this._getStream();\n      yield* this._getMetadataLength();\n      this._remainingData && (yield* this._getMetadata());\n    } while (true);\n  }\n\n  *_getStream() {\n    this._remainingData = this._icyMetaInt;\n    this._stats.currentStreamBytesRemaining = this._icyMetaInt;\n\n    do {\n      const stream = yield* this._getNextValue();\n      this._stats.addStreamBytes = stream.length;\n\n      const streamPayload = { stream, stats: this._stats.stats };\n      /**\n       * Stream callback.\n       *\n       * @callback onStream\n       * @type {object}\n       * @property {Uint8Array} stream Stream bytes.\n       * @property {object} stats Statistics on bytes read.\n       */\n      this._onStreamPromise = this._onStream(streamPayload);\n\n      yield streamPayload;\n    } while (this._remainingData);\n  }\n\n  *_getMetadataLength() {\n    this._remainingData = 1;\n\n    do {\n      this._remainingData = (yield* this._getNextValue())[0] * 16;\n    } while (this._remainingData === 1);\n\n    this._stats.addMetadataLengthBytes = 1;\n  }\n\n  *_getMetadata() {\n    this._stats.currentMetadataBytesRemaining = this._remainingData;\n\n    let metadata = yield* this._getNextValue();\n    this._stats.addMetadataBytes = metadata.length;\n\n    if (this._remainingData) metadata = yield* this._storeMetadata(metadata);\n\n    const metadataPayload = {\n      metadata: this.parseMetadata(metadata),\n      stats: this._stats.stats,\n    };\n    /**\n     * Metadata callback.\n     *\n     * @callback onMetadata\n     * @type {object}\n     * @property {object} metadata Metadata key value pairs..\n     * @param {property} [metadata.StreamTitle] Title of the metadata update.\n     * @param {property} [metadata.StreamUrl] Url (usually album art) of the metadata update.\n     * @property {object} stats Statistics on bytes read.\n     */\n    this._onMetadataPromise = this._onMetadata(metadataPayload);\n\n    yield metadataPayload;\n  }\n\n  *_storeMetadata(currentMetadata) {\n    // Store any partial metadata updates until a full metadata chunk can be parsed.\n    const metadataBuffer = new MetadataBuffer(\n      this._remainingData + currentMetadata.length\n    );\n    metadataBuffer.push(currentMetadata);\n\n    do {\n      const metadata = yield* this._getNextValue();\n      metadataBuffer.push(metadata);\n\n      this._stats.addMetadataBytes = metadata.length;\n    } while (this._remainingData);\n\n    return metadataBuffer.pop();\n  }\n\n  *_getNextValue() {\n    while (!this._buffer || this._currentPosition === this._buffer.length) {\n      this._buffer = yield; // if out of data, accept new data in the .next() call\n      this._currentPosition = 0;\n      this._stats.currentBytesRemaining = this._buffer.length;\n    }\n    const value = this._buffer.subarray(\n      this._currentPosition,\n      this._remainingData + this._currentPosition\n    );\n\n    this._remainingData -= value.length;\n    this._currentPosition += value.length;\n\n    return value;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport IcecastMetadataReader from \"./IcecastMetadataReader\";\n\nconst noOp = () => {};\n\n/**\n * @description Browser ReadableStream wrapper for IcecastMetadataReader\n * @extends ReadableStream\n */\nexport default class IcecastReadableStream extends ReadableStream {\n  /**\n   *\n   * @param {ReadableStream} response ReadableStream for raw Icecast response data\n   * @param {object} options Configuration options for IcecastMetadataReader\n   * @see IcecastMetadataReader for information on the options parameter\n   */\n  constructor(response, { icyMetaInt, onStream = noOp, onMetadata }) {\n    const readerIterator = IcecastReadableStream.asyncIterator(response.body);\n\n    super({\n      async start(controller) {\n        const icecast = new IcecastMetadataReader({\n          icyMetaInt:\n            parseInt(response.headers.get(\"Icy-MetaInt\")) || icyMetaInt,\n          onMetadata,\n          onStream: (value) => {\n            controller.enqueue(value.stream);\n            return onStream(value);\n          },\n        });\n\n        for await (const chunk of readerIterator) {\n          await icecast.asyncReadAll(chunk);\n        }\n\n        controller.close();\n      },\n    });\n  }\n\n  /**\n   * @description Creates an async iterator from this ReadableStream.\n   * @returns {Symbol.asyncIterator} Async Iterator for this ReadableStream.\n   */\n  async startReading() {\n    for await (const i of IcecastReadableStream.asyncIterator(this)) {\n    }\n  }\n\n  /**\n   * @description Wraps a ReadableStream as an Async Iterator.\n   * @param {ReadableStream} readableStream ReadableStream to convert to AsyncIterator\n   * @returns {Symbol.asyncIterator} Async Iterator that wraps the ReadableStream\n   */\n  static asyncIterator(readableStream) {\n    const reader = readableStream.getReader();\n    return {\n      [Symbol.asyncIterator]: () => ({\n        next: () => reader.read(),\n      }),\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class CodecHeader {\n  /**\n   * @private\n   */\n  constructor(header) {\n    this._channelMode = header.channelMode;\n    this._channels = header.channels;\n    this._dataByteLength = header.dataByteLength;\n    this._headerByteLength = header.headerByteLength;\n    this._isOriginal = header.isOriginal;\n    this._isPrivate = header.isPrivate;\n    this._layer = header.layer;\n    this._mpegVersion = header.mpegVersion;\n    this._protection = header.protection;\n    this._sampleRate = header.sampleRate;\n    this._sampleLength = header.sampleLength;\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  get dataByteLength() {\n    return this._dataByteLength;\n  }\n\n  get headerByteLength() {\n    return this._headerByteLength;\n  }\n\n  get mimeType() {\n    return this._mimeType;\n  }\n\n  get sampleRate() {\n    return this._sampleRate;\n  }\n\n  get sampleLength() {\n    return this._sampleLength;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecHeader from \"../CodecHeader\";\n\n// http://www.mp3-tech.org/programmer/frame_header.html\n\nexport default class MPEGHeader extends CodecHeader {\n  static bitrateMatrix = {\n    // bits | V1,L1 | V1,L2 | V1,L3 | V2,L1 | V2, L2 & L3\n    0b00000000: [\"free\", \"free\", \"free\", \"free\", \"free\"],\n    0b00010000: [32, 32, 32, 32, 8],\n    0b00100000: [64, 48, 40, 48, 16],\n    0b00110000: [96, 56, 48, 56, 24],\n    0b01000000: [128, 64, 56, 64, 32],\n    0b01010000: [160, 80, 64, 80, 40],\n    0b01100000: [192, 96, 80, 96, 48],\n    0b01110000: [224, 112, 96, 112, 56],\n    0b10000000: [256, 128, 112, 128, 64],\n    0b10010000: [288, 160, 128, 144, 80],\n    0b10100000: [320, 192, 160, 160, 96],\n    0b10110000: [352, 224, 192, 176, 112],\n    0b11000000: [384, 256, 224, 192, 128],\n    0b11010000: [416, 320, 256, 224, 144],\n    0b11100000: [448, 384, 320, 256, 160],\n    0b11110000: [\"bad\", \"bad\", \"bad\", \"bad\", \"bad\"],\n  };\n\n  static v1Layer1 = 0;\n  static v1Layer2 = 1;\n  static v1Layer3 = 2;\n  static v2Layer1 = 3;\n  static v2Layer23 = 4;\n\n  static layer12ModeExtensions = {\n    0b00000000: \"bands 4 to 31\",\n    0b00010000: \"bands 8 to 31\",\n    0b00100000: \"bands 12 to 31\",\n    0b00110000: \"bands 16 to 31\",\n  };\n\n  static layer3ModeExtensions = {\n    0b00000000: \"Intensity stereo off, MS stereo off\",\n    0b00010000: \"Intensity stereo on, MS stereo off\",\n    0b00100000: \"Intensity stereo off, MS stereo on\",\n    0b00110000: \"Intensity stereo on, MS stereo on\",\n  };\n\n  static layers = {\n    0b00000000: { description: \"reserved\" },\n    0b00000010: {\n      description: \"Layer III\",\n      framePadding: 1,\n      modeExtensions: MPEGHeader.layer3ModeExtensions,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer3,\n        sampleLength: 1152,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer23,\n        sampleLength: 576,\n      },\n    },\n    0b00000100: {\n      description: \"Layer II\",\n      framePadding: 1,\n      modeExtensions: MPEGHeader.layer12ModeExtensions,\n      sampleLength: 1152,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer2,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer23,\n      },\n    },\n    0b00000110: {\n      description: \"Layer I\",\n      framePadding: 4,\n      modeExtensions: MPEGHeader.layer12ModeExtensions,\n      sampleLength: 384,\n      v1: {\n        bitrateIndex: MPEGHeader.v1Layer1,\n      },\n      v2: {\n        bitrateIndex: MPEGHeader.v2Layer1,\n      },\n    },\n  };\n\n  static mpegVersions = {\n    0b00000000: {\n      description: \"MPEG Version 2.5 (later extension of MPEG 2)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 11025,\n        0b00000100: 12000,\n        0b00001000: 8000,\n        0b00001100: \"reserved\",\n      },\n    },\n    0b00001000: { description: \"reserved\" },\n    0b00010000: {\n      description: \"MPEG Version 2 (ISO/IEC 13818-3)\",\n      layers: \"v2\",\n      sampleRates: {\n        0b00000000: 22050,\n        0b00000100: 24000,\n        0b00001000: 16000,\n        0b00001100: \"reserved\",\n      },\n    },\n    0b00011000: {\n      description: \"MPEG Version 1 (ISO/IEC 11172-3)\",\n      layers: \"v1\",\n      sampleRates: {\n        0b00000000: 44100,\n        0b00000100: 48000,\n        0b00001000: 32000,\n        0b00001100: \"reserved\",\n      },\n    },\n  };\n\n  static protection = {\n    0b00000000: \"16bit CRC\",\n    0b00000001: \"none\",\n  };\n\n  static emphasis = {\n    0b00000000: \"none\",\n    0b00000001: \"50/15 ms\",\n    0b00000010: \"reserved\",\n    0b00000011: \"CCIT J.17\",\n  };\n\n  static channelModes = {\n    0b00000000: { channels: 2, description: \"Stereo\" },\n    0b01000000: { channels: 2, description: \"Joint stereo\" },\n    0b10000000: { channels: 2, description: \"Dual channel\" },\n    0b11000000: { channels: 1, description: \"Single channel (Mono)\" },\n  };\n\n  static getHeader(buffer) {\n    // Must be at least four bytes.\n    if (buffer.length < 4) return null;\n\n    // Frame sync (all bits must be set): `11111111|111`:\n    if (buffer[0] !== 0xff || buffer[1] < 0xe0) return null;\n\n    // Byte (2 of 4)\n    // * `111BBCCD`\n    // * `...BB...`: MPEG Audio version ID\n    // * `.....CC.`: Layer description\n    // * `.......D`: Protection bit (0 - Protected by CRC (16bit CRC follows header), 1 = Not protected)\n    const mpegVersionBits = buffer[1] & 0b00011000;\n    const layerBits = buffer[1] & 0b00000110;\n    const protectionBit = buffer[1] & 0b00000001;\n\n    const header = {};\n    header.headerByteLength = 4;\n\n    // Mpeg version (1, 2, 2.5)\n    const mpegVersion = MPEGHeader.mpegVersions[mpegVersionBits];\n    if (mpegVersion.description === \"reserved\") return null;\n\n    // Layer (I, II, III)\n    if (MPEGHeader.layers[layerBits].description === \"reserved\") return null;\n    const layer = {\n      ...MPEGHeader.layers[layerBits],\n      ...MPEGHeader.layers[layerBits][mpegVersion.layers],\n    };\n\n    header.mpegVersion = mpegVersion.description;\n    header.layer = layer.description;\n    header.sampleLength = layer.sampleLength;\n    header.protection = MPEGHeader.protection[protectionBit];\n\n    // Byte (3 of 4)\n    // * `EEEEFFGH`\n    // * `EEEE....`: Bitrate index. 1111 is invalid, everything else is accepted\n    // * `....FF..`: Sample rate\n    // * `......G.`: Padding bit, 0=frame not padded, 1=frame padded\n    // * `.......H`: Private bit.\n    const bitrateBits = buffer[2] & 0b11110000;\n    const sampleRateBits = buffer[2] & 0b00001100;\n    const paddingBit = buffer[2] & 0b00000010;\n    const privateBit = buffer[2] & 0b00000001;\n\n    header.bitrate = MPEGHeader.bitrateMatrix[bitrateBits][layer.bitrateIndex];\n    if (header.bitrate === \"bad\") return null;\n\n    header.sampleRate = mpegVersion.sampleRates[sampleRateBits];\n    if (header.sampleRate === \"reserved\") return null;\n\n    header.framePadding = paddingBit >> 1 && layer.framePadding;\n    header.isPrivate = !!privateBit;\n\n    header.dataByteLength = Math.floor(\n      (125 * header.bitrate * header.sampleLength) / header.sampleRate +\n        header.framePadding\n    );\n    if (!header.dataByteLength) return null;\n\n    // Byte (4 of 4)\n    // * `IIJJKLMM`\n    // * `II......`: Channel mode\n    // * `..JJ....`: Mode extension (only if joint stereo)\n    // * `....K...`: Copyright\n    // * `.....L..`: Original\n    // * `......MM`: Emphasis\n    const channelModeBits = buffer[3] & 0b11000000;\n    const modeExtensionBits = buffer[3] & 0b00110000;\n    const copyrightBit = buffer[3] & 0b00001000;\n    const originalBit = buffer[3] & 0b00000100;\n    const emphasisBits = buffer[3] & 0b00000011;\n\n    header.channelMode = MPEGHeader.channelModes[channelModeBits].description;\n    header.channels = MPEGHeader.channelModes[channelModeBits].channels;\n    header.modeExtension = layer.modeExtensions[modeExtensionBits];\n    header.isCopyrighted = !!(copyrightBit >> 3);\n    header.isOriginal = !!(originalBit >> 2);\n\n    header.emphasis = MPEGHeader.emphasis[emphasisBits];\n    if (header.emphasis === \"reserved\") return null;\n\n    return new MPEGHeader(header);\n  }\n\n  /**\n   * @private\n   * Call MPEGHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this._bitrate = header.bitrate;\n    this._emphasis = header.emphasis;\n    this._framePadding = header.framePadding;\n    this._isCopyrighted = header.isCopyrighted;\n    this._modeExtension = header.modeExtension;\n    this._mimeType = \"audio/mpeg\";\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class CodecFrame {\n  constructor(header, data, length) {\n    this._header = header;\n    this._data = data;\n    this._length = length;\n  }\n\n  /**\n   * @returns Total length of frame (header + data)\n   */\n  get length() {\n    return this._length;\n  }\n\n  /**\n   * @returns {MPEGHeader} This frame's header\n   */\n  get header() {\n    return this._header;\n  }\n\n  /**\n   * @returns {MPEGHeader} {Uint8Array} This frame's data\n   */\n  get data() {\n    return this._data;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\n\nexport default class MPEGFrame extends CodecFrame {\n  constructor(header, data) {\n    super(header, data, data.length);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\n/*\nhttps://wiki.multimedia.cx/index.php/ADTS\n\nAAAAAAAA AAAABCCD EEFFFFGH HHIJKLMM MMMMMMMM MMMOOOOO OOOOOOPP (QQQQQQQQ QQQQQQQQ)\n\nAACHeader consists of 7 or 9 bytes (without or with CRC).\nLetter \tLength (bits) \tDescription\nA \t12 \tsyncword 0xFFF, all bits must be 1\nB \t1 \tMPEG Version: 0 for MPEG-4, 1 for MPEG-2\nC \t2 \tLayer: always 0\nD \t1 \tprotection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\nE \t2 \tprofile, the MPEG-4 Audio Object Type minus 1\nF \t4 \tMPEG-4 Sampling Frequency Index (15 is forbidden)\nG \t1 \tprivate bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\nH \t3 \tMPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\nI \t1 \toriginality, set to 0 when encoding, ignore when decoding\nJ \t1 \thome, set to 0 when encoding, ignore when decoding\nK \t1 \tcopyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\nL \t1 \tcopyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\nM \t13 \tframe length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\nO \t11 \tBuffer fullness // 0x7FF for VBR\nP \t2 \tNumber of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\nQ \t16 \tCRC if protection absent is 0 \n*/\n\nimport CodecHeader from \"../CodecHeader\";\n\nexport default class AACHeader extends CodecHeader {\n  static mpegVersion = {\n    0b00000000: \"MPEG-4\",\n    0b00001000: \"MPEG-2\",\n  };\n\n  static layer = {\n    0b00000000: \"valid\",\n    0b00000010: \"bad\",\n    0b00000100: \"bad\",\n    0b00000110: \"bad\",\n  };\n\n  static protection = {\n    0b00000000: \"16bit CRC\",\n    0b00000001: \"none\",\n  };\n\n  static profile = {\n    0b00000000: \"AAC Main\",\n    0b01000000: \"AAC LC (Low Complexity)\",\n    0b10000000: \"AAC SSR (Scalable Sample Rate)\",\n    0b11000000: \"AAC LTP (Long Term Prediction)\",\n  };\n\n  static sampleRates = {\n    0b00000000: \"96000\",\n    0b00000100: \"88200\",\n    0b00001000: \"64000\",\n    0b00001100: \"48000\",\n    0b00010000: \"44100\",\n    0b00010100: \"32000\",\n    0b00011000: \"24000\",\n    0b00011100: \"22050\",\n    0b00100000: \"16000\",\n    0b00100100: \"12000\",\n    0b00101000: \"11025\",\n    0b00101100: \"8000\",\n    0b00110000: \"7350\",\n    0b00110100: \"reserved\",\n    0b00111000: \"reserved\",\n    0b00111100: \"frequency is written explicitly\",\n  };\n\n  static channelMode = {\n    0b000000000: { channels: 0, description: \"Defined in AOT Specific Config\" },\n    0b001000000: { channels: 1, description: \"front-center\" },\n    0b010000000: { channels: 2, description: \"front-left, front-right\" },\n    0b011000000: {\n      channels: 3,\n      description: \"front-center, front-left, front-right\",\n    },\n    0b100000000: {\n      channels: 4,\n      description: \"front-center, front-left, front-right, back-center\",\n    },\n    0b101000000: {\n      channels: 5,\n      description:\n        \"front-center, front-left, front-right, back-left, back-right\",\n    },\n    0b110000000: {\n      channels: 6,\n      description:\n        \"front-center, front-left, front-right, back-left, back-right, LFE-channel\",\n    },\n    0b111000000: {\n      channels: 8,\n      description:\n        \"front-center, front-left, front-right, side-left, side-right, back-left, back-right, LFE-channel\",\n    },\n  };\n\n  static getHeader(buffer) {\n    // Must be at least seven bytes.\n    if (buffer.length < 7) return null;\n\n    // Frame sync (all bits must be set): `11111111|1111`:\n    if (buffer[0] !== 0xff || buffer[1] < 0xf0) return null;\n\n    // Byte (2 of 7)\n    // * `1111BCCD`\n    // * `....B...`: MPEG Version: 0 for MPEG-4, 1 for MPEG-2\n    // * `.....CC.`: Layer: always 0\n    // * `.......D`: protection absent, Warning, set to 1 if there is no CRC and 0 if there is CRC\n    const mpegVersionBits = buffer[1] & 0b00001000;\n    const layerBits = buffer[1] & 0b00000110;\n    const protectionBit = buffer[1] & 0b00000001;\n\n    const header = {};\n    header.mpegVersion = AACHeader.mpegVersion[mpegVersionBits];\n\n    header.layer = AACHeader.layer[layerBits];\n    if (header.layer === \"bad\") return null;\n\n    header.protection = AACHeader.protection[protectionBit];\n    header.headerByteLength = protectionBit ? 7 : 9;\n\n    // Byte (3 of 7)\n    // * `EEFFFFGH`\n    // * `EE......`: profile, the MPEG-4 Audio Object Type minus 1\n    // * `..FFFF..`: MPEG-4 Sampling Frequency Index (15 is forbidden)\n    // * `......G.`: private bit, guaranteed never to be used by MPEG, set to 0 when encoding, ignore when decoding\n    const profileBits = buffer[2] & 0b11000000;\n    const sampleRateBits = buffer[2] & 0b00111100;\n    const privateBit = buffer[2] & 0b00000010;\n\n    header.profile = AACHeader.profile[profileBits];\n\n    header.sampleRate = AACHeader.sampleRates[sampleRateBits];\n    if (header.sampleRate === \"reserved\") return null;\n\n    header.isPrivate = !!(privateBit >> 1);\n\n    // Byte (3,4 of 7)\n    // * `.......H|HH......`: MPEG-4 Channel Configuration (in the case of 0, the channel configuration is sent via an inband PCE)\n    const channelModeBits =\n      new DataView(Uint8Array.from([buffer[2], buffer[3]]).buffer).getUint16() &\n      0b111000000;\n    header.channelMode = AACHeader.channelMode[channelModeBits].description;\n    header.channels = AACHeader.channelMode[channelModeBits].channels;\n\n    // Byte (4 of 7)\n    // * `HHIJKLMM`\n    // * `..I.....`: originality, set to 0 when encoding, ignore when decoding\n    // * `...J....`: home, set to 0 when encoding, ignore when decoding\n    // * `....K...`: copyrighted id bit, the next bit of a centrally registered copyright identifier, set to 0 when encoding, ignore when decoding\n    // * `.....L..`: copyright id start, signals that this frame's copyright id bit is the first bit of the copyright id, set to 0 when encoding, ignore when decoding\n    const originalBit = buffer[3] & 0b00100000;\n    const homeBit = buffer[3] & 0b00001000;\n    const copyrightIdBit = buffer[3] & 0b00001000;\n    const copyrightIdStartBit = buffer[3] & 0b00000100;\n\n    header.isOriginal = !!(originalBit >> 5);\n    header.isHome = !!(homeBit >> 4);\n    header.copyrightId = !!(copyrightIdBit >> 3);\n    header.copyrightIdStart = !!(copyrightIdStartBit >> 2);\n\n    // Byte (4,5,6 of 7)\n    // * `.......MM|MMMMMMMM|MMM.....`: frame length, this value must include 7 or 9 bytes of header length: FrameLength = (ProtectionAbsent == 1 ? 7 : 9) + size(AACFrame)\n    const frameLengthBits =\n      new DataView(\n        Uint8Array.from([0x00, buffer[3], buffer[4], buffer[5]]).buffer\n      ).getUint32() & 0x3ffe0;\n    header.dataByteLength = frameLengthBits >> 5;\n    if (!header.dataByteLength) return null;\n\n    // Byte (6,7 of 7)\n    // * `...OOOOO|OOOOOO..`: Buffer fullness\n    const bufferFullnessBits =\n      new DataView(Uint8Array.from([buffer[5], buffer[6]]).buffer).getUint16() &\n      0x1ffc;\n    header.bufferFullness =\n      bufferFullnessBits === 0x1ffc ? \"VBR\" : bufferFullnessBits >> 2;\n\n    // Byte (7 of 7)\n    // * `......PP` Number of AAC frames (RDBs) in ADTS frame minus 1, for maximum compatibility always use 1 AAC frame per ADTS frame\n    header.numberAACFrames = buffer[6] & 0b00000011;\n    header.sampleLength = 1024;\n\n    header.bits = {\n      profileBits,\n      sampleRateBits,\n      channelModeBits,\n    };\n\n    return new AACHeader(header);\n  }\n\n  /**\n   * @private\n   * Call AACHeader.getHeader(Array<Uint8>) to get instance\n   */\n  constructor(header) {\n    super(header);\n    this._bits = header.bits;\n    this._copyrightId = header.copyrightId;\n    this._copyrightIdStart = header.copyrightIdStart;\n    this._bufferFullness = header.bufferFullness;\n    this._isHome = header.isHome;\n    this._mimeType = \"audio/aac\";\n    this._numberAACFrames = header.numberAACFrames;\n    this._profile = header.profile;\n  }\n\n  get audioSpecificConfig() {\n    // Audio Specific Configuration\n    // * `000EEFFF|F0HHH000`:\n    // * `000EE...|........`: Object Type (profileBit + 1)\n    // * `.....FFF|F.......`: Sample Rate\n    // * `........|.0HHH...`: Channel Configuration\n    // * `........|.....0..`: Frame Length (1024)\n    // * `........|......0.`: does not depend on core coder\n    // * `........|.......0`: Not Extension\n    const audioSpecificConfig =\n      ((this._bits.profileBits + 0x40) << 5) |\n      (this._bits.sampleRateBits << 5) |\n      (this._bits.channelModeBits >> 3);\n\n    const bytes = new Uint8Array(2);\n    new DataView(bytes.buffer).setUint16(0, audioSpecificConfig, false);\n    return bytes;\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecFrame from \"../CodecFrame\";\n\nexport default class AACFrame extends CodecFrame {\n  constructor(header, data) {\n    super(header, data.subarray(header.headerByteLength), data.length);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport MPEGHeader from \"./mpeg/MPEGHeader\";\nimport MPEGFrame from \"./mpeg/MPEGFrame\";\n\nimport AACHeader from \"./aac/AACHeader\";\nimport AACFrame from \"./aac/AACFrame\";\n\nexport default class CodecParser {\n  constructor(mimeType) {\n    if (mimeType.match(/aac/)) {\n      this._frameClass = AACFrame;\n      this._getHeader = this._getAACHeader;\n      this._headerLength = 9;\n    } else {\n      this._frameClass = MPEGFrame;\n      this._getHeader = this._getMPEGHeader;\n      this._headerLength = 4;\n      this._headerCache = new Map();\n    }\n  }\n\n  /**\n   * @private\n   * @description Parses an AAC header from the passed in buffer.\n   * @param {data} buffer Header data\n   * @returns {AACHeader} Instance of AACHeader\n   * @returns {null} If buffer does not contain a valid header\n   */\n  _getAACHeader(buffer) {\n    const header = AACHeader.getHeader(buffer);\n    return header;\n  }\n\n  /**\n   * @private\n   * @description Parses and caches valid MPEG 1/2 headers so they are parsed only happens once.\n   * @param {data} buffer Header data\n   * @returns {MPEGHeader} Instance of MPEGHeader\n   * @returns {null} If buffer does not contain a valid header\n   */\n  _getMPEGHeader(buffer) {\n    const key = String.fromCharCode(...buffer.subarray(0, 4));\n\n    if (this._headerCache.has(key)) {\n      return this._headerCache.get(key);\n    } else {\n      const header = MPEGHeader.getHeader(buffer);\n      if (header) {\n        this._headerCache.set(key, header);\n        return header;\n      }\n    }\n  }\n\n  /**\n   * @description Finds and returns a codec frame in the context of a stream. Frame will be undefined if no valid frame was found at the offset.\n   * @param {Uint8Array} data Codec data that should contain a header, audio data, and then next header\n   * @param {number} offset Offset where frame should be\n   * @returns {object} Object containing the actual offset and frame. Frame is undefined if no valid header was found\n   */\n  readFrameStream(data, offset = 0) {\n    // try to get the header at the given offset\n    let header = this._getHeader(data.subarray(offset));\n\n    // find a header in the data\n    while (!header && offset + this._headerLength < data.length) {\n      offset++;\n      header = this._getHeader(data.subarray(offset));\n    }\n\n    if (header) {\n      // check if there is a valid header immediately after this frame\n      const nextHeaderOffset = offset + header.dataByteLength;\n      if (nextHeaderOffset + header.headerByteLength <= data.length) {\n        return this._getHeader(data.subarray(nextHeaderOffset))\n          ? {\n              offset,\n              frame: new this._frameClass(\n                header,\n                data.subarray(offset, nextHeaderOffset)\n              ),\n            }\n          : { offset: nextHeaderOffset + header.headerByteLength };\n      }\n    }\n\n    // there is a header, but there is not enough data to determine the next header\n    return {\n      offset,\n    };\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nexport default class ISOBMFFObject {\n  /**\n   * @abstract\n   * @description ISO Base Media File Format Object structure Abstract Class\n   * @param {any} name Name of the object\n   * @param {Array<Uint8>} [contents] Array of bytes to insert into this box\n   * @param {Array<ISOBMFFObject>} [objects] Array of objects to insert into this object\n   */\n  constructor(name, contents, objects) {\n    this._name = name;\n    this._contents = contents;\n    this._objects = objects;\n  }\n\n  get contents() {\n    return [\n      ...this._contents,\n      ...this._objects.flatMap((obj) => [...obj.contents]),\n    ];\n  }\n\n  /**\n   * @returns {number} Total length of this object and all contents\n   */\n  get length() {\n    return this._objects.reduce(\n      (acc, obj) => acc + obj.length,\n      this.LENGTH_SIZE + this._contents.length\n    );\n  }\n\n  /**\n   * @description Inserts bytes into the contents of this object\n   * @param {Uint8Array} data Bytes to insert\n   * @param {number} index Position to insert bytes\n   */\n  insertBytes(data, index) {\n    index = index + this.LENGTH_SIZE;\n    this._contents = [\n      ...this._contents.slice(0, index),\n      ...data,\n      ...this._contents.slice(index),\n    ];\n  }\n\n  /**\n   * @description Appends data to the end of the contents of this box\n   * @param {Uint8Array} data Bytes to append\n   */\n  appendBytes(data) {\n    this._contents = [...this._contents, ...data];\n  }\n\n  addObject(object) {\n    this._objects.push(object);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\nimport ISOBMFFObject from \"./ISOBMFFObject\";\n\nexport default class Box extends ISOBMFFObject {\n  /**\n   * @description ISO/IEC 14496-12 Part 12 ISO Base Media File Format Box\n   * @param {string} name Name of the box (i.e. 'moov', 'moof', 'traf')\n   * @param {object} params Object containing contents or boxes\n   * @param {Array<Uint8>} [params.contents] Array of bytes to insert into this box\n   * @param {Array<Box>} [params.boxes] Array of boxes to insert into this box\n   */\n  constructor(name, { contents = [], boxes = [] } = {}) {\n    super(name, [...Box.stringToByteArray(name), ...contents], boxes);\n\n    this.LENGTH_SIZE = 4;\n  }\n\n  /**\n   * @description Converts a string to a byte array\n   * @param {string} name String to convert\n   * @returns {Uint8Array}\n   */\n  static stringToByteArray(name) {\n    const array = [];\n    for (const char of name) {\n      array.push(char.charCodeAt(0));\n    }\n    return array;\n  }\n\n  /**\n   * @description Converts a JavaScript number to Uint32\n   * @param {number} number Number to convert\n   * @returns {Uint32}\n   */\n  static getUint32(number) {\n    const bytes = new Uint8Array(4);\n    new DataView(bytes.buffer).setUint32(0, number, false);\n    return bytes;\n  }\n\n  /**\n   * @description Converts a JavaScript number to Uint32\n   * @param {number} number Number to convert\n   * @returns {Uint32}\n   */\n  static getUint16(number) {\n    const bytes = new Uint8Array(2);\n    new DataView(bytes.buffer).setUint16(0, number, false);\n    return bytes;\n  }\n\n  /**\n   * @returns {Uint8Array} Contents of this box\n   */\n  get contents() {\n    const contents = super.contents;\n    return Uint8Array.from([\n      ...Box.getUint32(this.LENGTH_SIZE + contents.length),\n      ...contents,\n    ]);\n  }\n\n  /**\n   * @description Adds a Box to this box\n   * @param {Box} box Box to add\n   */\n  addBox(box) {\n    if (box.constructor !== Box) {\n      console.error(\"Only an object of type Box can be appended\");\n      throw new Error(\"Not a box\");\n    }\n\n    this.addObject(box);\n  }\n}\n","import ISOBMFFObject from \"./ISOBMFFObject\";\n\nexport default class ESTag extends ISOBMFFObject {\n  constructor(tagNumber, { contents = [], tags = [] } = {}) {\n    super(tagNumber, contents, tags);\n    this.LENGTH_SIZE = 1;\n  }\n\n  /**\n   * @returns {Uint8Array} Contents of this stream descriptor tag\n   */\n  get contents() {\n    const contents = super.contents;\n\n    /* prettier-ignore */\n    return Uint8Array.from([\n      this._name,\n      0x80,0x80,0x80,\n      contents.length,\n      ...contents,\n    ]);\n  }\n\n  addTag(tag) {\n    this.addObject(tag);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport Box from \"./Box\";\nimport ESTag from \"./ESTag\";\n\n/**\n * @description Fragmented ISO Base Media File Format Builder is a class to\n * wrap codec frames in a MP4 container for streaming MP3 / AAC compatibility in Firefox.\n */\nexport default class FragmentedISOBMFFBuilder {\n  static getBoxContents(boxes) {\n    return Uint8Array.from(boxes.flatMap((box) => [...box.contents]));\n  }\n\n  /**\n   * @description Codec mapping for `esds` box\n   * https://stackoverflow.com/questions/3987850/mp4-atom-how-to-discriminate-the-audio-codec-is-it-aac-or-mp3\n   * 0x40 - MPEG-4 Audio\n   * 0x6b - MPEG-1 Audio (MPEG-1 Layers 1, 2, and 3)\n   * 0x69 - MPEG-2 Backward Compatible Audio (MPEG-2 Layers 1, 2, and 3)\n   * 0x67 - MPEG-2 AAC LC\n   */\n  static esdsCodecs = {\n    \"audio/aac\": 0x40,\n    \"audio/mpeg\": 0x6b,\n  };\n\n  /**\n   * @param {Header} header Codec header\n   * @returns {Uint8Array} Filetype and Movie Box information for the codec\n   */\n  getMovieBox(header) {\n    const channels = header.channels;\n    const mimeType = header.mimeType;\n    const sampleRate = Box.getUint32(header.sampleRate);\n\n    const streamDescriptorTag = new ESTag(4, {\n      /* prettier-ignore */\n      contents: [\n        FragmentedISOBMFFBuilder.esdsCodecs[mimeType],\n        0x15, // stream type(6bits)=5 audio, flags(2bits)=1\n        0x00,0x00,0x00, // 24bit buffer size\n        0x00,0x00,0x00,0x00, // max bitrate\n        0x00,0x00,0x00,0x00, // avg bitrate\n      ],\n    });\n\n    const boxes = [\n      new Box(\"ftyp\", {\n        /* prettier-ignore */\n        contents: [...Box.stringToByteArray(\"iso5\"), // major brand\n          0x00,0x00,0x02,0x00, // minor version\n          ...Box.stringToByteArray(\"iso6mp41\")], // compatible brands\n      }),\n      new Box(\"moov\", {\n        boxes: [\n          new Box(\"mvhd\", {\n            /* prettier-ignore */\n            contents: [0x00, // version\n              0x00,0x00,0x00, // flags\n              0x00,0x00,0x00,0x00, // creation time\n              0x00,0x00,0x00,0x00, // modification time\n              0x00,0x00,0x03,0xe8, // timescale\n              0x00,0x00,0x00,0x00, // duration\n              0x00,0x01,0x00,0x00, // rate\n              0x01,0x00, // volume\n              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n              0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // a b u (matrix structure)\n              0x00,0x00,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, // c d v\n              0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x00, // x y w\n              0x00,0x00,0x00,0x00, // preview time\n              0x00,0x00,0x00,0x00, // preview duration\n              0x00,0x00,0x00,0x00, // poster time\n              0x00,0x00,0x00,0x00, // selection time\n              0x00,0x00,0x00,0x00, // selection duration\n              0x00,0x00,0x00,0x00, // current time\n              0x00,0x00,0x00,0x02], // next track\n          }),\n          new Box(\"trak\", {\n            boxes: [\n              new Box(\"tkhd\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x00,0x00,0x03, // flags (0x01 - track enabled, 0x02 - track in movie, 0x04 - track in preview, 0x08 - track in poster)\n                  0x00,0x00,0x00,0x00, // creation time\n                  0x00,0x00,0x00,0x00, // modification time\n                  0x00,0x00,0x00,0x01, // track id\n                  0x00,0x00,0x00,0x00, // reserved\n                  0x00,0x00,0x00,0x00, // duration\n                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n                  0x00,0x00, // layer\n                  0x00,0x01, // alternate group\n                  0x01,0x00, // volume\n                  0x00,0x00, // reserved\n                  0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, // a b u (matrix structure)\n                  0x00,0x00,0x00,0x00, 0x00,0x01,0x00,0x00, 0x00,0x00,0x00,0x00, // c d v \n                  0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x40,0x00,0x00,0x00, // x y w\n                  0x00,0x00,0x00,0x00, // track width\n                  0x00,0x00,0x00,0x00], // track height\n              }),\n              new Box(\"mdia\", {\n                boxes: [\n                  new Box(\"mdhd\", {\n                    /* prettier-ignore */\n                    contents: [0x00, // version\n                      0x00,0x00,0x00, // flags\n                      0x00,0x00,0x00,0x00, // creation time (in seconds since midnight, January 1, 1904)\n                      0x00,0x00,0x00,0x00, // modification time\n                      ...sampleRate, // time scale\n                      0x00,0x00,0x00,0x00, // duration\n                      0x55,0xc4, // language\n                      0x00,0x00], // quality\n                  }),\n                  new Box(\"hdlr\", {\n                    /* prettier-ignore */\n                    contents: [0x00, // version\n                      0x00,0x00,0x00, // flags\n                      ...Box.stringToByteArray('mhlr'), // component type (mhlr, dhlr)\n                      ...Box.stringToByteArray('soun'), // component subtype (vide' for video data, 'soun' for sound data or ‘subt’ for subtitles)\n                      0x00,0x00,0x00,0x00, // component manufacturer\n                      0x00,0x00,0x00,0x00, // component flags\n                      0x00,0x00,0x00,0x00, // component flags mask\n                      0x00], // String that specifies the name of the component, ended by a null character\n                  }),\n                  new Box(\"minf\", {\n                    boxes: [\n                      new Box(\"smhd\", {\n                        /* prettier-ignore */\n                        contents: [0x00, // version\n                          0x00,0x00,0x00, // flags\n                          0x00,0x00, // balance\n                          0x00,0x00 // reserved\n                        ],\n                      }),\n                      new Box(\"dinf\", {\n                        boxes: [\n                          new Box(\"dinf\", {\n                            /* prettier-ignore */\n                            contents: [0x00, // version\n                              0x00,0x00,0x00, // flags\n                              0x00,0x00,0x00,0x01 // number entries\n                            ],\n                            boxes: [\n                              new Box(\"url \", {\n                                /* prettier-ignore */\n                                contents: [0x00,0x00,0x00,0x01],\n                              }),\n                            ],\n                          }),\n                        ],\n                      }),\n                      new Box(\"stbl\", {\n                        boxes: [\n                          new Box(\"stsd\", {\n                            // Sample description atom\n                            /* prettier-ignore */\n                            contents: [0x00, // version\n                              0x00,0x00,0x00, // flags\n                              0x00,0x00,0x00,0x01], // entry count\n                            boxes: [\n                              new Box(\"mp4a\", {\n                                /* prettier-ignore */\n                                contents: [0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n                                  0x00,0x01, // data reference index\n                                  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // reserved\n                                  0x00,channels, // channel count\n                                  0x00,0x10, // PCM bitrate (16bit)\n                                  0x00,0x00, // Compression ID\n                                  0x00,0x00, // Packet size\n                                  ...Box.getUint16(header.sampleRate),0x00,0x00], // sample rate unsigned floating point\n                                boxes: [\n                                  new Box(\"esds\", {\n                                    contents: [0x00, 0x00, 0x00, 0x00],\n                                    boxes: [\n                                      new ESTag(3, {\n                                        contents: [\n                                          0x00,\n                                          0x01, // ES_ID = 1\n                                          0x00, // flags etc = 0\n                                        ],\n                                        tags: [\n                                          streamDescriptorTag,\n                                          new ESTag(6, {\n                                            contents: [0x02],\n                                          }),\n                                        ],\n                                      }),\n                                    ],\n                                  }),\n                                ],\n                              }),\n                            ],\n                          }),\n                          new Box(\"stts\", {\n                            // Time-to-sample atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stsc\", {\n                            // Sample-to-chunk atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stsz\", {\n                            // Sample Size atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n                              0x00,0x00,0x00,0x00],\n                          }),\n                          new Box(\"stco\", {\n                            // Chunk Offset atom\n                            /* prettier-ignore */\n                            contents: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n                          }),\n                        ],\n                      }),\n                    ],\n                  }),\n                ],\n              }),\n            ],\n          }),\n          new Box(\"mvex\", {\n            boxes: [\n              new Box(\"trex\", {\n                /* prettier-ignore */\n                contents: [0x00,0x00,0x00,0x00, // flags\n                  0x00,0x00,0x00,0x01, // track id\n                  0x00,0x00,0x00,0x01, // default_sample_description_index\n                  0x00,0x00,0x00,0x00, // default_sample_duration\n                  0x00,0x00,0x00,0x00, // default_sample_size;\n                  0x00,0x00,0x00,0x00], // default_sample_flags;\n              }),\n            ],\n          }),\n        ],\n      }),\n    ];\n\n    if (mimeType === \"audio/aac\") {\n      streamDescriptorTag.addTag(\n        new ESTag(5, {\n          contents: [...header.audioSpecificConfig],\n        })\n      );\n    }\n\n    return FragmentedISOBMFFBuilder.getBoxContents(boxes);\n  }\n\n  /**\n   * @description Wraps codec frames into a Movie Fragment\n   * @param {Array<Frame>} frames Frames to contain in this Movie Fragment\n   * @returns {Uint8Array} Movie Fragment containing the frames\n   */\n  wrapFrames(frames) {\n    const trun = new Box(\"trun\", {\n      /* prettier-ignore */\n      contents: [0x00, // version\n        0x00,0x02,0x01, // flags\n        // * `ABCD|00000E0F`\n        // * `A...|........` sample‐composition‐time‐offsets‐present\n        // * `.B..|........` sample‐flags‐present\n        // * `..C.|........` sample‐size‐present\n        // * `...D|........` sample‐duration‐present\n        // * `....|.....E..` first‐sample‐flags‐present\n        // * `....|.......G` data-offset-present\n        ...Box.getUint32(frames.length), // number of samples\n        ...frames.flatMap((frame) => [...Box.getUint32(frame.data.length)]), // samples lengths per frame\n      ],\n    });\n\n    const boxes = [\n      new Box(\"moof\", {\n        boxes: [\n          new Box(\"mfhd\", {\n            /* prettier-ignore */\n            contents: [0x00,0x00,0x00,0x00,\n              0x00,0x00,0x00,0x00], // sequence number\n          }),\n          new Box(\"traf\", {\n            boxes: [\n              new Box(\"tfhd\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x02,0x00,0x08, // flags\n                  // * `AB|00000000|00CDE0FG`\n                  // * `A.|........|........` default-base-is-moof\n                  // * `.B|........|........` duration-is-empty\n                  // * `..|........|..C.....` default-sample-flags-present\n                  // * `..|........|...D....` default-sample-size-present\n                  // * `..|........|....E...` default-sample-duration-present\n                  // * `..|........|......F.` sample-description-index-present\n                  // * `..|........|.......G` base-data-offset-present\n                  0x00,0x00,0x00,0x01, // track id\n                  ...Box.getUint32(frames[0].header.sampleLength), // default sample duration\n                ],\n              }),\n              new Box(\"tfdt\", {\n                /* prettier-ignore */\n                contents: [0x00, // version\n                  0x00,0x00,0x00, // flags\n                  0x00,0x00,0x00,0x00], // base media decode time\n              }),\n              trun,\n            ],\n          }),\n        ],\n      }),\n      new Box(\"mdat\", {\n        contents: frames.flatMap((frame) => [...frame.data]),\n      }),\n    ];\n\n    trun.insertBytes(Box.getUint32(boxes[0].length + 12), 8); // data offset (moof length + mdat length + mdat)\n\n    return FragmentedISOBMFFBuilder.getBoxContents(boxes);\n  }\n}\n","/* Copyright 2020 Ethan Halsall\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>\n*/\n\nimport CodecParser from \"./codecs/CodecParser\";\nimport FragmentedISOBMFFBuilder from \"./isobmff/FragmentedISOBMFFBuilder\";\n\n/**\n * @description Generator that takes in MPEG 1/2 or AAC Data and yields Fragmented MP4 (ISOBMFF)\n */\nexport default class FragmentedMPEG {\n  static MIN_FRAMES = 2;\n  static MIN_FRAMES_LENGTH = 1022;\n\n  constructor(mimeType) {\n    this._codecParser = new CodecParser(mimeType);\n    this._fragmentedISOBMFFBuilder = new FragmentedISOBMFFBuilder();\n    this._frames = [];\n    this._codecData = new Uint8Array(0);\n\n    this._generator = this._generator();\n    this._generator.next();\n  }\n\n  /**\n   * @private\n   * @description Appends two buffers\n   * @param {Uint8Array} buf1\n   * @param {Uint8Array} buf2\n   */\n  static appendBuffers(buf1, buf2) {\n    const buf = new Uint8Array(buf1.length + buf2.length);\n    buf.set(buf1);\n    buf.set(buf2, buf1.length);\n\n    return buf;\n  }\n\n  /**\n   * @description Returns an iterator for the passed in MPEG data.\n   * @param {Uint8Array} chunk Next chunk of MPEG data to read\n   * @returns {IterableIterator} Iterator that operates over a raw icecast response.\n   * @yields {Uint8Array} Movie Fragments containing MPEG frames\n   */\n  *iterator(chunk) {\n    for (\n      let i = this._generator.next(chunk);\n      i.value;\n      i = this._generator.next()\n    ) {\n      yield i.value;\n    }\n  }\n\n  /**\n   * @private\n   * @description Internal generator.\n   * @yields {Uint8Array} Movie Fragments containing MPEG frames\n   */\n  *_generator() {\n    let frames;\n    // start parsing out frames\n    while (!frames) {\n      yield* this._sendReceiveData();\n      frames = this._parseFrames();\n    }\n\n    // yield the movie box along with a movie fragment containing frames\n    let fMP4 = FragmentedMPEG.appendBuffers(\n      this._fragmentedISOBMFFBuilder.getMovieBox(frames[0].header),\n      this._fragmentedISOBMFFBuilder.wrapFrames(frames)\n    );\n\n    // yield movie fragments containing frames\n    while (true) {\n      yield* this._sendReceiveData(fMP4);\n      frames = this._parseFrames();\n      fMP4 = frames ? this._fragmentedISOBMFFBuilder.wrapFrames(frames) : null;\n    }\n  }\n\n  /**\n   * @private\n   * @param {Uint8Array} fMP4 Fragmented MP4 to send\n   * @yields {Uint8Array} Fragmented MP4\n   */\n  *_sendReceiveData(fMP4) {\n    let codecData = yield fMP4;\n\n    while (!codecData) {\n      codecData = yield;\n    }\n\n    this._codecData = FragmentedMPEG.appendBuffers(this._codecData, codecData);\n  }\n\n  /**\n   * @private\n   */\n  _parseFrames() {\n    let currentFrame = this._codecParser.readFrameStream(this._codecData);\n\n    while (currentFrame.frame) {\n      this._frames.push(currentFrame.frame);\n\n      currentFrame = this._codecParser.readFrameStream(\n        this._codecData,\n        currentFrame.offset + currentFrame.frame.length\n      );\n    }\n    this._codecData = this._codecData.subarray(currentFrame.offset);\n\n    if (\n      this._frames.length >= FragmentedMPEG.MIN_FRAMES &&\n      this._frames.reduce((acc, frame) => acc + frame.data.length, 0) >=\n        FragmentedMPEG.MIN_FRAMES_LENGTH\n    ) {\n      const frames = this._frames;\n      this._frames = [];\n      return frames;\n    }\n  }\n}\n","import IcecastMetadataQueue from \"./metadata-js/IcecastMetadataQueue\";\nimport IcecastReadableStream from \"./metadata-js/IcecastReadableStream\";\nimport FragmentedMPEG from \"../FragmentedMPEG/FragmentedMPEG\";\n\nexport default class MetadataPlayer {\n  constructor({ onMetadataUpdate }) {\n    this._icecastMetadataQueue = new IcecastMetadataQueue({\n      onMetadataUpdate: (meta) => onMetadataUpdate(meta),\n    });\n    this._audioElement = new Audio();\n    this._onMetadataUpdate = onMetadataUpdate;\n\n    this._playing = false;\n  }\n\n  get playing() {\n    return this._playing;\n  }\n\n  async _createMediaSource(mimeType) {\n    this._mediaSource = new MediaSource();\n    this._audioElement.src = URL.createObjectURL(this._mediaSource);\n\n    return new Promise((resolve) => {\n      this._mediaSource.addEventListener(\n        \"sourceopen\",\n        () => {\n          this._sourceBuffer = this._mediaSource.addSourceBuffer(mimeType);\n          this._sourceBuffer.mode = \"sequence\";\n          resolve();\n        },\n        { once: true }\n      );\n    });\n  }\n\n  _destroyMediaSource() {\n    this._mediaSource = null;\n    this._playPromise &&\n      this._playPromise\n        .then(() => this._audioElement.removeAttribute(\"src\"))\n        .then(() => this._audioElement.load())\n        .catch(() => {});\n  }\n\n  async _waitForSourceBuffer() {\n    return new Promise((resolve) => {\n      this._sourceBuffer.addEventListener(\"updateend\", resolve, { once: true });\n    });\n  }\n\n  async _appendSourceBuffer(chunk) {\n    this._sourceBuffer.appendBuffer(chunk);\n    await this._waitForSourceBuffer();\n\n    if (this._audioElement.currentTime > 0) {\n      this._sourceBuffer.remove(0, this._audioElement.currentTime);\n      await this._waitForSourceBuffer();\n    }\n  }\n\n  async fetchMimeType(endpoint) {\n    return fetch(endpoint, {\n      method: \"HEAD\",\n      mode: \"cors\",\n    });\n  }\n\n  async fetchStream(endpoint) {\n    this._controller = new AbortController();\n\n    return fetch(endpoint, {\n      method: \"GET\",\n      headers: {\n        \"Icy-MetaData\": \"1\",\n      },\n      signal: this._controller.signal,\n    });\n  }\n\n  async getMediaSource(res) {\n    const mimeType = res.headers.get(\"content-type\");\n\n    if (MediaSource.isTypeSupported(mimeType)) {\n      await this._createMediaSource(mimeType);\n\n      this._onStream = ({ stream }) => this._appendSourceBuffer(stream);\n    } else if (\n      (mimeType === \"audio/mpeg\" || mimeType.match(/aac/)) &&\n      MediaSource.isTypeSupported(\"audio/mp4\")\n    ) {\n      await this._createMediaSource(\"audio/mp4\");\n\n      this._fMP4Wrapper = new FragmentedMPEG(mimeType);\n      this._onStream = async ({ stream }) => {\n        for await (const movieFragment of this._fMP4Wrapper.iterator(stream)) {\n          await this._appendSourceBuffer(movieFragment);\n        }\n      };\n    } else {\n      throw new Error(\n        `Your browser does not support MediaSource ${mimeType}. Try using Google Chrome.`\n      );\n    }\n\n    return this._streamPromise;\n  }\n\n  play(endpoint, icyMetaInt) {\n    if (this._playing) this.stop();\n    this._playing = true;\n    this._streamPromise = this.fetchStream(endpoint);\n\n    Promise.race([\n      this.fetchMimeType(endpoint).catch(() => this._streamPromise),\n      this._streamPromise,\n    ])\n      .then((res) => this.getMediaSource(res))\n      .then(async (res) => {\n        this._playPromise = this._audioElement.play();\n        this._isInitialMetadata = true;\n\n        await new IcecastReadableStream(res, {\n          icyMetaInt,\n          onStream: this._onStream,\n          onMetadata: (value) => {\n            this._isInitialMetadata\n              ? this._onMetadataUpdate(value.metadata)\n              : this._icecastMetadataQueue.addMetadata(\n                  value,\n                  this._sourceBuffer.timestampOffset -\n                    this._audioElement.currentTime\n                );\n            this._isInitialMetadata = false;\n          },\n        }).startReading();\n      })\n      .catch((e) => {\n        if (e.name !== \"AbortError\") {\n          this._onMetadataUpdate(`Error Connecting: ${e.message}`);\n        }\n        this._destroyMediaSource();\n      });\n  }\n\n  stop() {\n    this._playing = false;\n    this._controller.abort();\n    this._icecastMetadataQueue.purgeMetadataQueue();\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\"\n});\n\nvar SvgPlay = function SvgPlay(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPlay, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/play.0187bd2f.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#808080\",\n  d: \"M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z\"\n});\n\nvar SvgPause = function SvgPause(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgPause, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/pause.b0b65543.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from \"react\";\nimport MetadataPlayer from \"../icecast/MetadataPlayer\";\nimport { ReactComponent as Play } from \"./play.svg\";\nimport { ReactComponent as Pause } from \"./pause.svg\";\nimport styles from \"./Player.module.css\";\nimport { useCallback } from \"react\";\n\nconst SELECT_STATION = \"Select a station\";\nconst SELECT_OR_PLAY = \"Select a station or press play\";\nconst LOADING = \"Loading...\";\nconst VISIT_STATION = \"Visit this station at \";\n\nconst useMetadataPlayer = (station, onMetadataUpdate) => {\n  const [metadataPlayer] = useState(\n    new MetadataPlayer({\n      onMetadataUpdate: (meta) => {\n        console.log(meta);\n        onMetadataUpdate(meta);\n      },\n    })\n  );\n\n  const play = useCallback(() => {\n    onMetadataUpdate(LOADING);\n    metadataPlayer.play(station.endpoint, station.metaInt);\n  }, [onMetadataUpdate, metadataPlayer, station]);\n\n  const stop = useCallback(() => {\n    onMetadataUpdate(SELECT_OR_PLAY);\n    metadataPlayer.stop();\n  }, [onMetadataUpdate, metadataPlayer]);\n\n  useEffect(() => {\n    station && play();\n  }, [station, play]);\n\n  const toggle = () => (metadataPlayer.playing ? stop() : play());\n\n  return [metadataPlayer.playing, toggle];\n};\n\nexport default ({ station }) => {\n  const [metadata, setMetadata] = useState(SELECT_STATION);\n  const [isPlaying, toggle] = useMetadataPlayer(station, setMetadata);\n\n  return (\n    <div className={styles.player}>\n      <button\n        disabled={!Boolean(station)}\n        className={styles.button}\n        onClick={toggle}\n      >\n        {isPlaying ? <Pause /> : <Play />}\n      </button>\n      <div>\n        <p className={styles.metadata}>\n          {typeof metadata === \"object\" ? metadata.StreamTitle : metadata}\n        </p>\n        {station?.link && (\n          <div className={styles.visitStation}>\n            {VISIT_STATION}\n            <a\n              className={styles.link}\n              href={station.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {station.name}\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styles from \"./StationSelector.module.css\";\n\nconst Station = ({ id, station, changeStation }) => (\n  <div className={styles.station}>\n    <input\n      type=\"radio\"\n      className={styles.stationRadio}\n      id={id}\n      name=\"stations\"\n      onChange={() => changeStation(station)}\n    ></input>\n    <label className={styles.stationLabel} htmlFor={id}>\n      <div className={styles.stationName}>{station.name}</div>\n      <div className={styles.stationDescription}>{station.description}</div>\n    </label>\n  </div>\n);\n\nexport default (props) =>\n  props.stations.map((station, idx) => (\n    <Station\n      key={idx}\n      station={station}\n      id={idx}\n      changeStation={props.changeStation}\n    />\n  ));\n","import React from \"react\";\nimport styles from \"./About.module.css\";\n\nexport default () => (\n  <div className={styles.about}>\n    <a\n      className={styles.link}\n      href=\"https://github.com/eshaz/icecast-metadata-js\"\n    >\n      <div>icecast-metadata-js</div>\n      <div className={styles.subLink}>\n        https://github.com/eshaz/icecast-metadata-js\n      </div>\n    </a>\n    <div className={styles.description}>\n      Javascript library that reads, parses, and queues realtime metadata from\n      an Icecast stream.\n    </div>\n    <div className={styles.disclaimer}>\n      Stations are presented here for demonstration purposes only.\n    </div>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport Player from \"./Player/Player\";\nimport StationSelector from \"./StationSelector/StationSelector\";\nimport stations from \"./stations.json\";\nimport styles from \"./App.module.css\";\nimport About from \"./About/About\";\n\nfunction App() {\n  const [station, setStation] = useState();\n\n  return (\n    <>\n      <header className={styles.header}>\n        <About />\n      </header>\n      <StationSelector stations={stations} changeStation={setStation} />\n      <footer className={styles.footer}>\n        <Player station={station}></Player>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}